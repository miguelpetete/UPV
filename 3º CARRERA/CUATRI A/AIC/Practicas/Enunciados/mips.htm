<html>
<head>
<meta charset="UTF-8"/>
<script>
function ejecutar_ensamblador()
{
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }


  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();




  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 844336;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([229,36,0,0,237,36,0,0,246,36,0,0,0,37,0,0,7,37,0,0,16,37,0,0,26,37,0,0,32,37,0,0,41,37,0,0,52,37,0,0,60,37,0,0,70,37,0,0,77,37,0,0,92,37,0,0,103,37,0,0,1,0,0,0,4,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,182,59,0,0,0,0,0,0,68,0,0,0,0,0,0,0,191,59,0,0,0,0,0,0,0,0,0,0,63,0,0,0,196,59,0,0,0,0,0,0,0,0,0,0,110,0,0,0,211,59,0,0,0,0,0,0,0,0,0,0,106,0,0,0,222,59,0,0,0,0,0,0,156,43,1,0,1,0,0,0,235,59,0,0,1,0,0,0,0,0,0,0,115,0,0,0,242,59,0,0,1,0,0,0,0,0,0,0,100,0,0,0,249,59,0,0,1,0,0,0,0,0,0,0,99,0,0,0,2,60,0,0,1,0,0,0,0,0,0,0,97,0,0,0,8,60,0,0,1,0,0,0,0,0,0,0,109,0,0,0,14,60,0,0,1,0,0,0,0,0,0,0,108,0,0,0,19,60,0,0,1,0,0,0,0,0,0,0,107,0,0,0,25,60,0,0,1,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,20,0,0,0,30,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,7,0,0,0,1,0,0,0,7,0,0,0,8,0,0,0,1,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,17,0,0,0,16,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,19,0,0,0,1,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,7,0,0,0,5,0,0,0,8,0,0,0,9,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,20,6,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,18,218,12,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,49,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,6,0,0,140,7,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,26,222,12,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,8,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,34,222,12,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,4,0,4,0,169,255,169,255,9,0,36,0,3,0,39,0,43,0,50,0,169,255,169,255,169,255,169,255,169,255,169,255,55,0,56,0,57,0,58,0,53,0,59,0,60,0,65,0,169,255,169,255,169,255,62,0,63,0,64,0,66,0,67,0,68,0,53,0,70,0,169,255,71,0,169,255,76,0,77,0,169,255,169,255,169,255,169,255,169,255,169,255,169,255,169,255,169,255,169,255,78,0,78,0,78,0,78,0,5,0,5,0,15,0,27,0,34,0,40,0,169,255,169,255,169,255,41,0,42,0,169,255,44,0,45,0,46,0,48,0,49,0,51,0,169,255,169,255,99,0,169,255,169,255,169,255,52,0,88,0,94,0,169,255,169,255,169,255,169,255,169,255,169,255,169,255,169,255,169,255,75,0,54,0,54,0,82,0,53,0,86,0,89,0,54,0,54,0,81,0,91,0,92,0,169,255,4,0,4,0,36,0,169,255,3,0,169,255,43,0,169,255,95,0,98,0,98,0,100,0,169,255,169,255,101,0,102,0,169,255,169,255,104,0,105,0,106,0,107,0,109,0,169,255,169,255,169,255,169,255,169,255,169,255,169,255,78,0,169,255,5,0,169,255,169,255,54,0,97,0,138,0,53,0,47,0,140,0,145,0,148,0,169,255,169,255,169,255,110,0,111,0,169,255,169,255,169,255,112,0,113,0,169,255,169,255,169,255,169,255,169,255,33,0,1,0,51,0,52,0,53,0,55,0,92,0,3,0,5,0,4,0,5,0,97,0,98,0,4,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,4,0,37,0,38,0,39,0,40,0,41,0,7,0,4,0,44,0,45,0,46,0,4,0,138,0,6,0,4,0,8,0,142,0,4,0,4,0,6,0,6,0,94,0,47,0,8,0,8,0,8,0,8,0,8,0,8,0,4,0,8,0,0,0,9,0,9,0,47,0,9,0,9,0,9,0,8,0,3,0,3,0,47,0,4,0,8,0,133,0,135,0,4,0,47,0,47,0,47,0,9,0,47,0,47,0,47,0,8,0,47,0,47,0,8,0,47,0,47,0,9,0,9,0,3,0,103,0,104,0,8,0,74,0,113,0,141,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,47,0,37,0,38,0,39,0,40,0,41,0,47,0,47,0,44,0,45,0,47,0,8,0,47,0,8,0,48,0,48,0,47,0,47,0,8,0,48,0,48,0,47,0,9,0,255,255,49,0,49,0,49,0,49,0,255,255,255,255,255,255,105,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,107,0,255,255,255,255,255,255,255,255,109,0,255,255,36,0,74,0,37,0,103,0,104,0,38,0,50,0,51,0,52,0,53,0,54,0,55,0,82,0,111,0,134,0,88,0,113,0,112,0,136,0,43,0,78,0,106,0,45,0,79,0,108,0,48,0,80,0,110,0,117,0,62,0,39,0,0,0,0,0,0,0,137,0,135,0,2,0,4,0,135,0,135,0,135,0,135,0,135,0,5,0,5,0,1,0,3,0,133,0,133,0,133,0,133,0,133,0,133,0,88,0,133,0,133,0,133,0,133,0,133,0,133,0,133,0,133,0,2,0,0,0,27,0,0,0,8,0,8,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,11,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,6,0,0,0,0,0,5,0,1,0,133,0,26,0,133,0,133,0,133,0,133,0,133,0,0,0,133,0,133,0,133,0,133,0,133,0,133,0,12,0,133,0,89,0,0,0,43,0,40,0,42,0,133,0,41,0,133,0,133,0,133,0,133,0,133,0,57,0,13,0,133,0,0,0,50,0,47,0,133,0,133,0,49,0,133,0,133,0,133,0,48,0,133,0,133,0,133,0,9,0,0,0,8,0,13,0,17,0,15,0,12,0,24,0,22,0,21,0,25,0,19,0,23,0,18,0,20,0,16,0,0,0,0,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,0,0,11,0,7,0,133,0,56,0,133,0,84,0,85,0,0,0,0,0,0,0,0,0,133,0,133,0,133,0,133,0,133,0,133,0,133,0,133,0,12,0,90,0,111,0,0,0,109,0,46,0,45,0,51,0,44,0,133,0,133,0,133,0,133,0,94,0,71,0,13,0,93,0,112,0,0,0,110,0,62,0,66,0,64,0,67,0,65,0,63,0,133,0,133,0,133,0,58,0,10,0,12,0,0,0,0,0,11,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,134,0,0,0,70,0,132,0,131,0,83,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,52,0,55,0,0,0,54,0,74,0,73,0,75,0,53,0,92,0,113,0,129,0,0,0,86,0,87,0,130,0,0,0,114,0,76,0,80,0,78,0,81,0,79,0,77,0,0,0,133,0,95,0,72,0,14,0,134,0,32,0,28,0,134,0,134,0,134,0,134,0,33,0,30,0,134,0,29,0,34,0,101,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,104,0,0,0,100,0,60,0,59,0,61,0,69,0,127,0,128,0,103,0,0,0,99,0,102,0,0,0,98,0,133,0,134,0,134,0,35,0,36,0,31,0,38,0,105,0,121,0,115,0,126,0,120,0,125,0,119,0,124,0,118,0,123,0,117,0,122,0,116,0,108,0,107,0,106,0,133,0,39,0,37,0,96,0,0,0,0,0,0,0,0,0,112,2,113,2,109,2,113,2,106,2,39,0,44,0,50,0,81,0,119,0,60,0,0,0,95,2,53,0,120,0,58,0,126,0,94,2,156,0,51,0,163,0,149,0,61,0,59,0,197,0,214,0,119,0,66,0,105,2,102,2,113,2,168,0,182,0,187,0,203,0,209,0,220,0,70,2,128,0,84,2,240,0,250,0,138,0,79,2,255,0,133,0,219,0,128,0,0,0,64,2,57,2,237,0,104,0,80,2,62,2,63,2,73,2,62,2,52,2,15,1,0,0,0,0,0,0,80,2,113,2,137,0,159,0,145,0,187,0,161,0,5,1,173,0,203,0,225,0,228,0,162,0,2,1,34,1,3,1,79,2,253,0,230,0,78,2,16,1,23,1,26,1,65,0,27,1,35,1,36,1,38,1,41,1,49,1,39,1,41,1,77,2,76,2,210,0,51,1,75,2,56,1,57,1,63,1,74,2,58,1,68,1,60,1,89,1,0,0,94,1,113,2,113,2,113,2,99,1,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,50,2,106,1,0,0,64,2,46,2,45,2,43,2,48,2,47,2,43,2,48,2,54,2,57,2,33,2,38,2,111,1,116,1,0,0,75,1,116,1,117,1,40,1,100,1,38,2,108,1,109,1,49,2,120,1,123,1,121,1,78,1,122,1,124,1,129,1,73,1,58,2,126,1,113,2,33,2,113,2,56,2,55,2,54,2,53,2,140,1,144,1,147,1,151,1,52,2,51,2,50,2,49,2,113,2,24,2,113,2,150,1,152,1,153,1,154,1,155,1,156,1,165,1,171,1,157,1,158,1,0,0,113,2,27,2,185,1,190,1,32,2,35,2,38,2,36,2,19,2,35,2,30,2,28,2,26,2,29,2,11,2,26,2,152,1,34,2,33,2,32,2,31,2,30,2,35,2,34,2,33,2,32,2,31,2,30,2,23,2,160,1,22,2,181,1,21,2,177,1,191,1,192,1,193,1,20,2,113,2,18,2,185,1,15,2,10,2,251,1,187,1,113,2,242,1,241,1,238,1,237,1,236,1,235,1,189,1,195,1,234,1,233,1,113,2,216,1,0,0,0,0,212,1,219,1,202,1,214,1,0,0,0,0,215,1,0,0,0,0,113,2,200,1,113,2,188,1,190,1,191,1,197,1,207,1,208,1,223,1,113,2,138,1,113,2,127,1,125,1,79,1,77,1,113,2,113,2,113,2,239,0,113,2,113,2,236,0,113,2,203,1,189,0,148,0,0,0,0,0,0,0,0,0,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,113,2,222,1,0,0,0,0,147,0,113,2,252,1,1,2,6,2,11,2,17,2,42,0,18,2,23,2,26,2,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,8,0,63,1,8,0,8,0,8,0,8,0,8,0,9,0,9,0,9,0,9,0,9,0,10,0,10,0,10,0,10,0,10,0,10,0,9,0,22,0,18,0,16,0,13,0,9,0,9,0,22,0,18,0,26,0,9,0,25,0,16,0,13,0,18,0,89,0,30,0,9,0,9,0,9,0,13,0,9,0,16,0,89,0,22,0,9,0,11,0,11,0,11,0,11,0,11,0,25,0,26,0,11,0,11,0,11,0,30,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,12,0,12,0,12,0,12,0,12,0,12,0,29,0,17,0,55,0,12,0,41,0,41,0,55,0,19,0,48,0,17,0,12,0,17,0,50,0,19,0,45,0,45,0,19,0,48,0,68,0,50,0,17,0,19,0,70,0,29,0,48,0,19,0,70,0,68,0,56,1,12,0,24,0,19,0,21,0,21,0,21,0,21,0,21,0,21,0,23,0,32,1,69,0,24,0,72,0,78,0,23,0,34,0,34,0,34,0,34,0,69,0,24,0,23,0,72,0,23,0,74,0,24,0,24,0,23,0,35,0,35,0,35,0,35,0,35,0,36,0,36,0,36,0,36,0,36,0,71,0,78,0,23,0,74,0,23,0,27,0,27,0,27,0,27,0,27,0,27,0,37,0,37,0,37,0,37,0,37,0,75,0,38,0,38,0,38,0,27,0,28,0,71,0,100,0,35,0,75,0,49,0,28,0,39,0,39,0,39,0,39,0,39,0,31,1,28,0,49,0,28,0,28,0,76,0,28,0,28,0,77,0,49,0,84,0,28,0,100,0,28,0,38,0,43,0,43,0,43,0,43,0,76,0,28,0,39,0,28,0,54,0,28,0,44,0,44,0,44,0,44,0,44,0,47,0,47,0,47,0,47,0,47,0,77,0,84,0,54,0,79,0,81,0,28,1,43,0,83,0,25,1,62,0,54,0,62,0,62,0,62,0,62,0,62,0,73,0,86,0,73,0,83,0,79,0,81,0,83,0,73,0,87,0,73,0,79,0,88,0,90,0,79,0,80,0,80,0,80,0,80,0,80,0,80,0,91,0,92,0,87,0,93,0,96,0,147,0,94,0,86,0,91,0,95,0,95,0,95,0,95,0,95,0,95,0,97,0,101,0,88,0,92,0,90,0,94,0,103,0,104,0,107,0,93,0,109,0,101,0,97,0,105,0,96,0,97,0,103,0,104,0,108,0,144,0,105,0,147,0,156,0,160,0,108,0,144,0,101,0,21,1,156,0,20,1,160,0,103,0,107,0,109,0,110,0,110,0,110,0,110,0,110,0,112,0,112,0,112,0,112,0,112,0,116,0,116,0,116,0,116,0,116,0,127,0,148,0,127,0,127,0,127,0,127,0,127,0,141,0,141,0,141,0,141,0,141,0,142,0,142,0,142,0,142,0,142,0,145,0,146,0,150,0,151,0,153,0,155,0,157,0,154,0,158,0,19,1,162,0,18,1,146,0,159,0,145,0,148,0,154,0,150,0,151,0,159,0,170,0,153,0,171,0,157,0,170,0,158,0,146,0,172,0,171,0,173,0,159,0,172,0,155,0,162,0,181,0,173,0,182,0,183,0,184,0,185,0,186,0,189,0,190,0,187,0,221,0,208,0,16,1,171,0,181,0,187,0,182,0,183,0,184,0,185,0,186,0,188,0,190,0,208,0,221,0,171,0,208,0,225,0,189,0,188,0,194,0,194,0,194,0,194,0,194,0,195,0,195,0,195,0,195,0,195,0,223,0,226,0,227,0,228,0,232,0,245,0,236,0,8,1,244,0,9,1,10,1,245,0,223,0,30,1,225,0,223,0,11,1,228,0,236,0,232,0,244,0,236,0,8,1,244,0,9,1,10,1,12,1,13,1,226,0,227,0,30,1,11,1,53,1,14,1,6,1,2,1,255,0,254,0,253,0,252,0,249,0,12,1,13,1,247,0,246,0,243,0,242,0,241,0,240,0,53,1,58,1,239,0,238,0,58,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,235,0,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,64,1,234,0,64,1,64,1,64,1,65,1,233,0,65,1,66,1,231,0,66,1,229,0,224,0,222,0,220,0,219,0,218,0,217,0,216,0,215,0,214,0,213,0,212,0,211,0,210,0,209,0,207,0,206,0,205,0,204,0,203,0,202,0,201,0,200,0,199,0,198,0,197,0,196,0,193,0,179,0,177,0,176,0,175,0,174,0,169,0,168,0,167,0,166,0,164,0,161,0,152,0,149,0,140,0,139,0,138,0,137,0,136,0,135,0,134,0,133,0,132,0,131,0,130,0,129,0,126,0,106,0,102,0,99,0,98,0,85,0,82,0,66,0,61,0,60,0,59,0,58,0,57,0,56,0,53,0,52,0,46,0,42,0,40,0,32,0,31,0,20,0,15,0,7,0,5,0,3,0,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,0,0,57,1,1,0,57,1,57,1,57,1,57,1,58,1,57,1,57,1,57,1,57,1,57,1,59,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,58,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,62,1,59,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,12,0,57,1,65,1,49,0,60,1,61,1,57,1,61,1,61,1,61,1,61,1,61,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,66,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,57,1,57,1,65,1,61,1,61,1,61,1,61,1,61,1,57,1,57,1,57,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,57,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,57,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,66,1,57,1,57,1,57,1,57,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,57,1,61,1,61,1,61,1,61,1,61,1,57,1,57,1,57,1,57,1,57,1,57,1,61,1,61,1,61,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,61,1,57,1,61,1,61,1,61,1,57,1,57,1,61,1,61,1,61,1,61,1,61,1,61,1,57,1,61,1,61,1,61,1,57,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,61,1,57,1,57,1,57,1,61,1,61,1,61,1,61,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,61,1,64,1,64,1,64,1,64,1,64,1,64,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,61,1,64,1,64,1,61,1,0,0,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,0,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,13,0,13,0,13,0,4,0,14,0,15,0,15,0,15,0,4,0,16,0,17,0,18,0,19,0,20,0,21,0,20,0,20,0,20,0,22,0,20,0,23,0,24,0,25,0,26,0,20,0,20,0,27,0,28,0,29,0,20,0,20,0,20,0,30,0,20,0,20,0,34,0,50,0,35,0,36,0,36,0,36,0,36,0,37,0,37,0,37,0,37,0,37,0,47,0,48,0,49,0,49,0,49,0,49,0,38,0,67,0,73,0,67,0,47,0,39,0,40,0,81,0,67,0,67,0,41,0,67,0,68,0,62,0,74,0,67,0,67,0,42,0,43,0,44,0,62,0,45,0,69,0,170,0,82,0,46,0,50,0,50,0,50,0,50,0,50,0,93,0,94,0,51,0,51,0,51,0,109,0,52,0,53,0,51,0,54,0,51,0,55,0,51,0,56,0,57,0,51,0,51,0,51,0,51,0,51,0,51,0,51,0,51,0,51,0,58,0,59,0,51,0,51,0,60,0,51,0,51,0,51,0,47,0,61,0,61,0,61,0,61,0,61,0,67,0,67,0,134,0,62,0,119,0,119,0,135,0,67,0,47,0,70,0,62,0,71,0,127,0,75,0,125,0,125,0,76,0,62,0,67,0,127,0,72,0,77,0,146,0,108,0,62,0,78,0,67,0,144,0,67,0,63,0,67,0,79,0,80,0,80,0,80,0,80,0,80,0,67,0,83,0,55,1,67,0,89,0,67,0,67,0,67,0,36,0,36,0,36,0,36,0,145,0,90,0,84,0,148,0,85,0,67,0,91,0,92,0,86,0,110,0,110,0,110,0,110,0,110,0,112,0,112,0,112,0,112,0,112,0,67,0,157,0,87,0,153,0,88,0,95,0,95,0,95,0,95,0,95,0,67,0,113,0,113,0,113,0,113,0,113,0,67,0,114,0,114,0,114,0,96,0,97,0,147,0,67,0,111,0,154,0,47,0,67,0,116,0,116,0,116,0,116,0,116,0,54,1,98,0,62,0,99,0,100,0,67,0,101,0,102,0,67,0,62,0,67,0,103,0,181,0,104,0,115,0,121,0,121,0,121,0,121,0,155,0,105,0,117,0,106,0,131,0,107,0,123,0,123,0,123,0,123,0,124,0,50,0,50,0,50,0,50,0,50,0,156,0,166,0,132,0,67,0,67,0,52,1,122,0,163,0,51,1,141,0,133,0,142,0,142,0,142,0,142,0,142,0,149,0,67,0,150,0,164,0,158,0,162,0,165,0,151,0,67,0,152,0,159,0,67,0,67,0,160,0,161,0,161,0,161,0,161,0,161,0,67,0,67,0,67,0,168,0,67,0,67,0,67,0,67,0,167,0,172,0,176,0,176,0,176,0,176,0,176,0,67,0,178,0,67,0,169,0,173,0,171,0,175,0,67,0,67,0,67,0,174,0,67,0,182,0,179,0,67,0,177,0,180,0,184,0,186,0,67,0,208,0,187,0,212,0,223,0,67,0,189,0,67,0,183,0,67,0,67,0,67,0,228,0,185,0,188,0,190,0,110,0,110,0,110,0,110,0,110,0,112,0,112,0,112,0,112,0,112,0,192,0,192,0,192,0,192,0,192,0,194,0,67,0,195,0,195,0,195,0,195,0,195,0,142,0,142,0,142,0,142,0,142,0,142,0,142,0,142,0,142,0,142,0,67,0,67,0,215,0,217,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,210,0,67,0,209,0,213,0,221,0,216,0,218,0,226,0,231,0,220,0,232,0,224,0,67,0,225,0,211,0,235,0,67,0,236,0,227,0,67,0,222,0,229,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,244,0,67,0,5,1,50,1,233,0,238,0,67,0,239,0,240,0,241,0,242,0,243,0,67,0,247,0,6,1,14,1,234,0,7,1,67,0,246,0,245,0,195,0,195,0,195,0,195,0,195,0,195,0,195,0,195,0,195,0,195,0,15,1,67,0,67,0,67,0,22,1,67,0,24,1,38,1,27,1,40,1,42,1,30,1,16,1,67,0,18,1,17,1,44,1,21,1,25,1,23,1,28,1,26,1,39,1,29,1,41,1,43,1,46,1,48,1,19,1,20,1,53,1,45,1,67,0,67,0,37,1,36,1,35,1,34,1,33,1,32,1,31,1,47,1,49,1,67,0,67,0,67,0,67,0,67,0,67,0,56,1,32,0,67,0,67,0,32,0,32,0,32,0,32,0,64,0,64,0,65,0,65,0,67,0,65,0,65,0,65,0,65,0,65,0,65,0,66,0,66,0,66,0,66,0,66,0,48,0,48,0,128,0,67,0,128,0,128,0,128,0,143,0,67,0,143,0,191,0,67,0,191,0,67,0,67,0,67,0,67,0,13,1,12,1,11,1,10,1,9,1,8,1,67,0,67,0,67,0,67,0,67,0,4,1,3,1,2,1,1,1,0,1,255,0,254,0,253,0,252,0,251,0,250,0,249,0,248,0,237,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,230,0,67,0,219,0,214,0,207,0,206,0,205,0,204,0,203,0,202,0,201,0,200,0,199,0,198,0,197,0,196,0,193,0,67,0,67,0,67,0,67,0,67,0,67,0,67,0,57,1,140,0,139,0,138,0,137,0,136,0,130,0,129,0,126,0,120,0,118,0,33,0,31,0,67,0,67,0,33,0,31,0,57,1,3,0,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,10,42,42,42,32,67,79,78,70,73,71,85,82,65,67,73,195,147,78,32,42,42,42,10,10,0,83,97,108,105,100,97,32,104,116,109,108,10,0,83,97,108,105,100,97,32,104,116,109,108,58,32,82,101,115,117,108,116,97,100,111,115,32,102,105,110,97,108,101,115,10,0,83,97,108,105,100,97,32,116,101,120,116,111,58,32,84,105,101,109,112,111,32,101,106,101,99,117,99,105,111,110,10,0,83,97,108,105,100,97,32,116,101,120,116,111,58,32,82,101,115,117,108,116,97,100,111,115,32,102,105,110,97,108,101,115,10,0,82,105,101,115,103,111,115,32,100,101,32,100,97,116,111,115,58,32,78,105,110,103,117,110,111,10,0,82,105,101,115,103,111,115,32,100,101,32,100,97,116,111,115,58,32,67,105,99,108,111,115,32,100,101,32,112,97,114,97,100,97,10,0,82,105,101,115,103,111,115,32,100,101,32,100,97,116,111,115,58,32,67,111,114,116,111,99,105,114,99,117,105,116,111,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,83,97,108,116,111,32,114,101,116,97,114,100,97,100,111,32,40,68,83,61,51,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,83,97,108,116,111,32,114,101,116,97,114,100,97,100,111,32,40,68,83,61,50,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,83,97,108,116,111,32,114,101,116,97,114,100,97,100,111,32,40,68,83,61,49,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,80,114,101,100,105,99,116,45,110,111,116,45,116,97,107,101,110,32,40,76,97,116,61,51,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,80,114,101,100,105,99,116,45,110,111,116,45,116,97,107,101,110,32,40,76,97,116,61,50,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,80,114,101,100,105,99,116,45,110,111,116,45,116,97,107,101,110,32,40,76,97,116,61,49,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,67,105,99,108,111,115,32,100,101,32,112,97,114,97,100,97,32,40,76,97,116,61,51,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,67,105,99,108,111,115,32,100,101,32,112,97,114,97,100,97,32,40,76,97,116,61,50,41,10,0,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,58,32,67,105,99,108,111,115,32,100,101,32,112,97,114,97,100,97,32,40,76,97,116,61,49,41,10,0,78,117,109,32,82,101,103,105,115,116,114,111,115,61,32,37,100,10,0,77,101,109,111,114,105,97,32,73,110,115,116,114,117,99,99,105,111,110,101,115,32,40,75,66,41,61,32,37,100,10,0,77,101,109,111,114,105,97,32,68,97,116,111,115,32,40,75,66,41,61,32,37,100,10,0,76,97,116,101,110,99,105,97,32,111,112,101,114,97,100,111,114,101,115,10,0,9,70,95,76,83,61,32,37,100,10,0,9,70,95,65,68,68,61,32,37,100,10,0,9,70,95,67,77,80,61,32,37,100,10,0,9,70,95,77,85,76,61,32,37,100,10,0,10,10,0,42,42,42,32,69,83,84,65,68,195,141,83,84,73,67,65,83,32,42,42,42,10,10,0,67,105,99,108,111,115,61,32,37,108,100,10,0,73,110,115,116,114,117,99,99,105,111,110,101,115,61,32,37,108,100,10,0,73,110,115,46,32,69,110,116,101,114,97,115,61,32,37,108,100,10,0,73,110,115,46,32,77,117,108,116,105,99,105,99,108,111,61,32,37,108,100,10,0,67,80,73,61,32,37,49,46,50,102,10,0,79,112,46,32,67,70,61,32,37,108,100,10,0,79,112,46,32,67,70,47,67,105,99,108,111,61,37,49,46,50,102,10,0,42,42,42,32,82,69,71,73,83,84,82,79,83,32,42,42,42,10,10,0,82,101,103,115,91,37,50,100,93,58,32,37,53,108,108,100,32,32,0,82,102,112,91,37,50,100,93,58,32,37,54,46,49,108,102,32,32,0,70,80,83,82,58,32,37,54,108,108,100,32,32,0,42,42,42,32,77,69,77,79,82,73,65,32,68,65,84,79,83,32,42,42,42,10,10,0,37,57,115,58,32,0,124,42,37,54,115,124,0,124,37,55,115,124,0,124,42,37,49,50,115,124,0,124,37,49,51,115,124,0,124,42,37,50,52,115,124,0,124,37,50,53,115,124,0,120,120,120,10,0,47,115,114,99,47,109,105,112,115,45,109,117,108,116,105,99,105,99,108,111,45,51,47,109,105,112,115,95,102,112,46,99,0,111,112,101,114,97,99,105,111,110,95,65,76,85,95,70,80,0,79,112,101,114,97,99,105,111,110,32,70,80,32,37,100,32,110,111,32,105,109,112,108,101,109,101,110,116,97,100,97,10,10,0,99,111,109,112,97,114,97,99,105,111,110,95,65,76,85,95,70,80,0,67,111,109,112,97,114,97,99,105,195,179,110,32,70,80,32,37,100,32,110,111,32,105,109,112,108,101,109,101,110,116,97,100,97,10,0,99,111,114,116,111,32,77,69,77,97,76,83,49,95,115,0,76,83,0,99,111,114,116,111,32,87,66,97,76,83,49,95,115,0,99,111,114,116,111,32,70,80,95,87,66,97,76,83,49,95,105,0,70,80,32,76,83,0,70,80,32,87,66,0,99,111,114,116,111,32,70,80,95,87,66,97,65,49,95,105,0,70,80,32,65,68,68,0,99,111,114,116,111,32,70,80,95,87,66,97,65,49,95,115,0,99,111,114,116,111,32,70,80,95,87,66,97,67,49,95,115,0,70,80,32,67,77,80,0,99,111,114,116,111,32,70,80,95,87,66,97,67,49,95,105,0,99,111,114,116,111,32,70,80,95,87,66,97,77,49,95,115,0,70,80,32,77,85,76,0,99,111,114,116,111,32,70,80,95,87,66,97,77,49,95,105,0,109,117,120,95,70,80,95,87,66,0,68,111,115,32,111,32,109,195,161,115,32,105,110,115,116,114,117,99,99,105,111,110,101,115,32,70,80,32,101,110,32,87,66,10,0,82,65,87,44,32,73,68,115,116,97,108,108,44,32,73,70,115,116,97,108,108,0,87,65,87,44,32,73,68,115,116,97,108,108,44,32,73,70,115,116,97,108,108,0,69,115,116,114,117,99,116,117,114,97,108,95,87,66,32,73,68,115,116,97,108,108,44,32,73,70,115,116,97,108,108,0,100,97,114,107,114,101,100,0,100,97,114,107,99,121,97,110,0,108,105,109,101,103,114,101,101,110,0,111,114,97,110,103,101,0,100,101,101,112,112,105,110,107,0,114,111,121,97,108,98,108,117,101,0,98,114,111,119,110,0,115,101,97,103,114,101,101,110,0,108,105,103,104,116,99,111,114,97,108,0,109,97,103,101,110,116,97,0,115,116,101,101,108,98,108,117,101,0,115,97,108,109,111,110,0,109,101,100,105,117,109,115,101,97,103,114,101,101,110,0,100,97,114,107,111,114,97,110,103,101,0,111,114,99,104,105,100,0,45,110,111,112,45,0,116,114,97,112,32,37,100,0,37,115,32,114,37,100,44,37,115,40,114,37,100,41,0,108,98,0,108,98,117,0,115,98,0,108,104,0,108,104,117,0,115,104,0,108,119,0,108,119,117,0,115,119,0,108,100,0,115,100,0,37,115,32,114,37,100,44,114,37,100,44,114,37,100,0,100,97,100,100,0,100,115,117,98,0,100,109,117,108,0,100,100,105,118,0,108,117,105,32,114,37,100,44,32,35,37,100,0,97,110,100,0,111,114,0,120,111,114,0,100,115,114,97,118,0,100,115,114,108,118,0,100,115,108,108,118,0,115,101,113,0,115,110,101,0,115,103,116,0,115,103,101,0,115,108,116,0,115,108,101,0,37,115,32,114,37,100,44,114,37,100,44,35,37,100,0,100,115,114,97,0,100,115,114,108,0,100,115,108,108,0,37,115,32,114,37,100,44,37,115,0,98,110,101,122,0,98,101,113,122,0,37,115,32,114,37,100,44,114,37,100,44,37,115,0,98,110,101,0,98,101,113,0,37,115,32,37,115,0,98,99,49,116,0,98,99,49,102,0,109,111,118,122,0,109,111,118,110,0,106,0,106,97,108,0,106,114,32,114,37,100,0,106,97,108,114,32,82,37,100,44,37,115,0,37,115,32,102,37,100,44,102,37,100,44,102,37,100,0,97,100,100,46,100,0,115,117,98,46,100,0,109,117,108,46,100,0,100,105,118,46,100,0,97,100,100,46,115,0,115,117,98,46,115,0,109,117,108,46,115,0,100,105,118,46,115,0,97,100,100,46,112,115,0,115,117,98,46,112,115,0,109,117,108,46,112,115,0,100,105,118,46,112,115,0,37,115,32,102,37,100,44,37,115,40,114,37,100,41,0,108,46,100,0,115,46,100,0,108,46,115,0,115,46,115,0,108,46,112,115,0,115,46,112,115,0,37,115,32,102,112,115,114,44,102,37,100,44,102,37,100,0,99,46,101,113,46,100,0,99,46,110,101,46,100,0,99,46,108,101,46,100,0,99,46,103,116,46,100,0,99,46,103,101,46,100,0,99,46,101,113,46,115,0,99,46,110,101,46,115,0,99,46,101,113,46,115,32,0,99,46,108,101,46,115,0,99,46,103,116,46,115,0,99,46,103,101,46,115,0,109,111,118,46,100,32,102,37,100,44,102,37,100,0,109,111,118,46,115,32,102,37,100,44,102,37,100,0,73,110,115,116,32,100,101,115,99,111,110,111,99,105,100,97,32,114,37,100,44,114,37,100,44,114,37,100,44,35,37,100,0,60,102,111,110,116,32,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,102,111,110,116,62,0,10,69,120,99,101,112,99,105,195,179,110,58,32,97,99,99,101,115,111,32,102,117,101,114,97,32,100,101,108,32,115,101,103,109,101,110,116,111,32,100,101,32,105,110,115,116,114,117,99,99,105,111,110,101,115,32,80,67,61,37,108,108,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([10,0,83,97,108,116,111,32,69,102,101,99,116,105,118,111,0,73,70,110,111,112,44,32,73,68,110,111,112,44,32,69,88,110,111,112,0,73,70,110,111,112,44,32,73,68,110,111,112,0,47,115,114,99,47,109,105,112,115,45,109,117,108,116,105,99,105,99,108,111,45,51,47,109,105,112,115,46,99,0,102,97,115,101,95,100,101,99,111,100,105,102,105,99,97,99,105,111,110,0,73,110,115,116,114,117,99,99,105,195,179,110,32,37,100,32,110,111,32,105,109,112,108,101,109,101,110,116,97,100,97,10,0,10,67,105,99,108,111,32,37,108,117,58,32,69,108,32,112,114,111,103,114,97,109,97,32,101,115,116,195,161,32,116,101,114,109,105,110,97,110,100,111,32,110,111,114,109,97,108,109,101,110,116,101,10,0,102,97,115,101,95,101,115,99,114,105,116,117,114,97,95,70,80,0,76,97,32,105,110,115,116,114,117,99,99,105,195,179,110,32,37,100,32,110,111,32,100,101,98,101,114,195,173,97,32,101,115,116,97,114,32,101,110,32,70,80,32,87,66,10,0,102,97,115,101,95,101,115,99,114,105,116,117,114,97,95,70,80,83,82,0,76,97,32,105,110,115,116,114,117,99,99,105,195,179,110,32,37,100,32,110,111,32,100,101,98,101,114,195,173,97,32,101,115,116,97,114,32,101,110,32,70,80,83,82,32,87,66,10,0,10,69,120,99,101,112,99,105,111,110,58,32,65,99,99,101,115,111,32,100,101,115,97,108,105,110,101,97,100,111,32,40,72,65,76,70,41,32,101,110,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,44,32,68,105,114,61,37,108,108,100,10,0,10,69,120,99,101,112,99,105,111,110,58,32,65,99,99,101,115,111,32,100,101,115,97,108,105,110,101,97,100,111,32,40,87,79,82,68,41,32,101,110,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,44,32,68,105,114,61,37,108,108,100,10,0,10,69,120,99,101,112,99,105,111,110,58,32,65,99,99,101,115,111,32,100,101,115,97,108,105,110,101,97,100,111,32,40,68,87,79,82,68,41,32,101,110,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,44,32,68,105,114,61,37,108,108,100,10,0,10,69,120,99,101,112,99,105,111,110,58,32,65,99,99,101,115,111,32,100,101,115,97,108,105,110,101,97,100,111,32,40,70,76,79,65,84,41,32,101,110,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,44,32,68,105,114,61,37,108,108,100,10,0,10,69,120,99,101,112,99,105,111,110,58,32,65,99,99,101,115,111,32,100,101,115,97,108,105,110,101,97,100,111,32,40,68,79,85,66,76,69,41,32,101,110,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,44,32,68,105,114,61,37,108,108,100,10,0,10,69,120,99,101,112,99,105,111,110,58,32,65,99,99,101,115,111,32,102,117,101,114,97,32,100,101,108,32,115,101,103,109,101,110,116,111,32,100,101,32,100,97,116,111,115,32,68,105,114,61,37,108,108,100,10,0,47,115,114,99,47,109,105,112,115,45,109,117,108,116,105,99,105,99,108,111,45,51,47,109,101,109,111,114,105,97,46,99,0,101,115,99,114,105,98,101,95,109,101,109,95,100,97,116,111,115,0,69,115,99,114,105,116,117,114,97,32,101,110,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,32,115,105,110,32,105,110,100,105,99,97,114,32,116,105,112,111,32,100,101,32,100,97,116,111,115,46,32,68,105,114,61,37,37,108,108,100,0,69,82,82,79,82,58,32,76,101,99,116,117,114,97,32,100,101,115,97,108,105,110,101,97,100,97,32,101,110,32,109,101,109,111,114,105,97,32,100,101,32,105,110,115,116,114,117,99,99,105,111,110,101,115,32,40,37,108,108,100,41,10,0,69,82,82,79,82,58,32,69,115,99,114,105,116,117,114,97,32,100,101,115,97,108,105,110,101,97,100,97,32,101,110,32,109,101,109,111,114,105,97,32,100,101,32,105,110,115,116,114,117,99,99,105,111,110,101,115,32,40,37,108,108,100,41,10,0,60,33,45,45,32,68,97,116,97,112,97,116,104,32,101,110,32,83,86,71,32,45,45,62,10,0,60,115,118,103,32,115,116,121,108,101,61,39,109,97,120,45,119,105,100,116,104,58,32,56,50,48,112,120,39,32,119,105,100,116,104,61,34,49,48,48,37,37,34,32,118,105,101,119,98,111,120,61,34,48,32,48,32,49,49,48,48,32,54,48,48,34,32,120,109,108,110,115,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,50,48,48,48,47,115,118,103,34,32,118,101,114,115,105,111,110,61,34,49,46,49,34,32,115,104,97,112,101,45,114,101,110,100,101,114,105,110,103,61,34,103,101,111,109,101,116,114,105,99,80,114,101,99,105,115,105,111,110,34,32,62,10,0,60,115,121,109,98,111,108,32,105,100,61,34,100,97,116,97,112,97,116,104,34,62,10,0,77,101,109,32,73,110,115,116,114,0,73,110,115,116,0,43,0,52,0,98,108,97,99,107,0,73,70,95,73,68,0,110,112,99,0,73,82,0,73,68,95,69,88,0,65,0,66,0,73,109,109,0,99,109,112,0,65,76,85,0,69,88,95,77,0,65,76,85,111,117,116,0,99,111,110,100,0,77,101,109,10,68,97,116,111,115,0,87,0,68,97,116,111,0,77,69,77,95,87,66,0,76,77,68,0,60,47,115,121,109,98,111,108,62,32,10,0,60,117,115,101,32,120,108,105,110,107,58,104,114,101,102,61,34,35,100,97,116,97,112,97,116,104,34,10,0,60,47,115,118,103,62,10,10,0,60,103,62,32,32,60,112,97,116,104,32,100,61,34,77,37,100,44,37,100,10,32,32,32,32,32,65,37,100,44,37,100,32,48,32,48,44,49,32,37,100,44,37,100,10,32,32,32,32,32,76,37,100,44,37,100,10,32,32,32,32,32,65,37,100,44,37,100,32,48,32,48,44,49,32,37,100,44,37,100,10,32,32,32,32,32,76,37,100,44,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,0,108,105,103,104,116,103,114,97,121,0,37,115,32,32,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,60,47,103,62,10,0,110,111,110,101,0,60,33,45,45,32,77,85,88,52,32,45,45,62,10,0,60,33,45,45,32,99,111,110,101,99,116,97,95,112,49,95,100,120,49,95,121,95,100,120,50,95,112,50,32,45,45,62,10,0,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,10,0,60,33,45,45,32,77,85,88,50,32,45,45,62,10,0,60,103,62,10,32,32,60,101,108,108,105,112,115,101,32,99,120,61,34,37,100,34,32,99,121,61,34,37,100,34,32,114,120,61,34,37,100,34,32,114,121,61,34,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,0,37,115,32,32,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,10,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,49,52,59,116,101,120,116,45,97,110,99,104,111,114,58,109,105,100,100,108,101,34,62,10,32,32,32,32,37,115,10,60,47,116,101,120,116,62,10,0,69,120,116,32,83,105,103,110,111,0,37,115,32,32,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,10,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,49,52,59,116,101,120,116,45,97,110,99,104,111,114,58,115,116,97,114,116,34,62,10,32,32,32,32,37,115,10,60,47,116,101,120,116,62,10,0,37,115,32,32,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,10,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,49,52,59,116,101,120,116,45,97,110,99,104,111,114,58,101,110,100,34,62,10,32,32,32,32,37,115,10,60,47,116,101,120,116,62,10,60,47,103,62,10,0,60,103,62,10,32,32,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,0,82,101,103,115,0,37,115,32,32,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,10,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,49,52,59,116,101,120,116,45,97,110,99,104,111,114,58,115,116,97,114,116,34,62,10,32,32,32,32,82,37,100,10,60,47,116,101,120,116,62,10,0,37,115,32,32,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,10,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,49,52,59,116,101,120,116,45,97,110,99,104,111,114,58,115,116,97,114,116,34,62,10,32,32,32,32,37,100,10,60,47,116,101,120,116,62,10,0,37,115,32,32,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,10,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,49,52,59,116,101,120,116,45,97,110,99,104,111,114,58,101,110,100,34,62,10,32,32,32,32,37,115,10,60,47,116,101,120,116,62,10,0,60,33,45,45,32,82,69,71,115,32,45,45,62,10,0,60,103,62,32,32,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,0,103,114,97,121,0,114,101,100,0,37,115,32,32,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,32,10,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,49,52,59,116,101,120,116,45,97,110,99,104,111,114,58,109,105,100,100,108,101,34,62,10,32,32,32,32,37,115,10,60,47,116,101,120,116,62,10,60,47,103,62,10,0,60,33,45,45,32,76,65,84,67,72,54,32,45,45,62,10,0,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,10,0,60,33,45,45,32,77,85,88,51,32,45,45,62,10,0,60,103,62,10,32,32,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,34,32,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,0,60,33,45,45,32,65,76,85,32,45,45,62,10,0,60,33,45,45,32,99,111,110,101,99,116,97,32,45,45,62,10,0,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,10,0,60,103,62,10,32,32,60,112,111,108,121,108,105,110,101,32,112,111,105,110,116,115,61,34,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,37,100,44,37,100,32,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,115,116,114,111,107,101,45,119,105,100,116,104,58,37,102,34,47,62,10,0,68,105,114,0,60,33,45,45,32,77,69,77,32,45,45,62,10,0,80,67,0,60,33,45,45,32,76,65,84,67,72,32,45,45,62,10,0,60,33,45,45,32,84,101,120,116,111,32,45,45,62,10,0,60,116,101,120,116,32,120,61,34,37,100,34,32,121,61,34,37,100,34,10,32,32,32,32,32,115,116,121,108,101,61,34,102,105,108,108,58,37,115,59,115,116,114,111,107,101,58,37,115,59,102,111,110,116,45,102,97,109,105,108,121,58,65,114,105,97,108,59,102,111,110,116,45,115,105,122,101,58,37,100,112,120,59,34,62,10,32,32,32,32,32,37,115,10,60,47,116,101,120,116,62,10,10,0,110,117,108,108,0,82,101,100,101,102,105,110,105,99,105,195,179,110,32,100,101,32,117,110,97,32,101,116,105,113,117,101,116,97,0,69,116,105,113,117,101,116,97,32,100,101,32,116,105,112,111,32,105,110,99,111,109,112,97,116,105,98,108,101,0,84,97,98,108,97,32,100,101,32,101,116,105,113,117,101,116,97,115,32,108,108,101,110,97,46,32,67,97,109,98,105,101,32,77,65,88,95,69,84,73,81,85,69,84,65,83,32,101,110,32,101,116,105,113,117,101,116,97,115,46,104,0,70,97,108,116,97,32,109,101,109,111,114,105,97,0,76,97,32,114,101,102,101,114,101,110,99,105,97,32,37,115,32,101,115,116,195,161,32,115,105,110,32,114,101,115,111,108,118,101,114,0,37,37,115,32,43,32,37,37,48,37,100,108,108,100,0,109,105,112,115,0,32,9,0,102,105,99,104,101,114,111,46,115,0,83,105,109,117,108,97,100,111,114,32,100,101,108,32,112,114,111,99,101,115,97,100,111,114,32,77,73,80,83,32,109,117,108,116,105,99,105,99,108,111,32,40,118,37,51,46,49,102,41,10,10,0,63,97,58,99,58,100,58,102,58,107,58,108,58,109,58,115,58,110,106,0,10,37,115,32,91,45,115,32,114,101,115,117,108,116,97,100,111,93,32,91,45,100,32,114,46,100,97,116,111,115,93,32,91,45,99,32,114,46,99,111,110,116,114,111,108,93,32,91,45,108,32,120,93,32,91,45,97,32,120,93,32,91,45,107,32,120,93,32,91,45,109,32,120,93,32,91,45,104,93,32,91,45,110,93,32,45,102,32,102,105,99,104,101,114,111,46,115,10,9,114,101,115,117,108,116,97,100,111,32,32,32,32,116,105,101,109,112,111,32,102,105,110,97,108,32,104,116,109,108,40,42,41,32,104,116,109,108,45,102,105,110,97,108,10,9,114,46,100,97,116,111,115,32,32,32,32,32,32,110,58,110,105,110,103,117,110,111,44,32,112,58,112,97,114,97,100,97,44,32,99,58,99,111,114,116,111,99,105,114,99,117,105,116,111,40,42,41,10,9,114,46,99,111,110,116,114,111,108,32,32,32,32,112,58,112,97,114,97,100,97,44,32,116,58,112,45,110,45,116,97,107,101,110,40,42,41,44,32,51,58,100,115,61,51,44,32,50,58,100,115,61,50,44,32,49,58,100,115,61,49,10,9,114,46,99,111,110,116,114,111,108,32,32,32,32,115,51,58,115,116,97,108,108,115,40,51,41,40,42,41,44,32,115,50,58,115,116,97,108,108,115,40,50,41,44,32,115,49,58,115,116,97,108,108,115,40,49,41,10,9,32,32,32,32,32,32,32,32,32,32,32,32,32,112,110,116,51,58,112,45,110,45,116,97,107,101,110,40,51,41,44,32,112,110,116,50,58,112,45,110,45,116,97,107,101,110,40,51,41,44,32,112,110,116,49,58,112,45,110,45,116,97,107,101,110,40,49,41,10,9,32,32,32,32,32,32,32,32,32,32,32,32,32,100,115,51,58,115,46,114,101,116,97,114,100,97,100,111,40,100,115,61,51,41,44,32,100,115,50,58,115,46,114,101,116,97,114,100,97,100,111,40,100,115,61,50,41,44,32,100,115,49,58,115,46,114,101,116,97,114,100,97,100,111,40,100,115,61,49,41,10,9,120,32,32,32,32,32,32,32,32,32,32,32,32,108,97,116,101,110,99,105,97,32,111,112,101,114,97,100,111,114,101,115,32,108,58,76,83,40,50,41,44,97,58,65,68,68,40,52,41,44,107,58,67,77,80,40,52,41,44,109,58,77,85,76,40,55,41,10,9,102,105,99,104,101,114,111,32,32,32,32,32,32,110,111,109,98,114,101,32,100,101,108,32,102,105,99,104,101,114,111,32,101,110,32,101,110,115,97,109,98,108,97,100,111,114,10,9,45,106,32,32,32,32,32,32,32,32,32,32,32,103,101,110,101,114,97,114,32,117,110,32,115,195,179,108,111,32,97,114,99,104,105,118,111,32,104,116,109,32,99,111,110,32,106,97,118,97,115,99,114,105,112,116,10,9,45,110,32,32,32,32,32,32,32,32,32,32,32,110,111,32,98,111,114,114,97,114,32,97,114,99,104,105,118,111,115,32,104,116,109,108,10,0,111,112,116,105,111,110,32,37,115,0,32,119,105,116,104,32,97,114,103,32,37,115,0,112,0,115,51,0,115,50,0,115,49,0,116,0,112,110,116,51,0,112,110,116,50,0,112,110,116,49,0,100,115,51,0,100,115,50,0,100,115,49,0,69,114,114,111,114,32,101,110,32,97,114,103,117,109,101,110,116,111,32,37,115,32,37,115,10,0,45,99,0,10,69,114,114,111,114,32,101,110,32,97,114,103,117,109,101,110,116,111,32,37,115,32,37,115,10,0,45,100,0,10,69,114,114,111,114,32,97,98,114,105,101,110,100,111,32,102,105,99,104,101,114,111,32,37,115,10,0,10,69,114,114,111,114,46,32,76,97,32,108,97,116,101,110,99,105,97,32,109,195,161,120,105,109,97,32,100,101,108,32,111,112,101,114,97,100,111,114,32,101,115,32,37,100,10,0,45,97,0,45,107,0,45,108,0,45,109,0,116,105,101,109,112,111,0,102,105,110,97,108,0,104,116,109,108,0,104,116,109,108,45,102,105,110,97,108,0,45,115,0,10,69,114,114,111,114,32,101,110,32,97,114,103,117,109,101,110,116,111,32,37,115,10,0,47,116,109,112,47,95,117,114,108,46,116,120,116,0,105,110,100,101,120,46,104,116,109,0,37,53,108,117,75,0,10,65,84,69,78,67,73,79,78,58,32,78,117,109,101,114,111,32,100,101,32,99,105,99,108,111,115,32,40,37,100,41,32,101,120,99,101,115,105,118,111,10,32,69,106,101,99,117,99,105,195,179,110,32,100,101,116,101,110,105,100,97,10,10,0,10,65,84,69,78,67,73,79,78,58,32,78,117,109,101,114,111,32,100,101,32,99,105,99,108,111,115,32,40,37,100,41,32,101,120,99,101,115,105,118,111,10,32,78,111,32,115,101,32,103,101,110,101,114,97,110,32,109,97,115,32,97,114,99,104,105,118,111,115,32,104,116,109,108,10,10,0,110,111,45,119,51,99,115,115,0,104,101,108,112,0,110,111,45,98,111,114,114,97,114,45,104,116,109,108,0,106,97,118,97,115,99,114,105,112,116,0,115,109,97,108,108,45,115,99,114,101,101,110,0,115,97,108,105,100,97,0,114,100,97,116,111,115,0,114,99,111,110,116,114,111,108,0,70,80,97,100,100,0,70,80,109,117,108,0,70,80,108,115,0,70,80,99,109,112,0,112,114,111,103,114,97,109,97,0,73,70,0,105,102,0,105,100,0,77,69,0,76,49,0,76,37,100,0,65,49,0,65,37,100,0,67,49,0,67,37,100,0,77,49,0,77,37,100,0,101,115,116,97,100,111,37,48,51,108,100,46,104,116,109,108,0,119,0,69,114,114,111,114,32,99,114,101,97,110,100,111,32,37,115,10,0,69,115,116,97,100,111,0,101,115,116,97,100,111,0,60,98,114,62,60,98,114,62,10,0,60,98,114,62,10,0,60,47,98,111,100,121,62,60,47,104,116,109,108,62,10,0,60,33,45,45,32,70,105,110,97,108,32,45,45,62,10,0,60,97,100,100,114,101,115,115,62,10,0,65,114,113,117,105,116,101,99,116,117,114,97,32,101,32,73,110,103,101,110,105,101,114,195,173,97,32,100,101,32,67,111,109,112,117,116,97,100,111,114,101,115,60,98,114,62,10,0,68,101,112,97,114,116,97,109,101,110,116,111,32,100,101,32,73,110,102,111,114,109,195,161,116,105,99,97,32,100,101,32,83,105,115,116,101,109,97,115,32,121,32,67,111,109,112,117,116,97,100,111,114,101,115,32,40,68,73,83,67,65,41,60,98,114,62,10,0,85,110,105,118,101,114,115,105,116,97,116,32,80,111,108,105,116,195,168,99,110,105,99,97,32,100,101,32,86,97,108,195,168,110,99,105,97,60,98,114,62,10,0,60,47,97,100,100,114,101,115,115,62,10,0,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,0,60,33,45,45,32,77,101,109,32,68,97,116,111,115,32,45,45,62,10,0,60,116,97,98,108,101,62,10,0,60,116,114,32,98,103,99,111,108,111,114,61,34,37,115,34,62,10,0,35,99,99,100,100,102,102,0,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,34,57,34,62,77,101,109,111,114,105,97,32,100,101,32,68,97,116,111,115,60,47,116,100,62,10,0,60,116,100,62,38,110,98,115,112,68,105,114,101,99,99,105,195,179,110,38,110,98,115,112,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,43,37,108,117,60,47,116,100,62,10,0,35,100,100,101,101,102,102,0,60,47,116,114,62,10,0,60,116,114,32,98,103,99,111,108,111,114,61,37,115,62,10,0,35,101,101,101,101,101,101,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,114,105,103,104,116,62,37,100,60,47,116,100,62,10,0,35,100,100,100,100,100,100,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,114,105,103,104,116,62,37,115,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,114,105,103,104,116,62,37,115,60,47,116,100,62,10,0,60,47,116,97,98,108,101,62,60,98,114,62,10,0,60,116,100,62,68,105,114,101,99,99,105,195,179,110,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,43,37,108,100,60,47,116,100,62,10,0,32,60,47,116,114,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,99,101,110,116,101,114,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,100,60,47,116,100,62,10,0,37,54,46,49,108,102,0,60,33,45,45,32,82,101,103,105,115,116,114,111,115,32,102,112,32,45,45,62,10,0,60,116,114,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,82,102,112,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,99,101,110,116,101,114,62,70,37,100,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,110,98,115,112,60,47,116,100,62,10,0,119,104,105,116,101,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,105,62,37,54,46,49,108,102,60,47,105,62,60,47,116,100,62,10,0,121,101,108,108,111,119,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,54,46,49,108,102,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,62,37,54,46,49,108,102,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,70,80,83,82,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,110,98,115,112,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,114,105,103,104,116,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,105,62,37,108,108,100,60,47,105,62,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,114,105,103,104,116,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,108,108,100,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,114,105,103,104,116,62,37,108,108,100,60,47,116,100,62,10,0,60,47,116,97,98,108,101,62,10,10,0,60,33,45,45,32,82,101,103,105,115,116,114,111,115,32,101,110,116,101,114,111,115,32,45,45,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,82,105,110,116,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,99,101,110,116,101,114,62,82,37,100,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,105,62,37,108,108,100,60,47,105,62,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,108,108,100,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,62,37,108,108,100,60,47,116,100,62,10,0,60,33,45,45,32,83,101,195,177,97,108,101,115,32,97,99,116,105,118,97,115,32,45,45,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,83,101,195,177,97,108,101,115,60,47,116,100,62,10,0,73,70,115,116,97,108,108,0,73,68,115,116,97,108,108,0,82,65,87,0,87,65,87,0,87,66,99,111,110,102,108,105,99,116,0,32,0,60,116,100,32,98,103,99,111,108,111,114,61,34,35,102,102,102,102,102,102,34,62,38,110,98,115,112,59,60,47,116,100,62,10,0,73,70,110,111,112,0,73,68,110,111,112,0,69,88,110,111,112,0,77,69,77,97,73,68,99,111,109,112,0,77,69,77,97,69,88,0,77,69,77,97,69,88,99,111,109,112,32,0,77,69,77,97,76,83,49,0,87,66,97,69,88,0,87,66,97,69,88,99,111,109,112,32,0,87,66,97,69,88,109,101,109,32,0,87,66,97,77,69,77,32,0,87,66,97,76,83,49,0,87,66,70,97,76,83,0,87,66,70,97,65,49,0,87,66,70,97,77,49,0,87,66,70,97,67,49,0,87,66,102,97,69,88,99,111,109,112,0,38,110,98,115,112,59,0,60,116,100,32,119,105,100,116,104,61,37,100,62,37,115,60,47,116,100,62,10,0,60,33,45,45,32,69,116,97,112,97,115,32,45,45,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,119,104,105,116,101,34,62,38,110,98,115,112,59,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,45,45,47,73,70,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,73,70,47,73,68,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,73,68,47,69,88,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,69,88,47,77,69,77,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,77,69,77,47,87,66,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,73,110,115,116,114,117,99,46,60,47,116,100,62,10,0,60,116,100,62,37,115,60,47,116,100,62,10,0,60,33,45,45,32,84,114,97,110,115,102,101,114,32,45,45,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,119,104,105,116,101,34,62,38,110,98,115,112,59,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,73,68,47,87,66,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,88,102,101,114,32,40,70,80,41,60,47,116,100,62,10,0,60,33,45,45,32,76,79,65,68,47,83,84,79,82,69,32,45,45,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,76,47,83,37,100,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,70,80,47,87,66,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,76,47,83,32,40,70,80,41,60,47,116,100,62,10,0,60,33,45,45,32,70,80,32,65,68,68,45,45,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,65,37,100,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,83,117,109,32,40,70,80,41,60,47,116,100,62,10,0,60,33,45,45,32,70,80,32,67,77,80,32,45,45,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,67,37,100,60,47,116,100,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,67,77,80,47,87,66,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,67,109,112,32,40,70,80,41,60,47,116,100,62,10,0,60,33,45,45,32,70,80,32,77,85,76,32,45,45,62,10,0,60,116,100,32,119,105,100,116,104,61,37,100,32,97,108,105,103,110,61,99,101,110,116,101,114,62,77,37,100,60,47,116,100,62,10,0,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,77,117,108,32,40,70,80,41,60,47,116,100,62,10,0,60,33,45,45,32,66,97,114,114,97,32,100,101,32,110,97,118,101,103,97,99,105,111,110,32,45,45,62,10,0,60,97,32,104,114,101,102,61,34,105,110,100,101,120,46,104,116,109,108,34,62,73,78,73,67,73,79,60,47,97,62,38,110,98,115,112,59,10,0,60,97,32,104,114,101,102,61,34,102,105,110,97,108,46,104,116,109,108,34,62,70,73,78,65,76,60,47,97,62,38,110,98,115,112,59,10,0,60,97,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,45,53,93,60,47,97,62,38,110,98,115,112,59,10,0,91,45,53,93,38,110,98,115,112,59,10,0,60,97,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,45,49,93,60,47,97,62,38,110,98,115,112,59,10,0,91,45,49,93,10,0,60,97,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,43,49,93,60,47,97,62,10,0,60,97,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,43,53,93,60,47,97,62,10,0,38,110,98,115,112,59,38,110,98,115,112,59,38,110,98,115,112,59,10,0,60,97,32,104,114,101,102,61,34,101,115,116,97,100,111,37,48,51,108,100,46,104,116,109,108,34,62,69,115,116,97,100,111,60,47,97,62,10,0,60,97,32,104,114,101,102,61,34,99,114,111,110,111,37,48,51,108,100,46,104,116,109,108,34,62,67,114,111,110,111,60,47,97,62,10,0,80,114,111,103,114,97,109,97,58,32,37,115,10,0,60,98,62,67,105,99,108,111,58,32,37,108,100,60,47,98,62,10,10,0,60,33,68,79,67,84,89,80,69,32,104,116,109,108,62,10,0,60,104,116,109,108,32,108,97,110,103,61,34,101,115,45,69,83,34,62,10,60,104,101,97,100,62,10,60,116,105,116,108,101,62,37,115,58,37,115,46,32,67,105,99,108,111,32,37,108,100,60,47,116,105,116,108,101,62,10,0,60,109,101,116,97,32,104,116,116,112,45,101,113,117,105,118,61,34,67,111,110,116,101,110,116,45,84,121,112,101,34,32,99,111,110,116,101,110,116,61,34,116,101,120,116,47,104,116,109,108,59,32,99,104,97,114,115,101,116,61,85,84,70,45,56,34,62,10,0,60,47,104,101,97,100,62,10,60,98,111,100,121,32,98,103,99,111,108,111,114,61,34,119,104,105,116,101,34,62,10,10,0,99,114,111,110,111,37,48,51,108,100,46,104,116,109,108,0,67,114,111,110,111,103,114,97,109,97,0,99,114,111,110,111,0,60,33,45,45,32,68,105,97,103,114,97,109,97,32,105,110,115,116,114,117,99,99,105,111,110,101,115,32,45,32,116,105,101,109,112,111,32,32,45,45,62,10,0,60,116,114,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,10,0,32,32,60,116,100,32,119,105,100,116,104,61,34,37,100,34,62,80,67,60,47,116,100,62,10,0,32,32,60,116,100,32,119,105,100,116,104,61,34,37,100,34,62,73,110,115,116,114,117,99,99,105,38,111,97,99,117,116,101,59,110,60,47,116,100,62,10,0,32,32,60,116,100,32,119,105,100,116,104,61,34,37,100,34,62,60,97,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,37,108,100,60,47,97,62,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,108,101,102,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,0,60,47,116,100,62,10,0,60,47,116,97,98,108,101,62,60,98,114,62,10,10,0,114,101,115,117,108,116,37,48,51,108,100,46,104,116,109,108,0,39,37,115,39,58,96,0,82,101,115,117,108,116,97,100,111,115,0,60,98,114,62,60,98,114,62,60,98,114,62,10,0,60,33,45,45,32,67,114,111,110,111,103,114,97,109,97,32,121,32,115,101,195,177,97,108,101,115,32,45,45,62,10,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,99,111,110,116,97,105,110,101,114,32,119,51,45,99,101,108,108,34,62,10,0,114,101,115,117,108,116,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,99,111,110,116,97,105,110,101,114,32,119,51,45,114,97,119,34,62,10,0,60,47,100,105,118,62,10,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,99,111,110,116,97,105,110,101,114,32,119,51,45,114,97,119,32,119,51,45,98,108,97,99,107,32,119,51,45,116,101,120,116,45,103,114,101,101,110,34,62,10,0,60,33,45,45,32,67,79,78,83,79,76,65,32,45,45,62,10,0,67,79,78,83,79,76,65,58,10,0,37,115,10,10,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,114,97,119,32,119,51,45,99,111,110,116,97,105,110,101,114,32,119,51,45,108,105,103,104,116,45,103,114,101,121,34,62,10,0,60,33,45,45,32,76,79,71,32,45,45,62,10,0,76,79,71,58,10,60,98,114,62,0,37,115,10,60,98,114,62,0,60,47,100,105,118,62,10,10,0,60,33,45,45,32,70,105,110,32,67,114,111,110,111,103,114,97,109,97,32,121,32,115,101,195,177,97,108,101,115,32,45,45,62,10,10,0,60,33,45,45,32,82,101,115,116,111,58,32,82,101,103,32,73,110,116,44,32,82,101,103,32,70,80,44,32,77,101,109,111,114,105,97,32,45,45,62,10,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,99,101,108,108,34,62,10,0,60,33,45,45,32,70,105,110,32,82,101,115,116,111,32,45,45,62,10,10,0,96,44,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,114,111,119,32,119,51,45,99,111,110,116,97,105,110,101,114,32,119,51,45,108,105,103,104,116,45,103,114,101,121,34,62,10,0,32,60,116,114,32,98,103,99,111,108,111,114,61,34,37,115,34,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,53,62,77,101,109,111,114,105,97,32,100,101,32,68,97,116,111,115,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,68,105,114,101,99,99,105,195,179,110,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,119,105,100,116,104,61,34,37,100,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,43,37,100,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,50,32,37,115,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,52,32,37,115,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,37,100,40,37,99,41,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121,108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,100,97,114,107,103,114,97,121,0,37,100,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,34,50,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,34,50,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121,108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,34,52,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,34,52,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121,108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,114,111,119,115,112,97,110,61,34,50,34,32,99,111,108,115,112,97,110,61,34,52,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,114,111,119,115,112,97,110,61,34,50,34,32,99,111,108,115,112,97,110,61,34,52,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,37,53,46,49,102,0,37,53,46,49,108,102,0,32,32,60,116,100,62,38,110,98,115,112,59,60,47,116,100,62,10,0,60,33,45,45,32,82,101,103,105,115,116,114,111,115,32,102,112,32,101,110,32,99,111,108,117,109,110,97,32,45,45,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,51,62,82,101,103,105,115,116,114,111,115,32,102,112,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,82,101,103,105,115,116,114,111,60,47,116,100,62,10,0,32,32,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,72,105,60,47,116,100,62,10,0,32,32,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,76,111,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,34,50,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,34,50,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121,108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,37,54,46,49,102,0,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121,108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,37,115,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,116,100,62,10,0,37,115,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121,108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,54,52,54,32,70,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,52,32,70,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,50,32,70,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,70,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,54,52,54,32,70,80,83,82,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,52,32,70,80,83,82,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,50,32,70,80,83,82,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,70,80,83,82,60,47,116,100,62,10,0,60,33,45,45,32,82,101,103,105,115,116,114,111,115,32,101,110,116,101,114,111,115,32,101,110,32,99,111,108,117,109,110,97,32,45,45,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,50,62,82,101,103,105,115,116,114,111,115,32,105,110,116,60,47,116,100,62,10,0,32,32,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,86,97,108,111,114,60,47,116,100,62,10,0,37,108,108,100,40,37,99,41,0,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,116,100,62,10,0,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,60,115,112,97,110,32,115,116,121,108,101,61,34,99,111,108,111,114,58,32,37,115,59,34,62,37,115,60,47,115,112,97,110,62,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,54,52,54,32,82,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,52,32,82,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,38,35,56,53,57,50,32,82,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,114,105,103,104,116,34,32,98,103,99,111,108,111,114,61,34,37,115,34,62,82,37,100,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,60,33,45,45,32,66,97,114,114,97,32,100,101,32,110,97,118,101,103,97,99,105,111,110,32,67,83,83,32,45,45,62,10,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,98,97,114,32,119,51,45,116,111,112,32,119,51,45,108,105,103,104,116,45,103,114,101,121,34,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,37,115,34,62,72,79,77,69,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,105,110,100,101,120,46,104,116,109,108,34,62,73,78,73,67,73,79,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,102,105,110,97,108,46,104,116,109,108,34,62,70,73,78,65,76,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,45,49,48,93,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,45,53,93,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,45,49,93,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,43,49,93,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,43,53,93,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,32,119,51,45,104,111,118,101,114,45,103,114,101,121,34,32,104,114,101,102,61,34,37,115,37,48,51,108,100,46,104,116,109,108,34,62,91,43,49,48,93,60,47,97,62,10,0,60,109,101,116,97,32,110,97,109,101,61,34,118,105,101,119,112,111,114,116,34,32,99,111,110,116,101,110,116,61,34,119,105,100,116,104,61,100,101,118,105,99,101,45,119,105,100,116,104,44,32,105,110,105,116,105,97,108,45,115,99,97,108,101,61,49,34,62,10,0,60,108,105,110,107,32,114,101,108,61,34,115,116,121,108,101,115,104,101,101,116,34,32,104,114,101,102,61,34,104,116,116,112,115,58,47,47,119,119,119,46,119,51,115,99,104,111,111,108,115,46,99,111,109,47,108,105,98,47,119,51,46,99,115,115,34,62,10,0,60,115,116,121,108,101,62,10,0,104,116,109,108,44,32,98,111,100,121,32,123,10,0,32,32,32,32,102,111,110,116,45,102,97,109,105,108,121,58,34,37,115,34,44,32,84,105,109,101,115,44,32,115,101,114,105,102,59,10,0,67,111,117,114,105,101,114,0,32,32,32,32,102,111,110,116,45,115,105,122,101,58,37,100,112,116,59,10,0,32,32,32,32,108,105,110,101,45,104,101,105,103,104,116,58,37,115,59,10,0,49,48,48,37,0,125,10,0,60,47,115,116,121,108,101,62,10,0,60,47,104,101,97,100,62,10,60,98,111,100,121,62,10,10,0,105,110,100,101,120,46,104,116,109,108,0,69,115,116,97,100,111,32,105,110,105,99,105,97,108,0,60,116,114,32,118,97,108,105,103,110,61,34,116,111,112,34,62,60,116,100,62,10,0,60,47,116,100,62,60,116,100,62,10,0,60,47,116,100,62,60,47,116,114,62,10,0,60,33,45,45,32,77,101,109,32,73,110,115,116,114,32,101,110,32,99,111,108,117,109,110,97,32,45,45,62,10,0,32,32,60,116,100,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,32,99,111,108,115,112,97,110,61,50,62,77,101,109,111,114,105,97,32,100,101,32,73,110,115,116,114,117,99,99,105,111,110,101,115,60,47,116,100,62,10,0,32,32,60,116,100,32,119,105,100,116,104,61,37,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,73,110,115,116,114,117,99,99,105,111,110,101,115,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,37,115,60,47,116,100,62,10,0,60,33,45,45,32,67,111,110,102,105,103,117,114,97,99,105,195,179,110,32,45,45,62,10,0,32,32,60,116,100,32,99,111,108,115,112,97,110,61,34,50,34,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,67,111,110,102,105,103,117,114,97,99,105,195,179,110,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,80,97,114,195,161,109,101,116,114,111,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,86,97,108,111,114,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,80,114,111,103,114,97,109,97,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,37,115,60,47,116,100,62,10,0,83,116,97,108,108,115,0,70,111,114,119,97,114,100,105,110,103,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,82,105,101,115,103,111,115,32,100,101,32,100,97,116,111,115,60,47,116,100,62,10,0,83,46,32,82,101,116,97,114,100,97,100,111,32,40,68,83,61,51,41,0,83,46,32,82,101,116,97,114,100,97,100,111,32,40,68,83,61,50,41,0,83,46,32,82,101,116,97,114,100,97,100,111,32,40,68,83,61,49,41,0,80,114,101,100,105,99,116,45,110,111,116,45,116,97,107,101,110,32,40,76,97,116,61,51,41,0,80,114,101,100,105,99,116,45,110,111,116,45,116,97,107,101,110,32,40,76,97,116,61,50,41,0,80,114,101,100,105,99,116,45,110,111,116,45,116,97,107,101,110,32,40,76,97,116,61,49,41,0,83,116,97,108,108,115,32,40,76,97,116,61,51,41,0,83,116,97,108,108,115,32,40,76,97,116,61,50,41,0,83,116,97,108,108,115,32,40,76,97,116,61,49,41,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,82,105,101,115,103,111,115,32,100,101,32,99,111,110,116,114,111,108,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,60,47,116,114,62,10,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,82,101,103,105,115,116,114,111,115,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,37,100,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,76,97,116,46,32,76,47,83,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,76,97,116,46,32,70,80,32,65,68,68,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,76,97,116,46,32,70,80,32,67,77,80,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,32,98,103,99,111,108,111,114,61,34,37,115,34,62,76,97,116,46,32,70,80,32,77,85,76,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,60,97,32,104,114,101,102,61,34,101,115,116,97,100,111,37,48,51,100,46,104,116,109,108,34,62,69,115,116,97,100,111,60,47,97,62,10,0,60,97,32,104,114,101,102,61,34,99,114,111,110,111,37,48,51,100,46,104,116,109,108,34,62,67,114,111,110,111,103,114,97,109,97,60,47,97,62,10,0,80,114,111,103,114,97,109,97,58,32,37,115,10,10,0,37,115,46,104,116,109,0,105,110,100,101,120,0,60,33,68,79,67,84,89,80,69,32,104,116,109,108,32,80,85,66,76,73,67,32,34,45,47,47,87,51,67,47,47,68,84,68,32,88,72,84,77,76,32,49,46,48,32,84,114,97,110,115,105,116,105,111,110,97,108,47,47,69,78,34,32,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,84,82,47,120,104,116,109,108,49,47,68,84,68,47,120,104,116,109,108,49,45,116,114,97,110,115,105,116,105,111,110,97,108,46,100,116,100,34,62,10,60,104,116,109,108,32,120,109,108,110,115,61,34,104,116,116,112,58,47,47,119,119,119,46,119,51,46,111,114,103,47,49,57,57,57,47,120,104,116,109,108,34,62,10,60,104,101,97,100,62,10,60,116,105,116,108,101,62,72,84,77,76,32,109,101,114,103,101,60,47,116,105,116,108,101,62,10,60,33,45,45,10,32,32,32,32,32,73,102,114,97,109,101,32,111,99,99,117,112,105,101,115,32,116,104,101,32,119,104,111,108,101,32,98,111,100,121,10,45,45,62,10,60,115,116,121,108,101,32,116,121,112,101,61,34,116,101,120,116,47,99,115,115,34,62,10,32,32,98,111,100,121,44,32,104,116,109,108,10,32,32,123,10,32,32,32,32,32,109,97,114,103,105,110,58,32,48,59,32,112,97,100,100,105,110,103,58,32,48,59,32,104,101,105,103,104,116,58,32,49,48,48,37,59,32,111,118,101,114,102,108,111,119,58,32,104,105,100,100,101,110,59,10,32,32,125,10,10,32,32,35,99,111,110,116,101,110,116,10,32,32,123,10,32,32,32,32,32,112,111,115,105,116,105,111,110,58,97,98,115,111,108,117,116,101,59,32,108,101,102,116,58,32,48,59,32,114,105,103,104,116,58,32,48,59,32,98,111,116,116,111,109,58,32,48,59,32,116,111,112,58,32,48,112,120,59,10,32,32,125,10,10,60,47,115,116,121,108,101,62,10,10,60,115,99,114,105,112,116,62,10,10,118,97,114,32,102,105,108,101,115,61,123,10,39,105,110,100,101,120,46,104,116,109,108,39,58,96,0,73,110,105,99,105,111,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,114,111,119,32,119,51,45,99,111,110,116,97,105,110,101,114,34,62,10,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,114,111,119,34,62,10,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,99,101,108,108,32,119,51,45,99,111,110,116,97,105,110,101,114,34,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,34,32,104,114,101,102,61,34,102,105,110,97,108,46,104,116,109,108,34,62,70,73,78,65,76,60,47,97,62,10,0,60,97,32,99,108,97,115,115,61,34,119,51,45,98,97,114,45,105,116,101,109,32,119,51,45,98,117,116,116,111,110,34,32,104,114,101,102,61,34,114,101,115,117,108,116,48,48,49,46,104,116,109,108,34,62,69,115,116,97,100,111,60,47,97,62,10,0,102,105,110,97,108,46,104,116,109,108,0,60,116,100,32,99,111,108,115,112,97,110,61,34,53,34,32,98,103,99,111,108,111,114,61,34,37,115,34,32,97,108,105,103,110,61,34,99,101,110,116,101,114,34,62,82,101,115,117,108,116,97,100,111,115,60,47,116,100,62,10,0,32,32,60,116,100,62,67,105,99,108,111,115,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,62,73,110,115,116,114,117,99,99,105,111,110,101,115,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,62,67,80,73,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,62,79,112,46,32,67,70,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,62,79,112,46,32,67,70,47,67,105,99,108,111,38,110,98,115,112,59,38,110,98,115,112,59,60,47,116,100,62,10,0,32,32,60,116,100,62,37,108,100,60,47,116,100,62,10,0,32,32,60,116,100,62,37,49,46,50,102,60,47,116,100,62,10,0,70,105,110,97,108,0,60,100,105,118,32,99,108,97,115,115,61,34,119,51,45,114,97,119,32,119,51,45,99,111,110,116,97,105,110,101,114,32,119,51,45,98,108,97,99,107,32,119,51,45,116,101,120,116,45,103,114,101,101,110,34,62,10,0,67,79,78,83,79,76,65,58,10,60,98,114,62,0,37,115,60,98,114,62,10,0,10,60,98,114,62,10,0,96,125,59,10,10,102,117,110,99,116,105,111,110,32,103,101,116,95,105,102,114,97,109,101,100,111,99,40,41,10,123,10,32,32,32,118,97,114,32,105,102,114,97,109,101,32,61,32,100,111,99,117,109,101,110,116,46,103,101,116,69,108,101,109,101,110,116,66,121,73,100,40,39,105,102,114,97,109,101,39,41,59,10,32,32,32,118,97,114,32,105,102,114,97,109,101,100,111,99,32,61,32,105,102,114,97,109,101,46,100,111,99,117,109,101,110,116,59,10,32,32,32,32,32,32,105,102,32,40,105,102,114,97,109,101,46,99,111,110,116,101,110,116,68,111,99,117,109,101,110,116,41,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,105,102,114,97,109,101,100,111,99,32,61,32,105,102,114,97,109,101,46,99,111,110,116,101,110,116,68,111,99,117,109,101,110,116,59,10,32,32,32,32,32,32,125,10,32,32,32,32,32,32,101,108,115,101,32,105,102,32,40,105,102,114,97,109,101,46,99,111,110,116,101,110,116,87,105,110,100,111,119,41,10,32,32,32,32,32,32,123,10,32,32,32,32,32,32,32,32,32,105,102,114,97,109,101,100,111,99,32,61,32,105,102,114,97,109,101,46,99,111,110,116,101,110,116,87,105,110,100,111,119,46,100,111,99,117,109,101,110,116,59,10,32,32,32,32,32,32,125,10,32,32,32,114,101,116,117,114,110,32,105,102,114,97,109,101,100,111,99,59,10,125,10,10,47,47,10,47,47,32,108,111,97,100,115,32,102,105,108,101,32,111,110,32,105,102,114,97,109,101,10,47,47,10,102,117,110,99,116,105,111,110,32,108,111,97,100,95,102,105,108,101,40,102,105,108,101,41,10,123,10,32,32,32,105,102,32,40,33,102,105,108,101,115,91,102,105,108,101,93,41,10,32,32,32,123,10,32,32,32,32,32,32,114,101,116,117,114,110,59,10,32,32,32,125,10,10,32,32,32,118,97,114,32,105,102,114,97,109,101,100,111,99,32,61,32,103,101,116,95,105,102,114,97,109,101,100,111,99,40,41,59,10,10,32,32,32,105,102,32,40,105,102,114,97,109,101,100,111,99,41,10,32,32,32,123,10,32,32,32,32,32,32,105,102,114,97,109,101,100,111,99,46,111,112,101,110,40,41,59,10,32,32,32,32,32,32,105,102,114,97,109,101,100,111,99,46,119,114,105,116,101,108,110,40,102,105,108,101,115,91,102,105,108,101,93,41,59,10,32,32,32,32,32,32,105,102,114,97,109,101,100,111,99,46,99,108,111,115,101,40,41,59,10,32,32,32,125,10,32,32,32,101,108,115,101,10,32,32,32,123,10,32,32,32,32,32,32,97,108,101,114,116,40,39,67,97,110,110,111,116,32,105,110,106,101,99,116,32,100,121,110,97,109,105,99,32,99,111,110,116,101,110,116,115,32,105,110,116,111,32,105,102,114,97,109,101,46,39,41,59,10,32,32,32,125,10,125,10,10,102,117,110,99,116,105,111,110,32,99,104,101,99,107,95,97,110,99,104,111,114,95,99,108,105,99,107,40,101,118,101,110,116,41,10,123,10,32,32,32,105,102,32,40,101,118,101,110,116,46,116,97,114,103,101,116,46,116,97,103,78,97,109,101,32,33,61,61,32,39,65,39,41,10,32,32,32,123,10,32,32,32,32,32,32,114,101,116,117,114,110,59,10,32,32,32,125,10,32,32,32,101,118,101,110,116,46,112,114,101,118,101,110,116,68,101,102,97,117,108,116,40,41,59,10,10,32,32,32,118,97,114,32,105,102,114,97,109,101,100,111,99,32,61,32,103,101,116,95,105,102,114,97,109,101,100,111,99,40,41,59,10,10,32,32,32,105,102,114,97,109,101,100,111,99,46,114,101,109,111,118,101,69,118,101,110,116,76,105,115,116,101,110,101,114,40,39,99,108,105,99,107,39,44,32,99,104,101,99,107,95,97,110,99,104,111,114,95,99,108,105,99,107,41,59,10,32,32,32,108,111,97,100,95,102,105,108,101,40,101,118,101,110,116,46,116,97,114,103,101,116,46,104,114,101,102,46,115,112,108,105,116,40,39,47,39,41,46,112,111,112,40,41,41,59,10,32,32,32,105,102,114,97,109,101,100,111,99,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,40,39,99,108,105,99,107,39,44,32,99,104,101,99,107,95,97,110,99,104,111,114,95,99,108,105,99,107,41,59,10,125,10,10,102,117,110,99,116,105,111,110,32,105,110,105,116,95,112,97,103,101,40,41,10,123,10,32,32,32,118,97,114,32,105,102,114,97,109,101,100,111,99,32,61,32,103,101,116,95,105,102,114,97,109,101,100,111,99,40,41,59,10,10,32,32,32,100,111,99,117,109,101,110,116,46,116,105,116,108,101,32,61,32,105,102,114,97,109,101,100,111,99,46,116,105,116,108,101,59,10,32,32,32,105,102,114,97,109,101,100,111,99,46,97,100,100,69,118,101,110,116,76,105,115,116,101,110,101,114,40,39,99,108,105,99,107,39,44,32,99,104,101,99,107,95,97,110,99,104,111,114,95,99,108,105,99,107,41,59,10,125,10,10,60,47,115,99,114,105,112,116,62,10,60,47,104,101,97,100,62,10,60,33,45,45,10,32,32,32,32,32,108,111,97,100,115,32,39,105,110,100,101,120,46,104,116,109,108,39,32,111,110,32,102,105,114,115,116,32,108,111,97,100,10,45,45,62,10,60,98,111,100,121,32,111,110,76,111,97,100,61,39,108,111,97,100,95,102,105,108,101,40,34,105,110,100,101,120,46,104,116,109,108,34,41,39,62,10,10,60,100,105,118,32,105,100,61,34,99,111,110,116,101,110,116,34,62,10,32,32,32,60,105,102,114,97,109,101,32,105,100,61,34,105,102,114,97,109,101,34,32,119,105,100,116,104,61,34,49,48,48,37,34,32,104,101,105,103,104,116,61,34,49,48,48,37,34,32,102,114,97,109,101,98,111,114,100,101,114,61,34,48,34,32,115,114,99,61,34,97,98,111,117,116,58,98,108,97,110,107,34,32,111,110,76,111,97,100,61,34,105,110,105,116,95,112,97,103,101,40,41,34,32,47,62,10,60,47,100,105,118,62,10,10,60,47,98,111,100,121,62,10,60,47,104,116,109,108,62,10,0,95,99,111,110,115,111,108,97,46,116,120,116,0,40,112,114,105,110,116,32,105,110,116,41,32,37,108,108,100,10,0,37,102,0,40,112,114,105,110,116,32,102,108,111,97,116,41,32,37,102,10,0,37,108,102,0,40,112,114,105,110,116,32,100,111,117,98,108,101,41,32,37,108,102,10,0,37,115,0,40,112,114,105,110,116,32,115,116,114,41,32,37,115,10,0,40,114,101,97,100,32,105,110,116,41,32,37,108,108,100,10,0,40,114,101,97,100,32,102,108,111,97,116,41,32,37,102,10,0,40,114,101,97,100,32,100,111,117,98,108,101,41,32,37,108,102,10,0,40,114,101,97,100,32,115,116,114,41,32,37,115,10,0,115,121,115,99,97,108,108,32,49,48,58,32,80,114,111,103,114,97,109,97,32,116,101,114,109,105,110,97,100,111,0,115,121,115,99,97,108,108,32,49,48,58,32,80,114,111,103,114,97,109,97,32,116,101,114,109,105,110,97,100,111,10,0,40,112,114,105,110,116,32,99,104,97,114,41,32,37,99,10,0,32,37,99,0,40,114,101,97,100,32,99,104,97,114,41,32,37,100,10,0,10,115,121,115,99,97,108,108,32,37,108,108,100,32,110,111,32,105,109,112,108,101,109,101,110,116,97,100,111,58,32,80,114,111,103,114,97,109,97,32,116,101,114,109,105,110,97,100,111,10,0,69,114,114,111,114,58,32,37,115,59,32,102,117,110,99,105,195,179,110,58,37,115,59,32,108,195,173,110,101,97,58,37,100,10,0,47,115,114,99,47,109,105,112,115,45,109,117,108,116,105,99,105,99,108,111,45,51,47,109,105,112,115,95,105,110,116,46,99,0,111,112,101,114,97,99,105,111,110,95,65,76,85,0,79,112,101,114,97,99,105,195,179,110,32,37,100,32,110,111,32,105,109,112,108,101,109,101,110,116,97,100,97,10,0,99,111,114,116,111,32,77,69,77,97,69,88,97,108,117,95,115,0,69,88,0,77,69,77,0,99,111,114,116,111,32,87,66,97,69,88,97,108,117,95,115,0,87,66,0,99,111,114,116,111,32,77,69,77,97,69,88,97,108,117,95,105,0,99,111,114,116,111,32,87,66,97,69,88,97,108,117,95,105,0,99,111,114,116,111,32,77,69,77,97,69,88,99,111,109,112,95,115,0,99,111,114,116,111,32,87,66,97,69,88,99,111,109,112,95,115,0,99,111,114,116,111,32,70,80,95,87,66,97,69,88,99,111,109,112,0,70,80,95,87,66,0,99,111,114,116,111,32,77,69,77,97,69,88,99,111,109,112,95,105,0,99,111,114,116,111,32,87,66,97,69,88,99,111,109,112,95,105,0,99,111,114,116,111,32,87,66,97,69,88,109,101,109,0,99,111,114,116,111,32,87,66,97,77,69,77,0,99,111,114,116,111,32,77,69,77,97,73,68,99,111,109,112,95,115,0,73,68,0,99,111,114,116,111,32,77,69,77,97,73,68,99,111,109,112,95,105,0,73,68,115,116,97,108,108,44,32,73,70,115,116,97,108,108,0,82,65,87,32,73,68,115,116,97,108,108,44,32,73,70,115,116,97,108,108,0,82,65,87,32,73,68,115,116,97,108,44,32,73,70,115,116,97,108,108,0,95,108,111,103,46,116,120,116,0,97,0,37,115,67,105,99,108,111,58,32,37,108,100,44,32,83,101,195,177,97,108,58,32,37,115,59,32,0,67,105,99,108,111,58,32,37,108,100,44,32,83,101,195,177,97,108,58,32,37,115,59,32,0,37,115,82,100,101,115,116,105,110,111,32,100,101,32,37,115,32,40,101,110,32,37,115,41,32,61,61,32,82,102,117,101,110,116,101,32,100,101,32,37,115,32,40,101,110,32,37,115,41,60,98,114,62,10,0,82,100,101,115,116,105,110,111,32,100,101,32,37,115,32,40,101,110,32,37,115,41,32,61,61,32,82,102,117,101,110,116,101,32,100,101,32,37,115,32,40,101,110,32,37,115,41,10,0,37,115,73,110,115,116,114,117,99,99,105,195,179,110,32,37,115,44,32,114,101,103,105,115,116,114,111,32,70,37,100,60,98,114,62,10,0,73,110,115,116,114,117,99,99,105,195,179,110,32,37,115,44,32,114,101,103,105,115,116,114,111,32,70,37,100,10,0,37,115,73,110,115,116,114,117,99,99,105,195,179,110,32,37,115,60,98,114,62,10,0,73,110,115,116,114,117,99,99,105,195,179,110,32,37,115,10,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,48,49,2,2,47,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,72,40,83,84,85,89,118,1,44,86,87,123,124,41,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,42,28,29,30,31,32,46,47,33,34,35,115,148,116,49,152,153,60,115,61,116,120,90,56,57,58,59,63,64,65,66,75,67,68,91,69,70,71,73,76,77,92,81,114,146,147,119,93,94,95,125,96,97,98,121,99,100,122,101,105,126,127,1,128,129,149,102,137,151,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,107,28,29,30,31,32,109,133,33,34,135,150,138,154,139,140,141,142,155,143,144,145,156,0,157,158,159,160,0,0,0,130,0,0,0,0,0,0,0,0,0,131,0,0,0,0,132,5,5,13,14,0,0,0,0,0,0,15,17,19,21,23,25,0,0,0,0,0,0,0,0,59,78,60,0,0,0,0,0,0,0,0,2,0,4,11,12,10,28,43,30,47,31,29,51,32,27,0,0,0,0,0,0,0,0,0,0,57,58,75,0,0,70,0,0,0,0,0,0,76,77,0,1,6,8,46,50,54,33,16,18,20,22,39,37,24,26,0,0,0,0,0,0,0,0,0,0,0,0,3,5,5,0,44,0,48,0,52,36,42,42,0,55,56,0,0,71,73,0,0,0,0,0,72,67,7,9,45,49,53,0,34,0,40,38,0,0,0,0,0,0,0,0,35,41,69,0,0,74,65,68,0,0,66,61,63,62,64,0,2,0,3,1,0,0,4,0,4,2,1,1,1,1,0,3,0,3,0,3,0,3,0,3,0,3,2,2,2,2,2,2,0,3,2,0,0,3,0,3,2,0,0,3,2,0,0,3,2,0,0,3,2,0,1,1,1,1,1,1,7,7,7,7,6,6,4,6,6,2,4,4,4,6,2,2,2,1,69,116,105,113,117,101,116,97,32,105,110,100,101,102,105,110,105,100,97,0,80,195,129,78,73,67,79,0,68,97,116,111,115,32,101,110,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,105,110,115,116,114,117,99,99,105,111,110,101,115,0,69,120,99,101,100,105,100,111,32,101,108,32,116,97,109,97,195,177,111,32,100,101,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,0,69,120,99,101,100,105,100,111,32,101,108,32,116,97,109,97,195,146,111,32,100,101,32,108,97,32,109,101,109,111,114,105,97,32,100,101,32,100,97,116,111,115,0,76,105,116,101,114,97,108,32,102,117,101,114,97,32,100,101,108,32,114,97,110,103,111,32,100,101,108,32,116,105,112,111,32,39,98,121,116,101,39,0,76,105,116,101,114,97,108,32,102,117,101,114,97,32,100,101,108,32,114,97,110,103,111,32,100,101,108,32,116,105,112,111,32,39,104,97,108,102,39,0,76,105,116,101,114,97,108,32,102,117,101,114,97,32,100,101,108,32,114,97,110,103,111,32,100,101,108,32,116,105,112,111,32,39,119,111,114,100,39,0,69,120,99,101,100,105,100,111,32,101,108,32,110,117,109,101,114,111,32,100,101,32,114,101,103,105,115,116,114,111,115,0,66,84,66,32,121,97,32,105,110,105,99,105,97,108,105,122,97,100,111,0,83,101,32,101,115,112,101,114,97,32,39,46,116,101,120,116,39,32,97,110,116,101,115,32,100,101,32,108,97,115,32,105,110,115,116,114,117,99,99,105,111,110,101,115,0,0,50,52,51,51,51,54,53,55,53,53,53,53,56,56,57,56,58,56,59,56,60,56,61,56,62,56,56,56,56,56,56,56,64,63,65,65,67,66,68,66,69,69,71,70,72,72,74,73,75,75,77,76,78,78,79,79,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,169,0,169,32,169,169,169,169,169,169,169,169,169,207,169,169,206,169,169,250,61,169,169,69,169,169,72,169,169,170,223,169,115,121,110,116,97,120,32,101,114,114,111,114,0,109,101,109,111,114,121,32,101,120,104,97,117,115,116,101,100,0,37,115,58,37,108,100,46,32,69,114,114,111,114,58,32,37,115,10,0,114,0,69,114,114,111,114,32,97,98,114,105,101,110,100,111,32,101,108,32,102,105,99,104,101,114,111,32,39,37,115,39,46,10,0,46,116,101,120,116,0,46,100,97,116,97,0,46,101,116,101,120,116,0,46,101,100,97,116,97,0,37,108,108,100,0,37,108,108,111,0,37,108,108,120,0,37,108,103,0,69,108,32,114,97,110,103,111,32,100,101,32,114,101,103,105,115,116,114,111,115,32,100,101,32,99,111,109,97,32,102,108,111,116,97,110,116,101,32,101,115,32,70,48,45,70,37,100,0,69,108,32,114,97,110,103,111,32,100,101,32,114,101,103,105,115,116,114,111,115,32,101,110,116,101,114,111,115,32,101,115,32,82,48,45,82,37,100,0,68,105,114,101,99,116,105,118,97,32,100,101,32,101,110,115,97,109,98,108,97,100,111,114,32,100,101,115,99,111,110,111,99,105,100,97,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,110,111,32,97,99,116,105,111,110,32,102,111,117,110,100,0,37,115,10,0,102,97,116,97,108,32,102,108,101,120,32,115,99,97,110,110,101,114,32,105,110,116,101,114,110,97,108,32,101,114,114,111,114,45,45,101,110,100,32,111,102,32,98,117,102,102,101,114,32,109,105,115,115,101,100,0,102,97,116,97,108,32,101,114,114,111,114,32,45,32,115,99,97,110,110,101,114,32,105,110,112,117,116,32,98,117,102,102,101,114,32,111,118,101,114,102,108,111,119,0,105,110,112,117,116,32,105,110,32,102,108,101,120,32,115,99,97,110,110,101,114,32,102,97,105,108,101,100,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,95,103,101,116,95,110,101,120,116,95,98,117,102,102,101,114,40,41,0,102,108,101,120,32,115,99,97,110,110,101,114,32,112,117,115,104,45,98,97,99,107,32,111,118,101,114,102,108,111,119,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,95,99,114,101,97,116,101,95,98,117,102,102,101,114,40,41,0,111,117,116,32,111,102,32,100,121,110,97,109,105,99,32,109,101,109,111,114,121,32,105,110,32,121,121,101,110,115,117,114,101,95,98,117,102,102,101,114,95,115,116,97,99,107,40,41,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,105,110,102,105,110,105,116,121,0,110,97,110,0,114,119,97,0,58,32,111,112,116,105,111,110,32,100,111,101,115,32,110,111,116,32,116,97,107,101,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,58,32,111,112,116,105,111,110,32,105,115,32,97,109,98,105,103,117,111,117,115,58,32,0,58,32,117,110,114,101,99,111,103,110,105,122,101,100,32,111,112,116,105,111,110,58,32,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

   

   

   

   

  function ___wait() {}

   

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  
    

   

   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory


function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "___syscall221": ___syscall221, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___lock": ___lock, "___syscall6": ___syscall6, "___setErrNo": ___setErrNo, "_abort": _abort, "___wait": ___wait, "___syscall5": ___syscall5, "___syscall195": ___syscall195, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_exit": _exit, "__exit": __exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var ___syscall221=env.___syscall221;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___setErrNo=env.___setErrNo;
  var _abort=env._abort;
  var ___wait=env.___wait;
  var ___syscall5=env.___syscall5;
  var ___syscall195=env.___syscall195;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var __exit=env.__exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _imprime_inicio_txt() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[388]|0;
 (_fwrite(7914,25,1,$0)|0);
 $1 = HEAP32[19179]|0;
 switch ($1|0) {
 case 0:  {
  $2 = HEAP32[388]|0;
  (_fwrite(7940,12,1,$2)|0);
  break;
 }
 case 1:  {
  $3 = HEAP32[388]|0;
  (_fwrite(7953,32,1,$3)|0);
  break;
 }
 case 2:  {
  $4 = HEAP32[388]|0;
  (_fwrite(7986,31,1,$4)|0);
  break;
 }
 case 3:  {
  $5 = HEAP32[388]|0;
  (_fwrite(8018,33,1,$5)|0);
  break;
 }
 default: {
 }
 }
 $6 = HEAP32[19178]|0;
 switch ($6|0) {
 case 2:  {
  $7 = HEAP32[388]|0;
  (_fwrite(8052,26,1,$7)|0);
  break;
 }
 case 0:  {
  $8 = HEAP32[388]|0;
  (_fwrite(8079,35,1,$8)|0);
  break;
 }
 case 1:  {
  $9 = HEAP32[388]|0;
  (_fwrite(8115,32,1,$9)|0);
  break;
 }
 default: {
 }
 }
 $10 = HEAP32[19177]|0;
 switch ($10|0) {
 case 6:  {
  $11 = HEAP32[388]|0;
  (_fwrite(8148,43,1,$11)|0);
  break;
 }
 case 7:  {
  $12 = HEAP32[388]|0;
  (_fwrite(8192,43,1,$12)|0);
  break;
 }
 case 8:  {
  $13 = HEAP32[388]|0;
  (_fwrite(8236,43,1,$13)|0);
  break;
 }
 case 3:  {
  $14 = HEAP32[388]|0;
  (_fwrite(8280,46,1,$14)|0);
  break;
 }
 case 4:  {
  $15 = HEAP32[388]|0;
  (_fwrite(8327,46,1,$15)|0);
  break;
 }
 case 5:  {
  $16 = HEAP32[388]|0;
  (_fwrite(8374,46,1,$16)|0);
  break;
 }
 case 0:  {
  $17 = HEAP32[388]|0;
  (_fwrite(8421,45,1,$17)|0);
  break;
 }
 case 1:  {
  $18 = HEAP32[388]|0;
  (_fwrite(8467,45,1,$18)|0);
  break;
 }
 case 2:  {
  $19 = HEAP32[388]|0;
  (_fwrite(8513,45,1,$19)|0);
  break;
 }
 default: {
 }
 }
 $20 = HEAP32[388]|0;
 (_fputc(10,$20)|0);
 HEAP32[$vararg_buffer>>2] = 32;
 (_fprintf($20,8559,$vararg_buffer)|0);
 HEAP32[$vararg_buffer1>>2] = 4096;
 (_fprintf($20,8578,$vararg_buffer1)|0);
 HEAP32[$vararg_buffer4>>2] = 16384;
 (_fprintf($20,8610,$vararg_buffer4)|0);
 (_fwrite(8634,20,1,$20)|0);
 $21 = HEAP32[21]|0;
 HEAP32[$vararg_buffer7>>2] = $21;
 (_fprintf($20,8655,$vararg_buffer7)|0);
 $22 = HEAP32[388]|0;
 $23 = HEAP32[18]|0;
 HEAP32[$vararg_buffer10>>2] = $23;
 (_fprintf($22,8666,$vararg_buffer10)|0);
 $24 = HEAP32[20]|0;
 HEAP32[$vararg_buffer13>>2] = $24;
 (_fprintf($22,8678,$vararg_buffer13)|0);
 $25 = HEAP32[19]|0;
 HEAP32[$vararg_buffer16>>2] = $25;
 (_fprintf($22,8690,$vararg_buffer16)|0);
 $26 = HEAP32[388]|0;
 (_fwrite(8702,2,1,$26)|0);
 STACKTOP = sp;return;
}
function _imprime_final_txt() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[388]|0;
 (_fwrite(8705,23,1,$0)|0);
 $1 = HEAP32[19183]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($0,8729,$vararg_buffer)|0);
 $2 = HEAP32[(76736)>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $2;
 (_fprintf($0,8742,$vararg_buffer1)|0);
 $3 = HEAP32[(76740)>>2]|0;
 HEAP32[$vararg_buffer4>>2] = $3;
 (_fprintf($0,8762,$vararg_buffer4)|0);
 $4 = HEAP32[388]|0;
 $5 = HEAP32[(76744)>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $5;
 (_fprintf($4,8781,$vararg_buffer7)|0);
 $6 = HEAP32[19183]|0;
 $7 = (+($6|0));
 $8 = HEAP32[(76736)>>2]|0;
 $9 = (+($8|0));
 $10 = $7 / $9;
 $11 = $10;
 HEAPF64[$vararg_buffer10>>3] = $11;
 (_fprintf($4,8803,$vararg_buffer10)|0);
 $12 = HEAP32[388]|0;
 $13 = HEAP32[(76748)>>2]|0;
 HEAP32[$vararg_buffer13>>2] = $13;
 (_fprintf($12,8815,$vararg_buffer13)|0);
 $14 = HEAP32[(76748)>>2]|0;
 $15 = (+($14|0));
 $16 = HEAP32[19183]|0;
 $17 = (+($16|0));
 $18 = $15 / $17;
 $19 = $18;
 HEAPF64[$vararg_buffer16>>3] = $19;
 (_fprintf($12,8828,$vararg_buffer16)|0);
 $20 = HEAP32[388]|0;
 (_fwrite(8702,2,1,$20)|0);
 STACKTOP = sp;return;
}
function _imprime_reg_txt() {
 var $$01525 = 0, $$026 = 0, $$11623 = 0, $$124 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond27 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 32|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[388]|0;
 (_fwrite(8848,19,1,$0)|0);
 $$01525 = 0;$$026 = 1;
 while(1) {
  $1 = (54032 + ($$01525<<3)|0);
  $2 = $1;
  $3 = $2;
  $4 = HEAP32[$3>>2]|0;
  $5 = (($2) + 4)|0;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $$01525;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  $8 = $vararg_ptr1;
  $9 = $8;
  HEAP32[$9>>2] = $4;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
  (_fprintf($0,8868,$vararg_buffer)|0);
  $12 = $$026 & 3;
  $13 = ($12|0)==(0);
  if ($13) {
   (_fputc(10,$0)|0);
  }
  $14 = (($$026) + 1)|0;
  $15 = (($$01525) + 1)|0;
  $exitcond27 = ($15|0)==(32);
  if ($exitcond27) {
   break;
  } else {
   $$01525 = $15;$$026 = $14;
  }
 }
 (_fputc(10,$0)|0);
 $16 = HEAP32[19168]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $35 = HEAP32[388]|0;
  (_fwrite(8702,2,1,$35)|0);
  STACKTOP = sp;return;
 }
 $18 = HEAP32[388]|0;
 $$11623 = 0;$$124 = 1;
 while(1) {
  $19 = (54296 + ($$11623<<4)|0);
  $20 = +HEAPF64[$19>>3];
  HEAP32[$vararg_buffer2>>2] = $$11623;
  $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
  HEAPF64[$vararg_ptr5>>3] = $20;
  (_fprintf($18,8887,$vararg_buffer2)|0);
  $21 = $$124 & 3;
  $22 = ($21|0)==(0);
  if ($22) {
   (_fputc(10,$18)|0);
  }
  $23 = (($$124) + 1)|0;
  $24 = (($$11623) + 1)|0;
  $exitcond = ($24|0)==(32);
  if ($exitcond) {
   break;
  } else {
   $$11623 = $24;$$124 = $23;
  }
 }
 $25 = (54288);
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $vararg_buffer6;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 (_fprintf($18,8906,$vararg_buffer6)|0);
 $35 = HEAP32[388]|0;
 (_fwrite(8702,2,1,$35)|0);
 STACKTOP = sp;return;
}
function _imprime_memdatos_txt() {
 var $$0151155 = 0, $$0156 = 0, $$1 = 0, $$sroa$0$0$$sroa_idx$sroa_raw_idx = 0, $$sroa$0$0$copyload15 = 0, $$sroa$0$0$copyload17 = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0;
 var $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $vararg_buffer56 = sp + 160|0;
 $vararg_buffer53 = sp + 152|0;
 $vararg_buffer50 = sp + 144|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer44 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 296|0;
 $1 = sp + 168|0;
 $2 = sp + 164|0;
 $3 = sp;
 $4 = HEAP32[388]|0;
 (_fwrite(8920,23,1,$4)|0);
 $5 = HEAP32[19190]|0;
 $6 = HEAP32[(76764)>>2]|0;
 $7 = ($5|0)<($6|0);
 if (!($7)) {
  $61 = HEAP32[388]|0;
  (_fputc(10,$61)|0);
  STACKTOP = sp;return;
 }
 $8 = HEAP32[388]|0;
 $$sroa$0$0$$sroa_idx$sroa_raw_idx = ((($3)) + 4|0);
 $$0151155 = $5;$$0156 = $5;
 while(1) {
  $9 = $$0156 & 3;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = ($$0156|0)<(0);
   $12 = $11 << 31 >> 31;
   _te_etiqueta($0,$$0156,$12,1);
   HEAP32[$vararg_buffer>>2] = $0;
   (_fprintf($8,8944,$vararg_buffer)|0);
  }
  $13 = ($$0156|0)==($$0151155|0);
  L9: do {
   if ($13) {
    $14 = ($$0156|0)<(0);
    $15 = $14 << 31 >> 31;
    $16 = (666600 + ($$0156<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    _lee_mem_datos($3,$$0156,$15,$17,$2);
    $$sroa$0$0$copyload15 = HEAP32[$3>>2]|0;
    $$sroa$0$0$copyload17 = HEAP32[$$sroa$0$0$$sroa_idx$sroa_raw_idx>>2]|0;
    $18 = HEAP32[$16>>2]|0;
    switch ($18|0) {
    case 2: case 1:  {
     $sext = $$sroa$0$0$copyload15 << 24;
     $19 = $sext >> 24;
     HEAP32[$vararg_buffer1>>2] = $19;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $19;
     (_sprintf($1,19905,$vararg_buffer1)|0);
     $20 = HEAP32[$2>>2]|0;
     $21 = ($20|0)==(0);
     if ($21) {
      HEAP32[$vararg_buffer8>>2] = $1;
      (_fprintf($8,8957,$vararg_buffer8)|0);
     } else {
      HEAP32[$vararg_buffer5>>2] = $1;
      (_fprintf($8,8950,$vararg_buffer5)|0);
     }
     $22 = (($$0156) + 1)|0;
     $$1 = $22;
     break L9;
     break;
    }
    case 3:  {
     $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert = $$sroa$0$0$copyload15 << 16;
     $23 = $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert >> 16;
     HEAP32[$vararg_buffer11>>2] = $23;
     (_sprintf($1,20046,$vararg_buffer11)|0);
     $24 = HEAP32[$2>>2]|0;
     $25 = ($24|0)==(0);
     if ($25) {
      HEAP32[$vararg_buffer17>>2] = $1;
      (_fprintf($8,8971,$vararg_buffer17)|0);
     } else {
      HEAP32[$vararg_buffer14>>2] = $1;
      (_fprintf($8,8963,$vararg_buffer14)|0);
     }
     $26 = (($$0156) + 2)|0;
     $$1 = $26;
     break L9;
     break;
    }
    case 4:  {
     HEAP32[$vararg_buffer20>>2] = $$sroa$0$0$copyload15;
     (_sprintf($1,20046,$vararg_buffer20)|0);
     $27 = HEAP32[$2>>2]|0;
     $28 = ($27|0)==(0);
     if ($28) {
      HEAP32[$vararg_buffer26>>2] = $1;
      (_fprintf($8,8986,$vararg_buffer26)|0);
     } else {
      HEAP32[$vararg_buffer23>>2] = $1;
      (_fprintf($8,8978,$vararg_buffer23)|0);
     }
     $29 = (($$0156) + 4)|0;
     $$1 = $29;
     break L9;
     break;
    }
    case 5:  {
     $30 = ($$sroa$0$0$copyload17|0)<(1);
     $31 = ($$sroa$0$0$copyload15>>>0)<(0);
     $32 = ($$sroa$0$0$copyload17|0)==(1);
     $33 = $32 & $31;
     $34 = $30 | $33;
     if ($34) {
      $35 = $vararg_buffer29;
      $36 = $35;
      HEAP32[$36>>2] = $$sroa$0$0$copyload15;
      $37 = (($35) + 4)|0;
      $38 = $37;
      HEAP32[$38>>2] = $$sroa$0$0$copyload17;
      (_sprintf($1,29196,$vararg_buffer29)|0);
     } else {
      $39 = $vararg_buffer32;
      $40 = $39;
      HEAP32[$40>>2] = $$sroa$0$0$copyload15;
      $41 = (($39) + 4)|0;
      $42 = $41;
      HEAP32[$42>>2] = $$sroa$0$0$copyload17;
      (_sprintf($1,29206,$vararg_buffer32)|0);
     }
     $43 = HEAP32[$2>>2]|0;
     $44 = ($43|0)==(0);
     if ($44) {
      HEAP32[$vararg_buffer38>>2] = $1;
      (_fprintf($8,8986,$vararg_buffer38)|0);
     } else {
      HEAP32[$vararg_buffer35>>2] = $1;
      (_fprintf($8,8978,$vararg_buffer35)|0);
     }
     $45 = (($$0156) + 8)|0;
     $$1 = $45;
     break L9;
     break;
    }
    case 6:  {
     $46 = (HEAP32[tempDoublePtr>>2]=$$sroa$0$0$copyload15,+HEAPF32[tempDoublePtr>>2]);
     $47 = $46;
     HEAPF64[$vararg_buffer41>>3] = $47;
     (_sprintf($1,20520,$vararg_buffer41)|0);
     $48 = HEAP32[$2>>2]|0;
     $49 = ($48|0)==(0);
     if ($49) {
      HEAP32[$vararg_buffer47>>2] = $1;
      (_fprintf($8,8986,$vararg_buffer47)|0);
     } else {
      HEAP32[$vararg_buffer44>>2] = $1;
      (_fprintf($8,8978,$vararg_buffer44)|0);
     }
     $50 = (($$0156) + 4)|0;
     $$1 = $50;
     break L9;
     break;
    }
    case 8:  {
     HEAP32[tempDoublePtr>>2] = $$sroa$0$0$copyload15;HEAP32[tempDoublePtr+4>>2] = $$sroa$0$0$copyload17;$51 = +HEAPF64[tempDoublePtr>>3];
     HEAPF64[$vararg_buffer50>>3] = $51;
     (_sprintf($1,20526,$vararg_buffer50)|0);
     $52 = HEAP32[$2>>2]|0;
     $53 = ($52|0)==(0);
     if ($53) {
      HEAP32[$vararg_buffer56>>2] = $1;
      (_fprintf($8,8986,$vararg_buffer56)|0);
     } else {
      HEAP32[$vararg_buffer53>>2] = $1;
      (_fprintf($8,8978,$vararg_buffer53)|0);
     }
     $54 = (($$0156) + 8)|0;
     $$1 = $54;
     break L9;
     break;
    }
    default: {
     (_fwrite(8993,4,1,$8)|0);
     $55 = (($$0156) + 1)|0;
     $$1 = $55;
     break L9;
    }
    }
   } else {
    $$1 = $$0151155;
   }
  } while(0);
  $56 = (($$0156) + 1)|0;
  $57 = $56 & 3;
  $58 = ($57|0)==(0);
  if ($58) {
   (_fputc(10,$8)|0);
  }
  $59 = HEAP32[(76764)>>2]|0;
  $60 = ($56|0)<($59|0);
  if ($60) {
   $$0151155 = $$1;$$0156 = $56;
  } else {
   break;
  }
 }
 $61 = HEAP32[388]|0;
 (_fputc(10,$61)|0);
 STACKTOP = sp;return;
}
function _operacion_ALU_FP($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$copyload = 0.0, $$sroa$0$4$sroa_raw_idx = 0, $$sroa$0$4$sroa_raw_idx52 = 0, $$sroa$0$4$sroa_raw_idx55 = 0, $$sroa$0$4$sroa_raw_idx58 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0;
 var $61 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $$sroa$0 = sp;
 do {
  switch ($1<<24>>24) {
  case 0:  {
   HEAPF64[$$sroa$0>>3] = 0.0;
   label = 3;
   break;
  }
  case -113:  {
   label = 3;
   break;
  }
  case -112:  {
   $7 = +HEAPF64[$2>>3];
   $8 = +HEAPF64[$3>>3];
   $9 = $7 - $8;
   HEAPF64[$$sroa$0>>3] = $9;
   break;
  }
  case -111:  {
   $10 = +HEAPF64[$2>>3];
   $11 = +HEAPF64[$3>>3];
   $12 = $10 * $11;
   HEAPF64[$$sroa$0>>3] = $12;
   break;
  }
  case -110:  {
   $13 = +HEAPF64[$2>>3];
   $14 = +HEAPF64[$3>>3];
   $15 = $13 / $14;
   HEAPF64[$$sroa$0>>3] = $15;
   break;
  }
  case -126:  {
   $16 = +HEAPF32[$2>>2];
   $17 = +HEAPF32[$3>>2];
   $18 = $16 + $17;
   HEAPF32[$$sroa$0>>2] = $18;
   break;
  }
  case -125:  {
   $19 = +HEAPF32[$2>>2];
   $20 = +HEAPF32[$3>>2];
   $21 = $19 - $20;
   HEAPF32[$$sroa$0>>2] = $21;
   break;
  }
  case -124:  {
   $22 = +HEAPF32[$2>>2];
   $23 = +HEAPF32[$3>>2];
   $24 = $22 * $23;
   HEAPF32[$$sroa$0>>2] = $24;
   break;
  }
  case -123:  {
   $25 = +HEAPF32[$2>>2];
   $26 = +HEAPF32[$3>>2];
   $27 = $25 / $26;
   HEAPF32[$$sroa$0>>2] = $27;
   break;
  }
  case -102:  {
   $28 = +HEAPF32[$2>>2];
   $29 = +HEAPF32[$3>>2];
   $30 = $28 + $29;
   HEAPF32[$$sroa$0>>2] = $30;
   $31 = ((($2)) + 4|0);
   $32 = +HEAPF32[$31>>2];
   $33 = ((($3)) + 4|0);
   $34 = +HEAPF32[$33>>2];
   $35 = $32 + $34;
   $$sroa$0$4$sroa_raw_idx = ((($$sroa$0)) + 4|0);
   HEAPF32[$$sroa$0$4$sroa_raw_idx>>2] = $35;
   break;
  }
  case -101:  {
   $36 = +HEAPF32[$2>>2];
   $37 = +HEAPF32[$3>>2];
   $38 = $36 - $37;
   HEAPF32[$$sroa$0>>2] = $38;
   $39 = ((($2)) + 4|0);
   $40 = +HEAPF32[$39>>2];
   $41 = ((($3)) + 4|0);
   $42 = +HEAPF32[$41>>2];
   $43 = $40 - $42;
   $$sroa$0$4$sroa_raw_idx52 = ((($$sroa$0)) + 4|0);
   HEAPF32[$$sroa$0$4$sroa_raw_idx52>>2] = $43;
   break;
  }
  case -100:  {
   $44 = +HEAPF32[$2>>2];
   $45 = +HEAPF32[$3>>2];
   $46 = $44 * $45;
   HEAPF32[$$sroa$0>>2] = $46;
   $47 = ((($2)) + 4|0);
   $48 = +HEAPF32[$47>>2];
   $49 = ((($3)) + 4|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $48 * $50;
   $$sroa$0$4$sroa_raw_idx55 = ((($$sroa$0)) + 4|0);
   HEAPF32[$$sroa$0$4$sroa_raw_idx55>>2] = $51;
   break;
  }
  case -99:  {
   $52 = +HEAPF32[$2>>2];
   $53 = +HEAPF32[$3>>2];
   $54 = $52 / $53;
   HEAPF32[$$sroa$0>>2] = $54;
   $55 = ((($2)) + 4|0);
   $56 = +HEAPF32[$55>>2];
   $57 = ((($3)) + 4|0);
   $58 = +HEAPF32[$57>>2];
   $59 = $56 / $58;
   $$sroa$0$4$sroa_raw_idx58 = ((($$sroa$0)) + 4|0);
   HEAPF32[$$sroa$0$4$sroa_raw_idx58>>2] = $59;
   break;
  }
  default: {
   $60 = $1&255;
   $61 = HEAP32[482]|0;
   HEAP32[$vararg_buffer>>2] = 8998;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 9031;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 114;
   (_fprintf($61,27188,$vararg_buffer)|0);
   HEAP32[$vararg_buffer3>>2] = $60;
   (_fprintf($61,9048,$vararg_buffer3)|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 if ((label|0) == 3) {
  $4 = +HEAPF64[$2>>3];
  $5 = +HEAPF64[$3>>3];
  $6 = $4 + $5;
  HEAPF64[$$sroa$0>>3] = $6;
 }
 $$sroa$0$0$$sroa$0$0$$sroa$0$0$copyload = +HEAPF64[$$sroa$0>>3];
 HEAPF64[$0>>3] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$copyload;
 STACKTOP = sp;return;
}
function _comparacion_ALU_FP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$in = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 do {
  switch ($0<<24>>24) {
  case -106: case 0:  {
   $3 = +HEAPF64[$1>>3];
   $4 = +HEAPF64[$2>>3];
   $5 = $3 == $4;
   $$0$in = $5;
   break;
  }
  case -105:  {
   $6 = +HEAPF64[$1>>3];
   $7 = +HEAPF64[$2>>3];
   $8 = $6 != $7;
   $$0$in = $8;
   break;
  }
  case -107:  {
   $9 = +HEAPF64[$1>>3];
   $10 = +HEAPF64[$2>>3];
   $11 = $9 < $10;
   $$0$in = $11;
   break;
  }
  case -104:  {
   $12 = +HEAPF64[$1>>3];
   $13 = +HEAPF64[$2>>3];
   $14 = $12 <= $13;
   $$0$in = $14;
   break;
  }
  case -108:  {
   $15 = +HEAPF64[$1>>3];
   $16 = +HEAPF64[$2>>3];
   $17 = $15 > $16;
   $$0$in = $17;
   break;
  }
  case -103:  {
   $18 = +HEAPF64[$1>>3];
   $19 = +HEAPF64[$2>>3];
   $20 = $18 >= $19;
   $$0$in = $20;
   break;
  }
  case -119:  {
   $21 = +HEAPF32[$1>>2];
   $22 = +HEAPF32[$2>>2];
   $23 = $21 == $22;
   $$0$in = $23;
   break;
  }
  case -118:  {
   $24 = +HEAPF32[$1>>2];
   $25 = +HEAPF32[$2>>2];
   $26 = $24 != $25;
   $$0$in = $26;
   break;
  }
  case -120:  {
   $27 = +HEAPF32[$1>>2];
   $28 = +HEAPF32[$2>>2];
   $29 = $27 < $28;
   $$0$in = $29;
   break;
  }
  case -117:  {
   $30 = +HEAPF32[$1>>2];
   $31 = +HEAPF32[$2>>2];
   $32 = $30 <= $31;
   $$0$in = $32;
   break;
  }
  case -121:  {
   $33 = +HEAPF32[$1>>2];
   $34 = +HEAPF32[$2>>2];
   $35 = $33 > $34;
   $$0$in = $35;
   break;
  }
  case -116:  {
   $36 = +HEAPF32[$1>>2];
   $37 = +HEAPF32[$2>>2];
   $38 = $36 >= $37;
   $$0$in = $38;
   break;
  }
  default: {
   $39 = $0&255;
   $40 = HEAP32[482]|0;
   HEAP32[$vararg_buffer>>2] = 8998;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 9082;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 184;
   (_fprintf($40,27188,$vararg_buffer)|0);
   HEAP32[$vararg_buffer3>>2] = $39;
   (_fprintf($40,9101,$vararg_buffer3)|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 $41 = $$0$in&1;
 tempRet0 = (0);
 STACKTOP = sp;return ($41|0);
}
function _mux_FP_LSsup($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199562] = 0;
 HEAP32[199561] = 0;
 $6 = (_hay_destino_MEM()|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = (_hay_fuente1_LS1()|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = HEAP8[(56640)>>0]|0;
   $11 = HEAP8[(55754)>>0]|0;
   $12 = ($10<<24>>24)==($11<<24>>24);
   if ($12) {
    HEAP32[199561] = 1;
    $13 = (56824);
    $14 = $13;
    $15 = HEAP32[$14>>2]|0;
    $16 = (($13) + 4)|0;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (55912);
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($19) + 4)|0;
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    _write_log_2(9137,$15,$18,$21,$24,9153,27323);
    $44 = $3;$45 = $2;
    tempRet0 = ($44);
    return ($45|0);
   }
  }
 }
 $25 = (_hay_destino_WB()|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $44 = $1;$45 = $0;
  tempRet0 = ($44);
  return ($45|0);
 }
 $27 = (_hay_fuente1_LS1()|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $44 = $1;$45 = $0;
  tempRet0 = ($44);
  return ($45|0);
 }
 $29 = HEAP8[(56640)>>0]|0;
 $30 = HEAP8[(56114)>>0]|0;
 $31 = ($29<<24>>24)==($30<<24>>24);
 if (!($31)) {
  $44 = $1;$45 = $0;
  tempRet0 = ($44);
  return ($45|0);
 }
 HEAP32[199562] = 1;
 $32 = (56824);
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (56264);
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 _write_log_2(9156,$34,$37,$40,$43,9153,27344);
 $44 = $5;$45 = $4;
 tempRet0 = ($44);
 return ($45|0);
}
function _mux_FP_LSinf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199567] = 0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hay_destino_FP_WB()|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $36 = $5;$39 = $8;
 } else {
  $11 = (_hay_fuente2_LS1()|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $36 = $5;$39 = $8;
  } else {
   $13 = HEAP8[(56641)>>0]|0;
   $14 = HEAP8[(75482)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199567] = 1;
    $16 = $2;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (56824);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (75624);
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    _write_log_2(9171,$24,$27,$30,$33,9189,9195);
    $36 = $18;$39 = $21;
   } else {
    $36 = $5;$39 = $8;
   }
  }
 }
 $34 = $0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = (($34) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 return;
}
function _mux_FP_ADDinf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199563] = 0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hay_destino_FP_WB()|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $36 = $5;$39 = $8;
 } else {
  $11 = (_hay_fuente2_A1()|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $36 = $5;$39 = $8;
  } else {
   $13 = HEAP8[(57265)>>0]|0;
   $14 = HEAP8[(75482)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199563] = 1;
    $16 = $2;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (57448);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (75624);
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    _write_log_2(9201,$24,$27,$30,$33,9218,9195);
    $36 = $18;$39 = $21;
   } else {
    $36 = $5;$39 = $8;
   }
  }
 }
 $34 = $0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = (($34) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 return;
}
function _mux_FP_ADDsup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199564] = 0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hay_destino_FP_WB()|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $36 = $5;$39 = $8;
 } else {
  $11 = (_hay_fuente1_A1()|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $36 = $5;$39 = $8;
  } else {
   $13 = HEAP8[(57264)>>0]|0;
   $14 = HEAP8[(75482)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199564] = 1;
    $16 = $2;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (57448);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (75624);
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    _write_log_2(9225,$24,$27,$30,$33,9218,9195);
    $36 = $18;$39 = $21;
   } else {
    $36 = $5;$39 = $8;
   }
  }
 }
 $34 = $0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = (($34) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 return;
}
function _mux_FP_CMPsup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199569] = 0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hay_destino_FP_WB()|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $36 = $5;$39 = $8;
 } else {
  $11 = (_hay_fuente1_C1()|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $36 = $5;$39 = $8;
  } else {
   $13 = HEAP8[(58096)>>0]|0;
   $14 = HEAP8[(75482)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199569] = 1;
    $16 = $2;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (58280);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (75624);
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    _write_log_2(9242,$24,$27,$30,$33,9259,9195);
    $36 = $18;$39 = $21;
   } else {
    $36 = $5;$39 = $8;
   }
  }
 }
 $34 = $0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = (($34) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 return;
}
function _mux_FP_CMPinf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199568] = 0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hay_destino_FP_WB()|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $36 = $5;$39 = $8;
 } else {
  $11 = (_hay_fuente2_C1()|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $36 = $5;$39 = $8;
  } else {
   $13 = HEAP8[(58097)>>0]|0;
   $14 = HEAP8[(75482)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199568] = 1;
    $16 = $2;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (58280);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (75624);
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    _write_log_2(9266,$24,$27,$30,$33,9259,9195);
    $36 = $18;$39 = $21;
   } else {
    $36 = $5;$39 = $8;
   }
  }
 }
 $34 = $0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = (($34) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 return;
}
function _mux_FP_MULsup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199565] = 0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hay_destino_FP_WB()|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $36 = $5;$39 = $8;
 } else {
  $11 = (_hay_fuente1_M1()|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $36 = $5;$39 = $8;
  } else {
   $13 = HEAP8[(57680)>>0]|0;
   $14 = HEAP8[(75482)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199565] = 1;
    $16 = $2;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (57864);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (75624);
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    _write_log_2(9283,$24,$27,$30,$33,9300,9195);
    $36 = $18;$39 = $21;
   } else {
    $36 = $5;$39 = $8;
   }
  }
 }
 $34 = $0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = (($34) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 return;
}
function _mux_FP_MULinf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199565] = 0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hay_destino_FP_WB()|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $36 = $5;$39 = $8;
 } else {
  $11 = (_hay_fuente2_M1()|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $36 = $5;$39 = $8;
  } else {
   $13 = HEAP8[(57681)>>0]|0;
   $14 = HEAP8[(75482)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199565] = 1;
    $16 = $2;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (57864);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = (75624);
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    _write_log_2(9307,$24,$27,$30,$33,9300,9195);
    $36 = $18;$39 = $21;
   } else {
    $36 = $5;$39 = $8;
   }
  }
 }
 $34 = $0;
 $35 = $34;
 HEAP32[$35>>2] = $36;
 $37 = (($34) + 4)|0;
 $38 = $37;
 HEAP32[$38>>2] = $39;
 return;
}
function _mux_FP_WB($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload11 = 0, $$sroa$0$0$copyload13 = 0, $$sroa$0$0$copyload7 = 0, $$sroa$0$0$copyload9 = 0, $$sroa$0$1 = 0, $$sroa$0$2 = 0, $$sroa$0$3 = 0, $$sroa$10$0 = 0, $$sroa$10$0$$sroa_idx = 0, $$sroa$10$0$$sroa_idx47 = 0, $$sroa$10$0$$sroa_idx49 = 0, $$sroa$10$0$$sroa_idx51 = 0, $$sroa$10$0$$sroa_idx53 = 0, $$sroa$10$0$copyload48 = 0, $$sroa$10$0$copyload50 = 0;
 var $$sroa$10$0$copyload52 = 0, $$sroa$10$0$copyload54 = 0, $$sroa$10$1 = 0, $$sroa$10$2 = 0, $$sroa$10$3 = 0, $$sroa$11$0 = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx55 = 0, $$sroa$11$0$$sroa_idx57 = 0, $$sroa$11$0$$sroa_idx59 = 0, $$sroa$11$0$$sroa_idx61 = 0, $$sroa$11$0$copyload56 = 0, $$sroa$11$0$copyload58 = 0, $$sroa$11$0$copyload60 = 0, $$sroa$11$0$copyload62 = 0, $$sroa$11$1 = 0, $$sroa$11$2 = 0, $$sroa$11$3 = 0, $$sroa$12$sroa$0$0 = 0, $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx$sroa_raw_idx = 0;
 var $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx66$sroa_raw_idx = 0, $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx69$sroa_raw_idx = 0, $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx72$sroa_raw_idx = 0, $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx75$sroa_raw_idx = 0, $$sroa$12$sroa$0$0$copyload117 = 0, $$sroa$12$sroa$0$0$copyload118 = 0, $$sroa$12$sroa$0$0$copyload119 = 0, $$sroa$12$sroa$0$0$copyload120 = 0, $$sroa$12$sroa$0$1 = 0, $$sroa$12$sroa$0$2 = 0, $$sroa$12$sroa$0$3 = 0, $$sroa$1277$0 = 0, $$sroa$1277$0$$sroa_idx78 = 0, $$sroa$1277$0$$sroa_idx80 = 0, $$sroa$1277$0$$sroa_idx82 = 0, $$sroa$1277$0$$sroa_idx84 = 0, $$sroa$1277$0$$sroa_idx86 = 0, $$sroa$1277$0$copyload81 = 0, $$sroa$1277$0$copyload83 = 0, $$sroa$1277$0$copyload85 = 0;
 var $$sroa$1277$0$copyload87 = 0, $$sroa$1277$1 = 0, $$sroa$1277$2 = 0, $$sroa$1277$3 = 0, $$sroa$13 = 0, $$sroa$13$0$$sroa_idx = 0, $$sroa$13$0$$sroa_idx90 = 0, $$sroa$13$0$$sroa_idx92 = 0, $$sroa$13$0$$sroa_idx94 = 0, $$sroa$13$0$$sroa_idx96 = 0, $$sroa$1398$0 = 0.0, $$sroa$1398$0$$sroa_idx99 = 0, $$sroa$1398$1 = 0.0, $$sroa$1398$144$$sroa_idx = 0, $$sroa$1398$144$$sroa_idx101 = 0, $$sroa$1398$144$$sroa_idx104 = 0, $$sroa$1398$144$$sroa_idx107 = 0, $$sroa$1398$144$copyload = 0.0, $$sroa$1398$144$copyload103 = 0.0, $$sroa$1398$144$copyload106 = 0.0;
 var $$sroa$1398$144$copyload109 = 0.0, $$sroa$1398$2 = 0.0, $$sroa$1398$3 = 0.0, $$sroa$18$0$$sroa_idx110 = 0, $$sroa$23$0 = 0, $$sroa$23$0$$sroa_idx112 = 0, $$sroa$23$1 = 0, $$sroa$23$2 = 0, $$sroa$23$3 = 0, $$sroa$8 = 0, $$sroa$8$0$$sroa_raw_idx = 0, $$sroa$8$0$$sroa_raw_idx17 = 0, $$sroa$8$0$$sroa_raw_idx20 = 0, $$sroa$8$0$$sroa_raw_idx23 = 0, $$sroa$8$0$$sroa_raw_idx26 = 0, $$sroa$828$0 = 0, $$sroa$828$0$$sroa_idx29 = 0, $$sroa$828$0$$sroa_idx31 = 0, $$sroa$828$0$$sroa_idx33 = 0, $$sroa$828$0$$sroa_idx35 = 0;
 var $$sroa$828$0$$sroa_idx37 = 0, $$sroa$828$0$copyload32 = 0, $$sroa$828$0$copyload34 = 0, $$sroa$828$0$copyload36 = 0, $$sroa$828$0$copyload38 = 0, $$sroa$828$1 = 0, $$sroa$828$2 = 0, $$sroa$828$3 = 0, $$sroa$9$0 = 0, $$sroa$9$0$$sroa_idx = 0, $$sroa$9$0$$sroa_idx39 = 0, $$sroa$9$0$$sroa_idx41 = 0, $$sroa$9$0$$sroa_idx43 = 0, $$sroa$9$0$$sroa_idx45 = 0, $$sroa$9$0$copyload40 = 0, $$sroa$9$0$copyload42 = 0, $$sroa$9$0$copyload44 = 0, $$sroa$9$0$copyload46 = 0, $$sroa$9$1 = 0, $$sroa$9$2 = 0;
 var $$sroa$9$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer = sp;
 $$sroa$8 = sp + 142|0;
 $$sroa$13 = sp + 12|0;
 $5 = ((($1)) + 152|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==(-1);
 $13 = ($11|0)==(-1);
 $14 = $12 & $13;
 if ($14) {
  $$0 = 0;$$sroa$0$0 = 0;$$sroa$10$0 = 0;$$sroa$11$0 = 0;$$sroa$12$sroa$0$0 = 0;$$sroa$1277$0 = 0;$$sroa$1398$0 = 0.0;$$sroa$23$0 = 0;$$sroa$828$0 = 0;$$sroa$9$0 = 0;$64 = -1;$65 = -1;
 } else {
  $15 = ((($1)) + 160|0);
  $16 = HEAP32[$15>>2]|0;
  $$sroa$0$0$copyload11 = HEAP8[$1>>0]|0;
  $$sroa$8$0$$sroa_raw_idx23 = ((($1)) + 1|0);
  ;HEAP8[$$sroa$8>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx23>>0]|0;HEAP8[$$sroa$8+1>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx23+1>>0]|0;HEAP8[$$sroa$8+2>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx23+2>>0]|0;
  $$sroa$828$0$$sroa_idx35 = ((($1)) + 4|0);
  $$sroa$828$0$copyload36 = HEAP32[$$sroa$828$0$$sroa_idx35>>2]|0;
  $$sroa$9$0$$sroa_idx43 = ((($1)) + 8|0);
  $$sroa$9$0$copyload44 = HEAP8[$$sroa$9$0$$sroa_idx43>>0]|0;
  $$sroa$10$0$$sroa_idx51 = ((($1)) + 9|0);
  $$sroa$10$0$copyload52 = HEAP8[$$sroa$10$0$$sroa_idx51>>0]|0;
  $$sroa$11$0$$sroa_idx59 = ((($1)) + 10|0);
  $$sroa$11$0$copyload60 = HEAP8[$$sroa$11$0$$sroa_idx59>>0]|0;
  $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx72$sroa_raw_idx = ((($1)) + 11|0);
  $$sroa$12$sroa$0$0$copyload119 = HEAP8[$$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx72$sroa_raw_idx>>0]|0;
  $$sroa$1277$0$$sroa_idx84 = ((($1)) + 12|0);
  $$sroa$1277$0$copyload85 = HEAP16[$$sroa$1277$0$$sroa_idx84>>1]|0;
  $$sroa$13$0$$sroa_idx94 = ((($1)) + 14|0);
  _memcpy(($$sroa$13|0),($$sroa$13$0$$sroa_idx94|0),130)|0;
  $$sroa$1398$144$$sroa_idx107 = ((($1)) + 144|0);
  $$sroa$1398$144$copyload109 = +HEAPF64[$$sroa$1398$144$$sroa_idx107>>3];
  $$0 = 1;$$sroa$0$0 = $$sroa$0$0$copyload11;$$sroa$10$0 = $$sroa$10$0$copyload52;$$sroa$11$0 = $$sroa$11$0$copyload60;$$sroa$12$sroa$0$0 = $$sroa$12$sroa$0$0$copyload119;$$sroa$1277$0 = $$sroa$1277$0$copyload85;$$sroa$1398$0 = $$sroa$1398$144$copyload109;$$sroa$23$0 = $16;$$sroa$828$0 = $$sroa$828$0$copyload36;$$sroa$9$0 = $$sroa$9$0$copyload44;$64 = $8;$65 = $11;
 }
 $17 = ((($2)) + 152|0);
 $18 = $17;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = ($20|0)==(-1);
 $25 = ($23|0)==(-1);
 $26 = $24 & $25;
 if ($26) {
  $$1 = $$0;$$sroa$0$1 = $$sroa$0$0;$$sroa$10$1 = $$sroa$10$0;$$sroa$11$1 = $$sroa$11$0;$$sroa$12$sroa$0$1 = $$sroa$12$sroa$0$0;$$sroa$1277$1 = $$sroa$1277$0;$$sroa$1398$1 = $$sroa$1398$0;$$sroa$23$1 = $$sroa$23$0;$$sroa$828$1 = $$sroa$828$0;$$sroa$9$1 = $$sroa$9$0;$66 = $64;$67 = $65;
 } else {
  $27 = ((($2)) + 160|0);
  $28 = HEAP32[$27>>2]|0;
  $$sroa$0$0$copyload9 = HEAP8[$2>>0]|0;
  $$sroa$8$0$$sroa_raw_idx20 = ((($2)) + 1|0);
  ;HEAP8[$$sroa$8>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx20>>0]|0;HEAP8[$$sroa$8+1>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx20+1>>0]|0;HEAP8[$$sroa$8+2>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx20+2>>0]|0;
  $$sroa$828$0$$sroa_idx33 = ((($2)) + 4|0);
  $$sroa$828$0$copyload34 = HEAP32[$$sroa$828$0$$sroa_idx33>>2]|0;
  $$sroa$9$0$$sroa_idx41 = ((($2)) + 8|0);
  $$sroa$9$0$copyload42 = HEAP8[$$sroa$9$0$$sroa_idx41>>0]|0;
  $$sroa$10$0$$sroa_idx49 = ((($2)) + 9|0);
  $$sroa$10$0$copyload50 = HEAP8[$$sroa$10$0$$sroa_idx49>>0]|0;
  $$sroa$11$0$$sroa_idx57 = ((($2)) + 10|0);
  $$sroa$11$0$copyload58 = HEAP8[$$sroa$11$0$$sroa_idx57>>0]|0;
  $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx69$sroa_raw_idx = ((($2)) + 11|0);
  $$sroa$12$sroa$0$0$copyload118 = HEAP8[$$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx69$sroa_raw_idx>>0]|0;
  $$sroa$1277$0$$sroa_idx82 = ((($2)) + 12|0);
  $$sroa$1277$0$copyload83 = HEAP16[$$sroa$1277$0$$sroa_idx82>>1]|0;
  $$sroa$13$0$$sroa_idx92 = ((($2)) + 14|0);
  _memcpy(($$sroa$13|0),($$sroa$13$0$$sroa_idx92|0),130)|0;
  $$sroa$1398$144$$sroa_idx104 = ((($2)) + 144|0);
  $$sroa$1398$144$copyload106 = +HEAPF64[$$sroa$1398$144$$sroa_idx104>>3];
  $29 = (($$0) + 1)|0;
  $$1 = $29;$$sroa$0$1 = $$sroa$0$0$copyload9;$$sroa$10$1 = $$sroa$10$0$copyload50;$$sroa$11$1 = $$sroa$11$0$copyload58;$$sroa$12$sroa$0$1 = $$sroa$12$sroa$0$0$copyload118;$$sroa$1277$1 = $$sroa$1277$0$copyload83;$$sroa$1398$1 = $$sroa$1398$144$copyload106;$$sroa$23$1 = $28;$$sroa$828$1 = $$sroa$828$0$copyload34;$$sroa$9$1 = $$sroa$9$0$copyload42;$66 = $20;$67 = $23;
 }
 $30 = ((($3)) + 152|0);
 $31 = $30;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = (($31) + 4)|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($33|0)==(-1);
 $38 = ($36|0)==(-1);
 $39 = $37 & $38;
 if ($39) {
  $$2 = $$1;$$sroa$0$2 = $$sroa$0$1;$$sroa$10$2 = $$sroa$10$1;$$sroa$11$2 = $$sroa$11$1;$$sroa$12$sroa$0$2 = $$sroa$12$sroa$0$1;$$sroa$1277$2 = $$sroa$1277$1;$$sroa$1398$2 = $$sroa$1398$1;$$sroa$23$2 = $$sroa$23$1;$$sroa$828$2 = $$sroa$828$1;$$sroa$9$2 = $$sroa$9$1;$68 = $66;$69 = $67;
 } else {
  $40 = ((($3)) + 160|0);
  $41 = HEAP32[$40>>2]|0;
  $$sroa$0$0$copyload7 = HEAP8[$3>>0]|0;
  $$sroa$8$0$$sroa_raw_idx17 = ((($3)) + 1|0);
  ;HEAP8[$$sroa$8>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx17>>0]|0;HEAP8[$$sroa$8+1>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx17+1>>0]|0;HEAP8[$$sroa$8+2>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx17+2>>0]|0;
  $$sroa$828$0$$sroa_idx31 = ((($3)) + 4|0);
  $$sroa$828$0$copyload32 = HEAP32[$$sroa$828$0$$sroa_idx31>>2]|0;
  $$sroa$9$0$$sroa_idx39 = ((($3)) + 8|0);
  $$sroa$9$0$copyload40 = HEAP8[$$sroa$9$0$$sroa_idx39>>0]|0;
  $$sroa$10$0$$sroa_idx47 = ((($3)) + 9|0);
  $$sroa$10$0$copyload48 = HEAP8[$$sroa$10$0$$sroa_idx47>>0]|0;
  $$sroa$11$0$$sroa_idx55 = ((($3)) + 10|0);
  $$sroa$11$0$copyload56 = HEAP8[$$sroa$11$0$$sroa_idx55>>0]|0;
  $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx66$sroa_raw_idx = ((($3)) + 11|0);
  $$sroa$12$sroa$0$0$copyload117 = HEAP8[$$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx66$sroa_raw_idx>>0]|0;
  $$sroa$1277$0$$sroa_idx80 = ((($3)) + 12|0);
  $$sroa$1277$0$copyload81 = HEAP16[$$sroa$1277$0$$sroa_idx80>>1]|0;
  $$sroa$13$0$$sroa_idx90 = ((($3)) + 14|0);
  _memcpy(($$sroa$13|0),($$sroa$13$0$$sroa_idx90|0),130)|0;
  $$sroa$1398$144$$sroa_idx101 = ((($3)) + 144|0);
  $$sroa$1398$144$copyload103 = +HEAPF64[$$sroa$1398$144$$sroa_idx101>>3];
  $42 = (($$1) + 1)|0;
  $$2 = $42;$$sroa$0$2 = $$sroa$0$0$copyload7;$$sroa$10$2 = $$sroa$10$0$copyload48;$$sroa$11$2 = $$sroa$11$0$copyload56;$$sroa$12$sroa$0$2 = $$sroa$12$sroa$0$0$copyload117;$$sroa$1277$2 = $$sroa$1277$0$copyload81;$$sroa$1398$2 = $$sroa$1398$144$copyload103;$$sroa$23$2 = $41;$$sroa$828$2 = $$sroa$828$0$copyload32;$$sroa$9$2 = $$sroa$9$0$copyload40;$68 = $33;$69 = $36;
 }
 $43 = ((($4)) + 152|0);
 $44 = $43;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($46|0)==(-1);
 $51 = ($49|0)==(-1);
 $52 = $50 & $51;
 if ($52) {
  $$3 = $$2;$$sroa$0$3 = $$sroa$0$2;$$sroa$10$3 = $$sroa$10$2;$$sroa$11$3 = $$sroa$11$2;$$sroa$12$sroa$0$3 = $$sroa$12$sroa$0$2;$$sroa$1277$3 = $$sroa$1277$2;$$sroa$1398$3 = $$sroa$1398$2;$$sroa$23$3 = $$sroa$23$2;$$sroa$828$3 = $$sroa$828$2;$$sroa$9$3 = $$sroa$9$2;$60 = $68;$63 = $69;
 } else {
  $53 = ((($4)) + 160|0);
  $54 = HEAP32[$53>>2]|0;
  $$sroa$0$0$copyload13 = HEAP8[$4>>0]|0;
  $$sroa$8$0$$sroa_raw_idx26 = ((($4)) + 1|0);
  ;HEAP8[$$sroa$8>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx26>>0]|0;HEAP8[$$sroa$8+1>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx26+1>>0]|0;HEAP8[$$sroa$8+2>>0]=HEAP8[$$sroa$8$0$$sroa_raw_idx26+2>>0]|0;
  $$sroa$828$0$$sroa_idx37 = ((($4)) + 4|0);
  $$sroa$828$0$copyload38 = HEAP32[$$sroa$828$0$$sroa_idx37>>2]|0;
  $$sroa$9$0$$sroa_idx45 = ((($4)) + 8|0);
  $$sroa$9$0$copyload46 = HEAP8[$$sroa$9$0$$sroa_idx45>>0]|0;
  $$sroa$10$0$$sroa_idx53 = ((($4)) + 9|0);
  $$sroa$10$0$copyload54 = HEAP8[$$sroa$10$0$$sroa_idx53>>0]|0;
  $$sroa$11$0$$sroa_idx61 = ((($4)) + 10|0);
  $$sroa$11$0$copyload62 = HEAP8[$$sroa$11$0$$sroa_idx61>>0]|0;
  $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx75$sroa_raw_idx = ((($4)) + 11|0);
  $$sroa$12$sroa$0$0$copyload120 = HEAP8[$$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx75$sroa_raw_idx>>0]|0;
  $$sroa$1277$0$$sroa_idx86 = ((($4)) + 12|0);
  $$sroa$1277$0$copyload87 = HEAP16[$$sroa$1277$0$$sroa_idx86>>1]|0;
  $$sroa$13$0$$sroa_idx96 = ((($4)) + 14|0);
  _memcpy(($$sroa$13|0),($$sroa$13$0$$sroa_idx96|0),130)|0;
  $$sroa$1398$144$$sroa_idx = ((($4)) + 144|0);
  $$sroa$1398$144$copyload = +HEAPF64[$$sroa$1398$144$$sroa_idx>>3];
  $55 = (($$2) + 1)|0;
  $$3 = $55;$$sroa$0$3 = $$sroa$0$0$copyload13;$$sroa$10$3 = $$sroa$10$0$copyload54;$$sroa$11$3 = $$sroa$11$0$copyload62;$$sroa$12$sroa$0$3 = $$sroa$12$sroa$0$0$copyload120;$$sroa$1277$3 = $$sroa$1277$0$copyload87;$$sroa$1398$3 = $$sroa$1398$144$copyload;$$sroa$23$3 = $54;$$sroa$828$3 = $$sroa$828$0$copyload38;$$sroa$9$3 = $$sroa$9$0$copyload46;$60 = $46;$63 = $49;
 }
 $56 = ($$3|0)>(1);
 if ($56) {
  $57 = HEAP32[482]|0;
  HEAP32[$vararg_buffer>>2] = 8998;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 9324;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 533;
  (_fprintf($57,27188,$vararg_buffer)|0);
  (_fwrite(9334,34,1,$57)|0);
  _exit(1);
  // unreachable;
 } else {
  HEAP8[$0>>0] = $$sroa$0$3;
  $$sroa$8$0$$sroa_raw_idx = ((($0)) + 1|0);
  ;HEAP8[$$sroa$8$0$$sroa_raw_idx>>0]=HEAP8[$$sroa$8>>0]|0;HEAP8[$$sroa$8$0$$sroa_raw_idx+1>>0]=HEAP8[$$sroa$8+1>>0]|0;HEAP8[$$sroa$8$0$$sroa_raw_idx+2>>0]=HEAP8[$$sroa$8+2>>0]|0;
  $$sroa$828$0$$sroa_idx29 = ((($0)) + 4|0);
  HEAP32[$$sroa$828$0$$sroa_idx29>>2] = $$sroa$828$3;
  $$sroa$9$0$$sroa_idx = ((($0)) + 8|0);
  HEAP8[$$sroa$9$0$$sroa_idx>>0] = $$sroa$9$3;
  $$sroa$10$0$$sroa_idx = ((($0)) + 9|0);
  HEAP8[$$sroa$10$0$$sroa_idx>>0] = $$sroa$10$3;
  $$sroa$11$0$$sroa_idx = ((($0)) + 10|0);
  HEAP8[$$sroa$11$0$$sroa_idx>>0] = $$sroa$11$3;
  $$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx$sroa_raw_idx = ((($0)) + 11|0);
  HEAP8[$$sroa$12$sroa$0$0$$sroa$12$0$$sroa_raw_idx$sroa_raw_idx>>0] = $$sroa$12$sroa$0$3;
  $$sroa$1277$0$$sroa_idx78 = ((($0)) + 12|0);
  HEAP16[$$sroa$1277$0$$sroa_idx78>>1] = $$sroa$1277$3;
  $$sroa$13$0$$sroa_idx = ((($0)) + 14|0);
  _memcpy(($$sroa$13$0$$sroa_idx|0),($$sroa$13|0),130)|0;
  $$sroa$1398$0$$sroa_idx99 = ((($0)) + 144|0);
  HEAPF64[$$sroa$1398$0$$sroa_idx99>>3] = $$sroa$1398$3;
  $$sroa$18$0$$sroa_idx110 = ((($0)) + 152|0);
  $58 = $$sroa$18$0$$sroa_idx110;
  $59 = $58;
  HEAP32[$59>>2] = $60;
  $61 = (($58) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = $63;
  $$sroa$23$0$$sroa_idx112 = ((($0)) + 160|0);
  HEAP32[$$sroa$23$0$$sroa_idx112>>2] = $$sroa$23$3;
  STACKTOP = sp;return;
 }
}
function _fase_LS($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy5 = sp + 56|0;
 $$byval_copy = sp + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 64|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 24|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = $0 << 16 >> 16;
 $9 = ($0<<16>>16)==(1);
 if ($9) {
  $10 = (56784);
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (60856);
  $17 = $16;
  HEAP32[$17>>2] = $12;
  $18 = (($16) + 4)|0;
  $19 = $18;
  HEAP32[$19>>2] = $15;
  ;HEAP32[$$byval_copy>>2]=HEAP32[(56792)>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[(56792)+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[(75616)+4>>2]|0;
  _mux_FP_LSinf($3,$$byval_copy,$$byval_copy5);
  $20 = $3;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (60864);
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $25;
  $30 = (56800);
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (55888);
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($36) + 4)|0;
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (56256);
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) + 4)|0;
  $46 = $45;
  $47 = HEAP32[$46>>2]|0;
  $48 = (_mux_FP_LSsup($32,$35,$38,$41,$44,$47)|0);
  $49 = tempRet0;
  $50 = (56816);
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (_i64Add(($52|0),($55|0),($48|0),($49|0))|0);
  $57 = tempRet0;
  $58 = (60872);
  $59 = $58;
  HEAP32[$59>>2] = $56;
  $60 = (($58) + 4)|0;
  $61 = $60;
  HEAP32[$61>>2] = $57;
  _memcpy(((60696)|0),(56632|0),144)|0;
  $62 = (56824);
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($62) + 4)|0;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (60880);
  $69 = $68;
  HEAP32[$69>>2] = $64;
  $70 = (($68) + 4)|0;
  $71 = $70;
  HEAP32[$71>>2] = $67;
  $72 = HEAP32[(56832)>>2]|0;
  HEAP32[(60888)>>2] = $72;
  STACKTOP = sp;return;
 }
 $73 = HEAP32[21]|0;
 $74 = ($8|0)==($73|0);
 if (!($74)) {
  $203 = (($8) + 1)|0;
  $204 = (((60296 + (($203*200)|0)|0)) + 160|0);
  $205 = (((58296 + (($8*200)|0)|0)) + 168|0);
  $206 = $205;
  $207 = $206;
  $208 = HEAP32[$207>>2]|0;
  $209 = (($206) + 4)|0;
  $210 = $209;
  $211 = HEAP32[$210>>2]|0;
  $212 = $204;
  $213 = $212;
  HEAP32[$213>>2] = $208;
  $214 = (($212) + 4)|0;
  $215 = $214;
  HEAP32[$215>>2] = $211;
  $216 = (((58296 + (($8*200)|0)|0)) + 176|0);
  $217 = $216;
  $218 = $217;
  $219 = HEAP32[$218>>2]|0;
  $220 = (($217) + 4)|0;
  $221 = $220;
  $222 = HEAP32[$221>>2]|0;
  $223 = (((60296 + (($203*200)|0)|0)) + 176|0);
  $224 = $223;
  $225 = $224;
  HEAP32[$225>>2] = $219;
  $226 = (($224) + 4)|0;
  $227 = $226;
  HEAP32[$227>>2] = $222;
  $228 = (60296 + (($203*200)|0)|0);
  $229 = (58296 + (($8*200)|0)|0);
  _memcpy(($228|0),($229|0),144)|0;
  $230 = (((58296 + (($8*200)|0)|0)) + 184|0);
  $231 = $230;
  $232 = $231;
  $233 = HEAP32[$232>>2]|0;
  $234 = (($231) + 4)|0;
  $235 = $234;
  $236 = HEAP32[$235>>2]|0;
  $237 = (((60296 + (($203*200)|0)|0)) + 184|0);
  $238 = $237;
  $239 = $238;
  HEAP32[$239>>2] = $233;
  $240 = (($238) + 4)|0;
  $241 = $240;
  HEAP32[$241>>2] = $236;
  $242 = (((58296 + (($8*200)|0)|0)) + 192|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (((60296 + (($203*200)|0)|0)) + 192|0);
  HEAP32[$244>>2] = $243;
  STACKTOP = sp;return;
 }
 $75 = (58296 + (($8*200)|0)|0);
 _memcpy((74296|0),($75|0),144)|0;
 $76 = (((58296 + (($8*200)|0)|0)) + 184|0);
 $77 = $76;
 $78 = $77;
 $79 = HEAP32[$78>>2]|0;
 $80 = (($77) + 4)|0;
 $81 = $80;
 $82 = HEAP32[$81>>2]|0;
 $83 = (74448);
 $84 = $83;
 HEAP32[$84>>2] = $79;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $82;
 $87 = (((58296 + (($8*200)|0)|0)) + 192|0);
 $88 = HEAP32[$87>>2]|0;
 HEAP32[(74456)>>2] = $88;
 $89 = HEAP8[$75>>0]|0;
 switch ($89<<24>>24) {
 case -115:  {
  $90 = (((58296 + (($8*200)|0)|0)) + 176|0);
  $91 = $90;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  _lee_mem_datos($4,$93,$96,8,$2);
  $97 = $4;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  $100 = (($97) + 4)|0;
  $101 = $100;
  $102 = HEAP32[$101>>2]|0;
  $103 = $1;
  $104 = $103;
  HEAP32[$104>>2] = $99;
  $105 = (($103) + 4)|0;
  $106 = $105;
  HEAP32[$106>>2] = $102;
  $107 = (74440);
  $108 = $107;
  HEAP32[$108>>2] = $99;
  $109 = (($107) + 4)|0;
  $110 = $109;
  HEAP32[$110>>2] = $102;
  STACKTOP = sp;return;
  break;
 }
 case -128:  {
  $111 = (((58296 + (($8*200)|0)|0)) + 176|0);
  $112 = $111;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($112) + 4)|0;
  $116 = $115;
  $117 = HEAP32[$116>>2]|0;
  _lee_mem_datos($5,$114,$117,6,$2);
  $118 = $5;
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  $124 = $1;
  $125 = $124;
  HEAP32[$125>>2] = $120;
  $126 = (($124) + 4)|0;
  $127 = $126;
  HEAP32[$127>>2] = $123;
  $128 = HEAP32[$1>>2]|0;
  HEAP32[(74440)>>2] = $128;
  HEAPF32[((((74440)) + 4|0))>>2] = 0.0;
  STACKTOP = sp;return;
  break;
 }
 case -76:  {
  $129 = (((58296 + (($8*200)|0)|0)) + 176|0);
  $130 = $129;
  $131 = $130;
  $132 = HEAP32[$131>>2]|0;
  $133 = (($130) + 4)|0;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  _lee_mem_datos($6,$132,$135,6,$2);
  $136 = $6;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = (($136) + 4)|0;
  $140 = $139;
  $141 = HEAP32[$140>>2]|0;
  $142 = $1;
  $143 = $142;
  HEAP32[$143>>2] = $138;
  $144 = (($142) + 4)|0;
  $145 = $144;
  HEAP32[$145>>2] = $141;
  $146 = HEAP32[$1>>2]|0;
  HEAP32[(74440)>>2] = $146;
  $147 = $129;
  $148 = $147;
  $149 = HEAP32[$148>>2]|0;
  $150 = (($147) + 4)|0;
  $151 = $150;
  $152 = HEAP32[$151>>2]|0;
  $153 = (_i64Add(($149|0),($152|0),4,0)|0);
  $154 = tempRet0;
  _lee_mem_datos($7,$153,$154,6,$2);
  $155 = $7;
  $156 = $155;
  $157 = HEAP32[$156>>2]|0;
  $158 = (($155) + 4)|0;
  $159 = $158;
  $160 = HEAP32[$159>>2]|0;
  $161 = $1;
  $162 = $161;
  HEAP32[$162>>2] = $157;
  $163 = (($161) + 4)|0;
  $164 = $163;
  HEAP32[$164>>2] = $160;
  $165 = HEAP32[$1>>2]|0;
  HEAP32[((((74440)) + 4|0))>>2] = $165;
  STACKTOP = sp;return;
  break;
 }
 case -114:  {
  $166 = (((58296 + (($8*200)|0)|0)) + 168|0);
  $167 = +HEAPF64[$166>>3];
  HEAPF64[$1>>3] = $167;
  $168 = (((58296 + (($8*200)|0)|0)) + 176|0);
  $169 = $168;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = (($169) + 4)|0;
  $173 = $172;
  $174 = HEAP32[$173>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
  _escribe_mem_datos($171,$174,$$byval_copy5,8,1);
  _pasar_a_FP_LS_WB_NOP();
  STACKTOP = sp;return;
  break;
 }
 case -127:  {
  $175 = (((58296 + (($8*200)|0)|0)) + 168|0);
  $176 = HEAP32[$175>>2]|0;
  HEAP32[$1>>2] = $176;
  $177 = (((58296 + (($8*200)|0)|0)) + 176|0);
  $178 = $177;
  $179 = $178;
  $180 = HEAP32[$179>>2]|0;
  $181 = (($178) + 4)|0;
  $182 = $181;
  $183 = HEAP32[$182>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
  _escribe_mem_datos($180,$183,$$byval_copy5,6,1);
  _pasar_a_FP_LS_WB_NOP();
  STACKTOP = sp;return;
  break;
 }
 case -75:  {
  $184 = (((58296 + (($8*200)|0)|0)) + 168|0);
  $185 = HEAP32[$184>>2]|0;
  HEAP32[$1>>2] = $185;
  $186 = (((58296 + (($8*200)|0)|0)) + 176|0);
  $187 = $186;
  $188 = $187;
  $189 = HEAP32[$188>>2]|0;
  $190 = (($187) + 4)|0;
  $191 = $190;
  $192 = HEAP32[$191>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
  _escribe_mem_datos($189,$192,$$byval_copy5,6,1);
  $193 = ((($184)) + 4|0);
  $194 = HEAP32[$193>>2]|0;
  HEAP32[$1>>2] = $194;
  $195 = $186;
  $196 = $195;
  $197 = HEAP32[$196>>2]|0;
  $198 = (($195) + 4)|0;
  $199 = $198;
  $200 = HEAP32[$199>>2]|0;
  $201 = (_i64Add(($197|0),($200|0),4,0)|0);
  $202 = tempRet0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
  _escribe_mem_datos($201,$202,$$byval_copy5,6,1);
  _pasar_a_FP_LS_WB_NOP();
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _fase_A($0) {
 $0 = $0|0;
 var $$byval_copy4 = 0, $$byval_copy5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy5 = sp + 32|0;
 $$byval_copy4 = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = sp + 16|0;
 $4 = $0 << 16 >> 16;
 $5 = ($0<<16>>16)==(1);
 if ($5) {
  ;HEAP32[$$byval_copy4>>2]=HEAP32[(57408)>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[(57408)+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[(75616)+4>>2]|0;
  _mux_FP_ADDsup($1,$$byval_copy4,$$byval_copy5);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[(57416)>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[(57416)+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[(75616)+4>>2]|0;
  _mux_FP_ADDinf($2,$$byval_copy4,$$byval_copy5);
  $6 = HEAP8[57256]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$1+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$2+4>>2]|0;
  _operacion_ALU_FP($3,$6,$$byval_copy4,$$byval_copy5);
  $7 = $3;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (64848);
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  _memcpy(((64696)|0),(57256|0),144)|0;
  $17 = (57448);
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (64880);
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = HEAP32[(57456)>>2]|0;
  HEAP32[(64888)>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[18]|0;
 $29 = ($4|0)==($28|0);
 if ($29) {
  $30 = (((62296 + (($4*200)|0)|0)) + 152|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (74776);
  $38 = $37;
  HEAP32[$38>>2] = $33;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $36;
  $41 = (62296 + (($4*200)|0)|0);
  _memcpy((74632|0),($41|0),144)|0;
  $42 = (((62296 + (($4*200)|0)|0)) + 184|0);
  $43 = $42;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (74784);
  $50 = $49;
  HEAP32[$50>>2] = $45;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $53 = (((62296 + (($4*200)|0)|0)) + 192|0);
  $54 = HEAP32[$53>>2]|0;
  HEAP32[(74792)>>2] = $54;
  STACKTOP = sp;return;
 } else {
  $55 = (($4) + 1)|0;
  $56 = (((62296 + (($4*200)|0)|0)) + 152|0);
  $57 = (((64296 + (($55*200)|0)|0)) + 152|0);
  $58 = $56;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = $57;
  $65 = $64;
  HEAP32[$65>>2] = $60;
  $66 = (($64) + 4)|0;
  $67 = $66;
  HEAP32[$67>>2] = $63;
  $68 = (64296 + (($55*200)|0)|0);
  $69 = (62296 + (($4*200)|0)|0);
  _memcpy(($68|0),($69|0),144)|0;
  $70 = (((62296 + (($4*200)|0)|0)) + 184|0);
  $71 = $70;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (((64296 + (($55*200)|0)|0)) + 184|0);
  $78 = $77;
  $79 = $78;
  HEAP32[$79>>2] = $73;
  $80 = (($78) + 4)|0;
  $81 = $80;
  HEAP32[$81>>2] = $76;
  $82 = (((62296 + (($4*200)|0)|0)) + 192|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (((64296 + (($55*200)|0)|0)) + 192|0);
  HEAP32[$84>>2] = $83;
  STACKTOP = sp;return;
 }
}
function _fase_M($0) {
 $0 = $0|0;
 var $$byval_copy4 = 0, $$byval_copy5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy5 = sp + 32|0;
 $$byval_copy4 = sp + 24|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = sp + 16|0;
 $4 = $0 << 16 >> 16;
 $5 = ($0<<16>>16)==(1);
 if ($5) {
  ;HEAP32[$$byval_copy4>>2]=HEAP32[(57824)>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[(57824)+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[(75616)+4>>2]|0;
  _mux_FP_MULsup($1,$$byval_copy4,$$byval_copy5);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[(57832)>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[(57832)+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[(75616)+4>>2]|0;
  _mux_FP_MULinf($2,$$byval_copy4,$$byval_copy5);
  $6 = HEAP8[57672]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$1+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$2+4>>2]|0;
  _operacion_ALU_FP($3,$6,$$byval_copy4,$$byval_copy5);
  $7 = $3;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + 4)|0;
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (68848);
  $14 = $13;
  HEAP32[$14>>2] = $9;
  $15 = (($13) + 4)|0;
  $16 = $15;
  HEAP32[$16>>2] = $12;
  _memcpy(((68696)|0),(57672|0),144)|0;
  $17 = (57864);
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (68880);
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = HEAP32[(57872)>>2]|0;
  HEAP32[(68888)>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[19]|0;
 $29 = ($4|0)==($28|0);
 if ($29) {
  $30 = (((66296 + (($4*200)|0)|0)) + 152|0);
  $31 = $30;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (75112);
  $38 = $37;
  HEAP32[$38>>2] = $33;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $36;
  $41 = (66296 + (($4*200)|0)|0);
  _memcpy((74968|0),($41|0),144)|0;
  $42 = (((66296 + (($4*200)|0)|0)) + 184|0);
  $43 = $42;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = (75120);
  $50 = $49;
  HEAP32[$50>>2] = $45;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $53 = (((66296 + (($4*200)|0)|0)) + 192|0);
  $54 = HEAP32[$53>>2]|0;
  HEAP32[(75128)>>2] = $54;
  STACKTOP = sp;return;
 } else {
  $55 = (($4) + 1)|0;
  $56 = (((66296 + (($4*200)|0)|0)) + 152|0);
  $57 = (((68296 + (($55*200)|0)|0)) + 152|0);
  $58 = $56;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = $57;
  $65 = $64;
  HEAP32[$65>>2] = $60;
  $66 = (($64) + 4)|0;
  $67 = $66;
  HEAP32[$67>>2] = $63;
  $68 = (68296 + (($55*200)|0)|0);
  $69 = (66296 + (($4*200)|0)|0);
  _memcpy(($68|0),($69|0),144)|0;
  $70 = (((66296 + (($4*200)|0)|0)) + 184|0);
  $71 = $70;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 4)|0;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (((68296 + (($55*200)|0)|0)) + 184|0);
  $78 = $77;
  $79 = $78;
  HEAP32[$79>>2] = $73;
  $80 = (($78) + 4)|0;
  $81 = $80;
  HEAP32[$81>>2] = $76;
  $82 = (((66296 + (($4*200)|0)|0)) + 192|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (((68296 + (($55*200)|0)|0)) + 192|0);
  HEAP32[$84>>2] = $83;
  STACKTOP = sp;return;
 }
}
function _fase_C($0) {
 $0 = $0|0;
 var $$byval_copy4 = 0, $$byval_copy5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy5 = sp + 24|0;
 $$byval_copy4 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = $0 << 16 >> 16;
 $4 = ($0<<16>>16)==(1);
 if ($4) {
  ;HEAP32[$$byval_copy4>>2]=HEAP32[(58240)>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[(58240)+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[(75616)+4>>2]|0;
  _mux_FP_CMPsup($1,$$byval_copy4,$$byval_copy5);
  ;HEAP32[$$byval_copy4>>2]=HEAP32[(58248)>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[(58248)+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[(75616)+4>>2]|0;
  _mux_FP_CMPinf($2,$$byval_copy4,$$byval_copy5);
  $5 = HEAP8[58088]|0;
  ;HEAP32[$$byval_copy4>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$1+4>>2]|0;
  ;HEAP32[$$byval_copy5>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$2+4>>2]|0;
  $6 = (_comparacion_ALU_FP($5,$$byval_copy4,$$byval_copy5)|0);
  $7 = tempRet0;
  $8 = (72840);
  $9 = $8;
  HEAP32[$9>>2] = $6;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
  _memcpy(((72696)|0),(58088|0),144)|0;
  $12 = (58280);
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (72880);
  $19 = $18;
  HEAP32[$19>>2] = $14;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = $17;
  $22 = HEAP32[(58288)>>2]|0;
  HEAP32[(72888)>>2] = $22;
  STACKTOP = sp;return;
 }
 $23 = HEAP32[20]|0;
 $24 = ($3|0)==($23|0);
 $25 = (70296 + (($3*200)|0)|0);
 $26 = (((70296 + (($3*200)|0)|0)) + 144|0);
 $27 = $26;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 if ($24) {
  $33 = (56424);
  $34 = $33;
  HEAP32[$34>>2] = $29;
  $35 = (($33) + 4)|0;
  $36 = $35;
  HEAP32[$36>>2] = $32;
  _memcpy((56280|0),($25|0),144)|0;
  $37 = (((70296 + (($3*200)|0)|0)) + 184|0);
  $38 = $37;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + 4)|0;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (56440);
  $45 = $44;
  HEAP32[$45>>2] = $40;
  $46 = (($44) + 4)|0;
  $47 = $46;
  HEAP32[$47>>2] = $43;
  $48 = (((70296 + (($3*200)|0)|0)) + 192|0);
  $49 = HEAP32[$48>>2]|0;
  HEAP32[(56448)>>2] = $49;
  STACKTOP = sp;return;
 } else {
  $50 = (($3) + 1)|0;
  $51 = (((72296 + (($50*200)|0)|0)) + 144|0);
  $52 = $51;
  $53 = $52;
  HEAP32[$53>>2] = $29;
  $54 = (($52) + 4)|0;
  $55 = $54;
  HEAP32[$55>>2] = $32;
  $56 = (72296 + (($50*200)|0)|0);
  _memcpy(($56|0),($25|0),144)|0;
  $57 = (((70296 + (($3*200)|0)|0)) + 184|0);
  $58 = $57;
  $59 = $58;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + 4)|0;
  $62 = $61;
  $63 = HEAP32[$62>>2]|0;
  $64 = (((72296 + (($50*200)|0)|0)) + 184|0);
  $65 = $64;
  $66 = $65;
  HEAP32[$66>>2] = $60;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $63;
  $69 = (((70296 + (($3*200)|0)|0)) + 192|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (((72296 + (($50*200)|0)|0)) + 192|0);
  HEAP32[$71>>2] = $70;
  STACKTOP = sp;return;
 }
}
function _detectar_riesgos_RAW_FP() {
 var $$pr = 0, $$pr2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19178]|0;
 switch ($0|0) {
 case 0:  {
  label = 2;
  break;
 }
 case 1:  {
  break;
 }
 default: {
  return;
 }
 }
 L3: do {
  if ((label|0) == 2) {
   $1 = HEAP8[55008]|0;
   switch ($1<<24>>24) {
   case -75: case -76: case -127: case -128: case -114: case -115:  {
    $2 = (_hay_destino_EX()|0);
    $3 = ($2|0)==(0);
    if ($3) {
     label = 6;
    } else {
     $4 = HEAP8[(55016)>>0]|0;
     $5 = HEAP8[(55378)>>0]|0;
     $6 = ($4<<24>>24)==($5<<24>>24);
     if ($6) {
      HEAP32[199574] = 1;
      HEAP32[199575] = 1;
      $7 = (55160);
      $8 = $7;
      $9 = HEAP32[$8>>2]|0;
      $10 = (($7) + 4)|0;
      $11 = $10;
      $12 = HEAP32[$11>>2]|0;
      $13 = (55544);
      $14 = $13;
      $15 = HEAP32[$14>>2]|0;
      $16 = (($13) + 4)|0;
      $17 = $16;
      $18 = HEAP32[$17>>2]|0;
      _write_log_2(27550,$9,$12,$15,$18,27528,27320);
     } else {
      label = 6;
     }
    }
    if ((label|0) == 6) {
     $19 = (_hay_destino_MEM()|0);
     $20 = ($19|0)==(0);
     if (!($20)) {
      $21 = HEAP8[(55016)>>0]|0;
      $22 = HEAP8[(55754)>>0]|0;
      $23 = ($21<<24>>24)==($22<<24>>24);
      if ($23) {
       HEAP32[199574] = 1;
       HEAP32[199575] = 1;
       $24 = (55160);
       $25 = $24;
       $26 = HEAP32[$25>>2]|0;
       $27 = (($24) + 4)|0;
       $28 = $27;
       $29 = HEAP32[$28>>2]|0;
       $30 = (55912);
       $31 = $30;
       $32 = HEAP32[$31>>2]|0;
       $33 = (($30) + 4)|0;
       $34 = $33;
       $35 = HEAP32[$34>>2]|0;
       _write_log_2(27550,$26,$29,$32,$35,27528,27323);
      }
     }
    }
    $$pr = HEAP8[55008]|0;
    $36 = $$pr;
    break;
   }
   default: {
    $36 = $1;
   }
   }
   switch ($36<<24>>24) {
   case -76: case -128: case -115:  {
    break L3;
    break;
   }
   case -75: case -127: case -114:  {
    $37 = HEAP8[(55017)>>0]|0;
    $38 = $37&255;
    $39 = (((54296 + ($38<<4)|0)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0);
    if ($41) {
     break L3;
    }
    HEAP32[199575] = 1;
    HEAP32[199574] = 1;
    HEAP32[199571] = 1;
    $42 = (55160);
    $43 = $42;
    $44 = HEAP32[$43>>2]|0;
    $45 = (($42) + 4)|0;
    $46 = $45;
    $47 = HEAP32[$46>>2]|0;
    _write_log_1(9369,$44,$47,$37);
    break L3;
    break;
   }
   default: {
   }
   }
   $48 = HEAP8[(55016)>>0]|0;
   $49 = $48&255;
   $50 = (((54296 + ($49<<4)|0)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0);
   if (!($52)) {
    HEAP32[199575] = 1;
    HEAP32[199574] = 1;
    HEAP32[199571] = 1;
    $53 = (55160);
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    _write_log_1(9369,$55,$58,$48);
   }
   $59 = HEAP8[(55017)>>0]|0;
   $60 = $59&255;
   $61 = (((54296 + ($60<<4)|0)) + 8|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0);
   if (!($63)) {
    HEAP32[199575] = 1;
    HEAP32[199574] = 1;
    HEAP32[199571] = 1;
    $64 = (55160);
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (($64) + 4)|0;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    _write_log_1(9369,$66,$69,$59);
   }
  }
 } while(0);
 $70 = HEAP8[55008]|0;
 switch ($70<<24>>24) {
 case -75: case -76: case -127: case -128: case -114: case -115:  {
  $71 = HEAP8[55368]|0;
  switch ($71<<24>>24) {
  case 11: case 13: case 10: case 12: case 14: case 64:  {
   $72 = HEAP8[(55016)>>0]|0;
   $73 = HEAP8[(55378)>>0]|0;
   $74 = ($72<<24>>24)==($73<<24>>24);
   if ($74) {
    HEAP32[199574] = 1;
    HEAP32[199575] = 1;
    $75 = (55160);
    $76 = $75;
    $77 = HEAP32[$76>>2]|0;
    $78 = (($75) + 4)|0;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (55544);
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = (($81) + 4)|0;
    $85 = $84;
    $86 = HEAP32[$85>>2]|0;
    _write_log_2(27550,$77,$80,$83,$86,27528,27320);
   }
   break;
  }
  default: {
  }
  }
  $$pr2 = HEAP8[55008]|0;
  $87 = $$pr2;
  break;
 }
 default: {
  $87 = $70;
 }
 }
 switch ($87<<24>>24) {
 case -75: case -127: case -114:  {
  $88 = HEAP8[(55017)>>0]|0;
  $89 = $88&255;
  $90 = (((54296 + ($89<<4)|0)) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[19182]|0;
  $93 = ($91|0)>($92|0);
  if (!($93)) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199571] = 1;
  $94 = (55160);
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($94) + 4)|0;
  $98 = $97;
  $99 = HEAP32[$98>>2]|0;
  _write_log_1(9369,$96,$99,$88);
  return;
  break;
 }
 case -76: case -128: case -115:  {
  return;
  break;
 }
 default: {
  $100 = HEAP8[(55016)>>0]|0;
  $101 = $100&255;
  $102 = (((54296 + ($101<<4)|0)) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = HEAP32[19182]|0;
  $105 = ($103|0)>($104|0);
  if ($105) {
   HEAP32[199575] = 1;
   HEAP32[199574] = 1;
   HEAP32[199571] = 1;
   $106 = (55160);
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + 4)|0;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   _write_log_1(9369,$108,$111,$100);
  }
  $112 = HEAP8[(55017)>>0]|0;
  $113 = $112&255;
  $114 = (((54296 + ($113<<4)|0)) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = HEAP32[19182]|0;
  $117 = ($115|0)>($116|0);
  if (!($117)) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199571] = 1;
  $118 = (55160);
  $119 = $118;
  $120 = HEAP32[$119>>2]|0;
  $121 = (($118) + 4)|0;
  $122 = $121;
  $123 = HEAP32[$122>>2]|0;
  _write_log_1(9369,$120,$123,$112);
  return;
 }
 }
}
function _detectar_riesgos_WAW_FP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[55008]|0;
 switch ($0<<24>>24) {
 case -115:  {
  $1 = HEAP8[(55018)>>0]|0;
  $2 = $1&255;
  $3 = (((54296 + ($2<<4)|0)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[19182]|0;
  $6 = HEAP32[21]|0;
  $7 = (($6) + ($5))|0;
  $8 = ($4|0)<($7|0);
  if ($8) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199572] = 1;
  $9 = (55160);
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + 4)|0;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  _write_log_1(9391,$11,$14,$1);
  return;
  break;
 }
 case -112: case -113:  {
  $15 = HEAP8[(55018)>>0]|0;
  $16 = $15&255;
  $17 = (((54296 + ($16<<4)|0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[19182]|0;
  $20 = HEAP32[18]|0;
  $21 = (($20) + ($19))|0;
  $22 = ($18|0)<($21|0);
  if ($22) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199572] = 1;
  $23 = (55160);
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  _write_log_1(9391,$25,$28,$15);
  return;
  break;
 }
 case -110: case -111:  {
  $29 = HEAP8[(55018)>>0]|0;
  $30 = $29&255;
  $31 = (((54296 + ($30<<4)|0)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[19182]|0;
  $34 = HEAP32[19]|0;
  $35 = (($34) + ($33))|0;
  $36 = ($32|0)<($35|0);
  if ($36) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199572] = 1;
  $37 = (55160);
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  _write_log_1(9391,$39,$42,$29);
  return;
  break;
 }
 case -74: case -73:  {
  $43 = HEAP8[(55018)>>0]|0;
  $44 = $43&255;
  $45 = (((54296 + ($44<<4)|0)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[19182]|0;
  $48 = ($46|0)<($47|0);
  if ($48) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199572] = 1;
  $49 = (55160);
  $50 = $49;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4)|0;
  $53 = $52;
  $54 = HEAP32[$53>>2]|0;
  _write_log_1(9391,$51,$54,$43);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _detectar_riesgos_WB_FP() {
 var $$023 = 0, $$124 = 0, $$225 = 0, $$326 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond30 = 0, $exitcond31 = 0, $exitcond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[55008]|0;
 switch ($0<<24>>24) {
 case -76: case -128: case -115:  {
  $$023 = 0;
  while(1) {
   $1 = (((54296 + ($$023<<4)|0)) + 8|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = HEAP32[19182]|0;
   $4 = HEAP32[21]|0;
   $5 = (($4) + ($3))|0;
   $6 = ($2|0)==($5|0);
   if ($6) {
    HEAP32[199575] = 1;
    HEAP32[199574] = 1;
    HEAP32[199573] = 1;
    $7 = (55160);
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = $$023&255;
    _write_log_1(9413,$9,$12,$13);
   }
   $14 = (($$023) + 1)|0;
   $exitcond = ($14|0)==(32);
   if ($exitcond) {
    break;
   } else {
    $$023 = $14;
   }
  }
  return;
  break;
 }
 case -101: case -102: case -125: case -126: case -112: case -113:  {
  $$124 = 0;
  while(1) {
   $15 = (((54296 + ($$124<<4)|0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[19182]|0;
   $18 = HEAP32[18]|0;
   $19 = (($18) + ($17))|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    HEAP32[199575] = 1;
    HEAP32[199574] = 1;
    HEAP32[199573] = 1;
    $21 = (55160);
    $22 = $21;
    $23 = HEAP32[$22>>2]|0;
    $24 = (($21) + 4)|0;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = $$124&255;
    _write_log_1(9413,$23,$26,$27);
   }
   $28 = (($$124) + 1)|0;
   $exitcond30 = ($28|0)==(32);
   if ($exitcond30) {
    break;
   } else {
    $$124 = $28;
   }
  }
  return;
  break;
 }
 case -99: case -100: case -123: case -124: case -110: case -111:  {
  $$225 = 0;
  while(1) {
   $29 = (((54296 + ($$225<<4)|0)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[19182]|0;
   $32 = HEAP32[19]|0;
   $33 = (($32) + ($31))|0;
   $34 = ($30|0)==($33|0);
   if ($34) {
    HEAP32[199575] = 1;
    HEAP32[199574] = 1;
    HEAP32[199573] = 1;
    $35 = (55160);
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = (($35) + 4)|0;
    $39 = $38;
    $40 = HEAP32[$39>>2]|0;
    $41 = $$225&255;
    _write_log_1(9413,$37,$40,$41);
   }
   $42 = (($$225) + 1)|0;
   $exitcond31 = ($42|0)==(32);
   if ($exitcond31) {
    break;
   } else {
    $$225 = $42;
   }
  }
  return;
  break;
 }
 case -74: case -73:  {
  $$326 = 0;
  while(1) {
   $43 = (((54296 + ($$326<<4)|0)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[19182]|0;
   $46 = ($44|0)==($45|0);
   if ($46) {
    HEAP32[199575] = 1;
    HEAP32[199574] = 1;
    HEAP32[199573] = 1;
    $47 = (55160);
    $48 = $47;
    $49 = HEAP32[$48>>2]|0;
    $50 = (($47) + 4)|0;
    $51 = $50;
    $52 = HEAP32[$51>>2]|0;
    $53 = $$326&255;
    _write_log_1(9413,$49,$52,$53);
   }
   $54 = (($$326) + 1)|0;
   $exitcond32 = ($54|0)==(32);
   if ($exitcond32) {
    break;
   } else {
    $$326 = $54;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _color_instruccion($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(-1);
 $4 = ($2|0)==(-1);
 $5 = $3 & $4;
 if ($5) {
  dest=$0; src=11741; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  return;
 } else {
  $6 = (___divdi3(($1|0),($2|0),4,0)|0);
  $7 = tempRet0;
  $8 = (($6|0) % 15)&-1;
  $9 = (8 + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  (_strcpy($0,$10)|0);
  return;
 }
}
function _imprime_instruccion_color($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $leninc = 0, $leninc107 = 0, $strlen = 0;
 var $strlen106 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer107 = 0, $vararg_buffer113 = 0, $vararg_buffer119 = 0, $vararg_buffer125 = 0, $vararg_buffer13 = 0, $vararg_buffer131 = 0, $vararg_buffer137 = 0, $vararg_buffer143 = 0, $vararg_buffer149 = 0, $vararg_buffer155 = 0, $vararg_buffer161 = 0, $vararg_buffer167 = 0, $vararg_buffer173 = 0, $vararg_buffer179 = 0, $vararg_buffer185 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer191 = 0, $vararg_buffer197 = 0, $vararg_buffer203 = 0, $vararg_buffer209 = 0, $vararg_buffer215 = 0, $vararg_buffer221 = 0, $vararg_buffer227 = 0, $vararg_buffer233 = 0, $vararg_buffer239 = 0, $vararg_buffer245 = 0, $vararg_buffer25 = 0, $vararg_buffer251 = 0, $vararg_buffer256 = 0, $vararg_buffer261 = 0, $vararg_buffer267 = 0, $vararg_buffer273 = 0, $vararg_buffer277 = 0, $vararg_buffer281 = 0, $vararg_buffer287 = 0, $vararg_buffer293 = 0;
 var $vararg_buffer297 = 0, $vararg_buffer301 = 0, $vararg_buffer304 = 0, $vararg_buffer308 = 0, $vararg_buffer31 = 0, $vararg_buffer314 = 0, $vararg_buffer320 = 0, $vararg_buffer326 = 0, $vararg_buffer332 = 0, $vararg_buffer338 = 0, $vararg_buffer344 = 0, $vararg_buffer350 = 0, $vararg_buffer356 = 0, $vararg_buffer362 = 0, $vararg_buffer368 = 0, $vararg_buffer37 = 0, $vararg_buffer374 = 0, $vararg_buffer380 = 0, $vararg_buffer386 = 0, $vararg_buffer392 = 0;
 var $vararg_buffer398 = 0, $vararg_buffer404 = 0, $vararg_buffer410 = 0, $vararg_buffer416 = 0, $vararg_buffer421 = 0, $vararg_buffer426 = 0, $vararg_buffer43 = 0, $vararg_buffer431 = 0, $vararg_buffer436 = 0, $vararg_buffer441 = 0, $vararg_buffer446 = 0, $vararg_buffer451 = 0, $vararg_buffer456 = 0, $vararg_buffer461 = 0, $vararg_buffer466 = 0, $vararg_buffer471 = 0, $vararg_buffer476 = 0, $vararg_buffer480 = 0, $vararg_buffer484 = 0, $vararg_buffer49 = 0;
 var $vararg_buffer490 = 0, $vararg_buffer55 = 0, $vararg_buffer61 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer73 = 0, $vararg_buffer79 = 0, $vararg_buffer85 = 0, $vararg_buffer91 = 0, $vararg_buffer95 = 0, $vararg_ptr10 = 0, $vararg_ptr100 = 0, $vararg_ptr104 = 0, $vararg_ptr105 = 0, $vararg_ptr106 = 0, $vararg_ptr11 = 0, $vararg_ptr110 = 0, $vararg_ptr111 = 0, $vararg_ptr112 = 0, $vararg_ptr116 = 0;
 var $vararg_ptr117 = 0, $vararg_ptr118 = 0, $vararg_ptr12 = 0, $vararg_ptr122 = 0, $vararg_ptr123 = 0, $vararg_ptr124 = 0, $vararg_ptr128 = 0, $vararg_ptr129 = 0, $vararg_ptr130 = 0, $vararg_ptr134 = 0, $vararg_ptr135 = 0, $vararg_ptr136 = 0, $vararg_ptr140 = 0, $vararg_ptr141 = 0, $vararg_ptr142 = 0, $vararg_ptr146 = 0, $vararg_ptr147 = 0, $vararg_ptr148 = 0, $vararg_ptr152 = 0, $vararg_ptr153 = 0;
 var $vararg_ptr154 = 0, $vararg_ptr158 = 0, $vararg_ptr159 = 0, $vararg_ptr16 = 0, $vararg_ptr160 = 0, $vararg_ptr164 = 0, $vararg_ptr165 = 0, $vararg_ptr166 = 0, $vararg_ptr17 = 0, $vararg_ptr170 = 0, $vararg_ptr171 = 0, $vararg_ptr172 = 0, $vararg_ptr176 = 0, $vararg_ptr177 = 0, $vararg_ptr178 = 0, $vararg_ptr18 = 0, $vararg_ptr182 = 0, $vararg_ptr183 = 0, $vararg_ptr184 = 0, $vararg_ptr188 = 0;
 var $vararg_ptr189 = 0, $vararg_ptr190 = 0, $vararg_ptr194 = 0, $vararg_ptr195 = 0, $vararg_ptr196 = 0, $vararg_ptr200 = 0, $vararg_ptr201 = 0, $vararg_ptr202 = 0, $vararg_ptr206 = 0, $vararg_ptr207 = 0, $vararg_ptr208 = 0, $vararg_ptr212 = 0, $vararg_ptr213 = 0, $vararg_ptr214 = 0, $vararg_ptr218 = 0, $vararg_ptr219 = 0, $vararg_ptr22 = 0, $vararg_ptr220 = 0, $vararg_ptr224 = 0, $vararg_ptr225 = 0;
 var $vararg_ptr226 = 0, $vararg_ptr23 = 0, $vararg_ptr230 = 0, $vararg_ptr231 = 0, $vararg_ptr232 = 0, $vararg_ptr236 = 0, $vararg_ptr237 = 0, $vararg_ptr238 = 0, $vararg_ptr24 = 0, $vararg_ptr242 = 0, $vararg_ptr243 = 0, $vararg_ptr244 = 0, $vararg_ptr248 = 0, $vararg_ptr249 = 0, $vararg_ptr250 = 0, $vararg_ptr254 = 0, $vararg_ptr255 = 0, $vararg_ptr259 = 0, $vararg_ptr260 = 0, $vararg_ptr264 = 0;
 var $vararg_ptr265 = 0, $vararg_ptr266 = 0, $vararg_ptr270 = 0, $vararg_ptr271 = 0, $vararg_ptr272 = 0, $vararg_ptr276 = 0, $vararg_ptr28 = 0, $vararg_ptr280 = 0, $vararg_ptr284 = 0, $vararg_ptr285 = 0, $vararg_ptr286 = 0, $vararg_ptr29 = 0, $vararg_ptr290 = 0, $vararg_ptr291 = 0, $vararg_ptr292 = 0, $vararg_ptr296 = 0, $vararg_ptr30 = 0, $vararg_ptr300 = 0, $vararg_ptr307 = 0, $vararg_ptr311 = 0;
 var $vararg_ptr312 = 0, $vararg_ptr313 = 0, $vararg_ptr317 = 0, $vararg_ptr318 = 0, $vararg_ptr319 = 0, $vararg_ptr323 = 0, $vararg_ptr324 = 0, $vararg_ptr325 = 0, $vararg_ptr329 = 0, $vararg_ptr330 = 0, $vararg_ptr331 = 0, $vararg_ptr335 = 0, $vararg_ptr336 = 0, $vararg_ptr337 = 0, $vararg_ptr34 = 0, $vararg_ptr341 = 0, $vararg_ptr342 = 0, $vararg_ptr343 = 0, $vararg_ptr347 = 0, $vararg_ptr348 = 0;
 var $vararg_ptr349 = 0, $vararg_ptr35 = 0, $vararg_ptr353 = 0, $vararg_ptr354 = 0, $vararg_ptr355 = 0, $vararg_ptr359 = 0, $vararg_ptr36 = 0, $vararg_ptr360 = 0, $vararg_ptr361 = 0, $vararg_ptr365 = 0, $vararg_ptr366 = 0, $vararg_ptr367 = 0, $vararg_ptr371 = 0, $vararg_ptr372 = 0, $vararg_ptr373 = 0, $vararg_ptr377 = 0, $vararg_ptr378 = 0, $vararg_ptr379 = 0, $vararg_ptr383 = 0, $vararg_ptr384 = 0;
 var $vararg_ptr385 = 0, $vararg_ptr389 = 0, $vararg_ptr390 = 0, $vararg_ptr391 = 0, $vararg_ptr395 = 0, $vararg_ptr396 = 0, $vararg_ptr397 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr401 = 0, $vararg_ptr402 = 0, $vararg_ptr403 = 0, $vararg_ptr407 = 0, $vararg_ptr408 = 0, $vararg_ptr409 = 0, $vararg_ptr41 = 0, $vararg_ptr413 = 0, $vararg_ptr414 = 0, $vararg_ptr415 = 0, $vararg_ptr419 = 0;
 var $vararg_ptr42 = 0, $vararg_ptr420 = 0, $vararg_ptr424 = 0, $vararg_ptr425 = 0, $vararg_ptr429 = 0, $vararg_ptr430 = 0, $vararg_ptr434 = 0, $vararg_ptr435 = 0, $vararg_ptr439 = 0, $vararg_ptr440 = 0, $vararg_ptr444 = 0, $vararg_ptr445 = 0, $vararg_ptr449 = 0, $vararg_ptr450 = 0, $vararg_ptr454 = 0, $vararg_ptr455 = 0, $vararg_ptr459 = 0, $vararg_ptr46 = 0, $vararg_ptr460 = 0, $vararg_ptr464 = 0;
 var $vararg_ptr465 = 0, $vararg_ptr469 = 0, $vararg_ptr47 = 0, $vararg_ptr470 = 0, $vararg_ptr474 = 0, $vararg_ptr475 = 0, $vararg_ptr479 = 0, $vararg_ptr48 = 0, $vararg_ptr483 = 0, $vararg_ptr487 = 0, $vararg_ptr488 = 0, $vararg_ptr489 = 0, $vararg_ptr493 = 0, $vararg_ptr5 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr72 = 0, $vararg_ptr76 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr82 = 0, $vararg_ptr83 = 0, $vararg_ptr84 = 0, $vararg_ptr88 = 0, $vararg_ptr89 = 0, $vararg_ptr90 = 0, $vararg_ptr94 = 0, $vararg_ptr98 = 0, $vararg_ptr99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1744|0;
 $vararg_buffer490 = sp + 1328|0;
 $vararg_buffer484 = sp + 1312|0;
 $vararg_buffer480 = sp + 1304|0;
 $vararg_buffer476 = sp + 1296|0;
 $vararg_buffer471 = sp + 1280|0;
 $vararg_buffer466 = sp + 1264|0;
 $vararg_buffer461 = sp + 1248|0;
 $vararg_buffer456 = sp + 1232|0;
 $vararg_buffer451 = sp + 1216|0;
 $vararg_buffer446 = sp + 1200|0;
 $vararg_buffer441 = sp + 1184|0;
 $vararg_buffer436 = sp + 1168|0;
 $vararg_buffer431 = sp + 1152|0;
 $vararg_buffer426 = sp + 1136|0;
 $vararg_buffer421 = sp + 1120|0;
 $vararg_buffer416 = sp + 1104|0;
 $vararg_buffer410 = sp + 1088|0;
 $vararg_buffer404 = sp + 1072|0;
 $vararg_buffer398 = sp + 1056|0;
 $vararg_buffer392 = sp + 1040|0;
 $vararg_buffer386 = sp + 1024|0;
 $vararg_buffer380 = sp + 1008|0;
 $vararg_buffer374 = sp + 992|0;
 $vararg_buffer368 = sp + 976|0;
 $vararg_buffer362 = sp + 960|0;
 $vararg_buffer356 = sp + 944|0;
 $vararg_buffer350 = sp + 928|0;
 $vararg_buffer344 = sp + 912|0;
 $vararg_buffer338 = sp + 896|0;
 $vararg_buffer332 = sp + 880|0;
 $vararg_buffer326 = sp + 864|0;
 $vararg_buffer320 = sp + 848|0;
 $vararg_buffer314 = sp + 832|0;
 $vararg_buffer308 = sp + 816|0;
 $vararg_buffer304 = sp + 808|0;
 $vararg_buffer301 = sp + 800|0;
 $vararg_buffer297 = sp + 792|0;
 $vararg_buffer293 = sp + 784|0;
 $vararg_buffer287 = sp + 768|0;
 $vararg_buffer281 = sp + 752|0;
 $vararg_buffer277 = sp + 744|0;
 $vararg_buffer273 = sp + 736|0;
 $vararg_buffer267 = sp + 720|0;
 $vararg_buffer261 = sp + 704|0;
 $vararg_buffer256 = sp + 688|0;
 $vararg_buffer251 = sp + 672|0;
 $vararg_buffer245 = sp + 656|0;
 $vararg_buffer239 = sp + 640|0;
 $vararg_buffer233 = sp + 624|0;
 $vararg_buffer227 = sp + 608|0;
 $vararg_buffer221 = sp + 592|0;
 $vararg_buffer215 = sp + 576|0;
 $vararg_buffer209 = sp + 560|0;
 $vararg_buffer203 = sp + 544|0;
 $vararg_buffer197 = sp + 528|0;
 $vararg_buffer191 = sp + 512|0;
 $vararg_buffer185 = sp + 496|0;
 $vararg_buffer179 = sp + 480|0;
 $vararg_buffer173 = sp + 464|0;
 $vararg_buffer167 = sp + 448|0;
 $vararg_buffer161 = sp + 432|0;
 $vararg_buffer155 = sp + 416|0;
 $vararg_buffer149 = sp + 400|0;
 $vararg_buffer143 = sp + 384|0;
 $vararg_buffer137 = sp + 368|0;
 $vararg_buffer131 = sp + 352|0;
 $vararg_buffer125 = sp + 336|0;
 $vararg_buffer119 = sp + 320|0;
 $vararg_buffer113 = sp + 304|0;
 $vararg_buffer107 = sp + 288|0;
 $vararg_buffer101 = sp + 272|0;
 $vararg_buffer95 = sp + 256|0;
 $vararg_buffer91 = sp + 248|0;
 $vararg_buffer85 = sp + 232|0;
 $vararg_buffer79 = sp + 216|0;
 $vararg_buffer73 = sp + 200|0;
 $vararg_buffer67 = sp + 184|0;
 $vararg_buffer61 = sp + 168|0;
 $vararg_buffer55 = sp + 152|0;
 $vararg_buffer49 = sp + 136|0;
 $vararg_buffer43 = sp + 120|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 1608|0;
 $5 = sp + 1480|0;
 $6 = sp + 1336|0;
 $7 = ($1|0)==(-1);
 $8 = ($2|0)==(-1);
 $9 = $7 & $8;
 if ($9) {
  ;HEAP8[$0>>0]=HEAP8[9582>>0]|0;HEAP8[$0+1>>0]=HEAP8[9582+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[9582+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[9582+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[9582+4>>0]|0;HEAP8[$0+5>>0]=HEAP8[9582+5>>0]|0;
 } else {
  _lee_mem_instruc($6,$1,$2);
  $10 = HEAP8[$6>>0]|0;
  do {
   switch ($10<<24>>24) {
   case 0:  {
    HEAP8[$0>>0]=7368558&255;HEAP8[$0+1>>0]=(7368558>>8)&255;HEAP8[$0+2>>0]=(7368558>>16)&255;HEAP8[$0+3>>0]=7368558>>24;
    break;
   }
   case 1:  {
    $11 = ((($6)) + 12|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = $12 << 16 >> 16;
    HEAP32[$vararg_buffer>>2] = $13;
    (_sprintf($0,9588,$vararg_buffer)|0);
    break;
   }
   case 120:  {
    $14 = $0;
    $15 = $14;
    HEAP8[$15>>0]=1668512115&255;HEAP8[$15+1>>0]=(1668512115>>8)&255;HEAP8[$15+2>>0]=(1668512115>>16)&255;HEAP8[$15+3>>0]=1668512115>>24;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP8[$17>>0]=7105633&255;HEAP8[$17+1>>0]=(7105633>>8)&255;HEAP8[$17+2>>0]=(7105633>>16)&255;HEAP8[$17+3>>0]=7105633>>24;
    break;
   }
   case 10:  {
    $18 = ((($6)) + 10|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = ((($6)) + 14|0);
    $22 = ((($6)) + 8|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    HEAP32[$vararg_buffer1>>2] = 9611;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $20;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $21;
    $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    (_sprintf($0,9596,$vararg_buffer1)|0);
    break;
   }
   case 11:  {
    $25 = ((($6)) + 10|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = ((($6)) + 14|0);
    $29 = ((($6)) + 8|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    HEAP32[$vararg_buffer7>>2] = 9614;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $27;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $28;
    $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
    HEAP32[$vararg_ptr12>>2] = $31;
    (_sprintf($0,9596,$vararg_buffer7)|0);
    break;
   }
   case 16:  {
    $32 = ((($6)) + 9|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = ((($6)) + 14|0);
    $36 = ((($6)) + 8|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    HEAP32[$vararg_buffer13>>2] = 9618;
    $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
    HEAP32[$vararg_ptr16>>2] = $34;
    $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
    HEAP32[$vararg_ptr17>>2] = $35;
    $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
    HEAP32[$vararg_ptr18>>2] = $38;
    (_sprintf($0,9596,$vararg_buffer13)|0);
    break;
   }
   case 12:  {
    $39 = ((($6)) + 10|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = ((($6)) + 14|0);
    $43 = ((($6)) + 8|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    HEAP32[$vararg_buffer19>>2] = 9621;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $41;
    $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
    HEAP32[$vararg_ptr23>>2] = $42;
    $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
    HEAP32[$vararg_ptr24>>2] = $45;
    (_sprintf($0,9596,$vararg_buffer19)|0);
    break;
   }
   case 13:  {
    $46 = ((($6)) + 10|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = $47&255;
    $49 = ((($6)) + 14|0);
    $50 = ((($6)) + 8|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    HEAP32[$vararg_buffer25>>2] = 9624;
    $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
    HEAP32[$vararg_ptr28>>2] = $48;
    $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
    HEAP32[$vararg_ptr29>>2] = $49;
    $vararg_ptr30 = ((($vararg_buffer25)) + 12|0);
    HEAP32[$vararg_ptr30>>2] = $52;
    (_sprintf($0,9596,$vararg_buffer25)|0);
    break;
   }
   case 17:  {
    $53 = ((($6)) + 9|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = ((($6)) + 14|0);
    $57 = ((($6)) + 8|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    HEAP32[$vararg_buffer31>>2] = 9628;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = $55;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $56;
    $vararg_ptr36 = ((($vararg_buffer31)) + 12|0);
    HEAP32[$vararg_ptr36>>2] = $59;
    (_sprintf($0,9596,$vararg_buffer31)|0);
    break;
   }
   case 14:  {
    $60 = ((($6)) + 10|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = ((($6)) + 14|0);
    $64 = ((($6)) + 8|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    HEAP32[$vararg_buffer37>>2] = 9631;
    $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
    HEAP32[$vararg_ptr40>>2] = $62;
    $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
    HEAP32[$vararg_ptr41>>2] = $63;
    $vararg_ptr42 = ((($vararg_buffer37)) + 12|0);
    HEAP32[$vararg_ptr42>>2] = $66;
    (_sprintf($0,9596,$vararg_buffer37)|0);
    break;
   }
   case 15:  {
    $67 = ((($6)) + 10|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = ((($6)) + 14|0);
    $71 = ((($6)) + 8|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    HEAP32[$vararg_buffer43>>2] = 9634;
    $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
    HEAP32[$vararg_ptr46>>2] = $69;
    $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
    HEAP32[$vararg_ptr47>>2] = $70;
    $vararg_ptr48 = ((($vararg_buffer43)) + 12|0);
    HEAP32[$vararg_ptr48>>2] = $73;
    (_sprintf($0,9596,$vararg_buffer43)|0);
    break;
   }
   case 18:  {
    $74 = ((($6)) + 9|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $77 = ((($6)) + 14|0);
    $78 = ((($6)) + 8|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    HEAP32[$vararg_buffer49>>2] = 9638;
    $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
    HEAP32[$vararg_ptr52>>2] = $76;
    $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
    HEAP32[$vararg_ptr53>>2] = $77;
    $vararg_ptr54 = ((($vararg_buffer49)) + 12|0);
    HEAP32[$vararg_ptr54>>2] = $80;
    (_sprintf($0,9596,$vararg_buffer49)|0);
    break;
   }
   case 64:  {
    $81 = ((($6)) + 10|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = ((($6)) + 14|0);
    $85 = ((($6)) + 8|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    HEAP32[$vararg_buffer55>>2] = 9641;
    $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
    HEAP32[$vararg_ptr58>>2] = $83;
    $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
    HEAP32[$vararg_ptr59>>2] = $84;
    $vararg_ptr60 = ((($vararg_buffer55)) + 12|0);
    HEAP32[$vararg_ptr60>>2] = $87;
    (_sprintf($0,9596,$vararg_buffer55)|0);
    break;
   }
   case 65:  {
    $88 = ((($6)) + 9|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = ((($6)) + 14|0);
    $92 = ((($6)) + 8|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    HEAP32[$vararg_buffer61>>2] = 9644;
    $vararg_ptr64 = ((($vararg_buffer61)) + 4|0);
    HEAP32[$vararg_ptr64>>2] = $90;
    $vararg_ptr65 = ((($vararg_buffer61)) + 8|0);
    HEAP32[$vararg_ptr65>>2] = $91;
    $vararg_ptr66 = ((($vararg_buffer61)) + 12|0);
    HEAP32[$vararg_ptr66>>2] = $94;
    (_sprintf($0,9596,$vararg_buffer61)|0);
    break;
   }
   case 70:  {
    $95 = ((($6)) + 10|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = ((($6)) + 8|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = ((($6)) + 9|0);
    $102 = HEAP8[$101>>0]|0;
    $103 = $102&255;
    HEAP32[$vararg_buffer67>>2] = 9662;
    $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
    HEAP32[$vararg_ptr70>>2] = $97;
    $vararg_ptr71 = ((($vararg_buffer67)) + 8|0);
    HEAP32[$vararg_ptr71>>2] = $100;
    $vararg_ptr72 = ((($vararg_buffer67)) + 12|0);
    HEAP32[$vararg_ptr72>>2] = $103;
    (_sprintf($0,9647,$vararg_buffer67)|0);
    break;
   }
   case 74:  {
    $104 = ((($6)) + 10|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = ((($6)) + 8|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = ((($6)) + 9|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    HEAP32[$vararg_buffer73>>2] = 9667;
    $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
    HEAP32[$vararg_ptr76>>2] = $106;
    $vararg_ptr77 = ((($vararg_buffer73)) + 8|0);
    HEAP32[$vararg_ptr77>>2] = $109;
    $vararg_ptr78 = ((($vararg_buffer73)) + 12|0);
    HEAP32[$vararg_ptr78>>2] = $112;
    (_sprintf($0,9647,$vararg_buffer73)|0);
    break;
   }
   case 78:  {
    $113 = ((($6)) + 10|0);
    $114 = HEAP8[$113>>0]|0;
    $115 = $114&255;
    $116 = ((($6)) + 8|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = $117&255;
    $119 = ((($6)) + 9|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    HEAP32[$vararg_buffer79>>2] = 9672;
    $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
    HEAP32[$vararg_ptr82>>2] = $115;
    $vararg_ptr83 = ((($vararg_buffer79)) + 8|0);
    HEAP32[$vararg_ptr83>>2] = $118;
    $vararg_ptr84 = ((($vararg_buffer79)) + 12|0);
    HEAP32[$vararg_ptr84>>2] = $121;
    (_sprintf($0,9647,$vararg_buffer79)|0);
    break;
   }
   case 80:  {
    $122 = ((($6)) + 10|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = ((($6)) + 8|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = ((($6)) + 9|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    HEAP32[$vararg_buffer85>>2] = 9677;
    $vararg_ptr88 = ((($vararg_buffer85)) + 4|0);
    HEAP32[$vararg_ptr88>>2] = $124;
    $vararg_ptr89 = ((($vararg_buffer85)) + 8|0);
    HEAP32[$vararg_ptr89>>2] = $127;
    $vararg_ptr90 = ((($vararg_buffer85)) + 12|0);
    HEAP32[$vararg_ptr90>>2] = $130;
    (_sprintf($0,9647,$vararg_buffer85)|0);
    break;
   }
   case 83:  {
    $131 = ((($6)) + 10|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = ((($6)) + 12|0);
    $135 = HEAP16[$134>>1]|0;
    $136 = $135 << 16 >> 16;
    HEAP32[$vararg_buffer91>>2] = $133;
    $vararg_ptr94 = ((($vararg_buffer91)) + 4|0);
    HEAP32[$vararg_ptr94>>2] = $136;
    (_sprintf($0,9682,$vararg_buffer91)|0);
    break;
   }
   case 20:  {
    $137 = ((($6)) + 10|0);
    $138 = HEAP8[$137>>0]|0;
    $139 = $138&255;
    $140 = ((($6)) + 8|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = ((($6)) + 9|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    HEAP32[$vararg_buffer95>>2] = 9695;
    $vararg_ptr98 = ((($vararg_buffer95)) + 4|0);
    HEAP32[$vararg_ptr98>>2] = $139;
    $vararg_ptr99 = ((($vararg_buffer95)) + 8|0);
    HEAP32[$vararg_ptr99>>2] = $142;
    $vararg_ptr100 = ((($vararg_buffer95)) + 12|0);
    HEAP32[$vararg_ptr100>>2] = $145;
    (_sprintf($0,9647,$vararg_buffer95)|0);
    break;
   }
   case 22:  {
    $146 = ((($6)) + 10|0);
    $147 = HEAP8[$146>>0]|0;
    $148 = $147&255;
    $149 = ((($6)) + 8|0);
    $150 = HEAP8[$149>>0]|0;
    $151 = $150&255;
    $152 = ((($6)) + 9|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    HEAP32[$vararg_buffer101>>2] = 9699;
    $vararg_ptr104 = ((($vararg_buffer101)) + 4|0);
    HEAP32[$vararg_ptr104>>2] = $148;
    $vararg_ptr105 = ((($vararg_buffer101)) + 8|0);
    HEAP32[$vararg_ptr105>>2] = $151;
    $vararg_ptr106 = ((($vararg_buffer101)) + 12|0);
    HEAP32[$vararg_ptr106>>2] = $154;
    (_sprintf($0,9647,$vararg_buffer101)|0);
    break;
   }
   case 24:  {
    $155 = ((($6)) + 10|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    $158 = ((($6)) + 8|0);
    $159 = HEAP8[$158>>0]|0;
    $160 = $159&255;
    $161 = ((($6)) + 9|0);
    $162 = HEAP8[$161>>0]|0;
    $163 = $162&255;
    HEAP32[$vararg_buffer107>>2] = 9702;
    $vararg_ptr110 = ((($vararg_buffer107)) + 4|0);
    HEAP32[$vararg_ptr110>>2] = $157;
    $vararg_ptr111 = ((($vararg_buffer107)) + 8|0);
    HEAP32[$vararg_ptr111>>2] = $160;
    $vararg_ptr112 = ((($vararg_buffer107)) + 12|0);
    HEAP32[$vararg_ptr112>>2] = $163;
    (_sprintf($0,9647,$vararg_buffer107)|0);
    break;
   }
   case 86:  {
    $164 = ((($6)) + 10|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165&255;
    $167 = ((($6)) + 8|0);
    $168 = HEAP8[$167>>0]|0;
    $169 = $168&255;
    $170 = ((($6)) + 9|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = $171&255;
    HEAP32[$vararg_buffer113>>2] = 9706;
    $vararg_ptr116 = ((($vararg_buffer113)) + 4|0);
    HEAP32[$vararg_ptr116>>2] = $166;
    $vararg_ptr117 = ((($vararg_buffer113)) + 8|0);
    HEAP32[$vararg_ptr117>>2] = $169;
    $vararg_ptr118 = ((($vararg_buffer113)) + 12|0);
    HEAP32[$vararg_ptr118>>2] = $172;
    (_sprintf($0,9647,$vararg_buffer113)|0);
    break;
   }
   case 88:  {
    $173 = ((($6)) + 10|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = $174&255;
    $176 = ((($6)) + 8|0);
    $177 = HEAP8[$176>>0]|0;
    $178 = $177&255;
    $179 = ((($6)) + 9|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    HEAP32[$vararg_buffer119>>2] = 9712;
    $vararg_ptr122 = ((($vararg_buffer119)) + 4|0);
    HEAP32[$vararg_ptr122>>2] = $175;
    $vararg_ptr123 = ((($vararg_buffer119)) + 8|0);
    HEAP32[$vararg_ptr123>>2] = $178;
    $vararg_ptr124 = ((($vararg_buffer119)) + 12|0);
    HEAP32[$vararg_ptr124>>2] = $181;
    (_sprintf($0,9647,$vararg_buffer119)|0);
    break;
   }
   case 84:  {
    $182 = ((($6)) + 10|0);
    $183 = HEAP8[$182>>0]|0;
    $184 = $183&255;
    $185 = ((($6)) + 8|0);
    $186 = HEAP8[$185>>0]|0;
    $187 = $186&255;
    $188 = ((($6)) + 9|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $189&255;
    HEAP32[$vararg_buffer125>>2] = 9718;
    $vararg_ptr128 = ((($vararg_buffer125)) + 4|0);
    HEAP32[$vararg_ptr128>>2] = $184;
    $vararg_ptr129 = ((($vararg_buffer125)) + 8|0);
    HEAP32[$vararg_ptr129>>2] = $187;
    $vararg_ptr130 = ((($vararg_buffer125)) + 12|0);
    HEAP32[$vararg_ptr130>>2] = $190;
    (_sprintf($0,9647,$vararg_buffer125)|0);
    break;
   }
   case 40:  {
    $191 = ((($6)) + 10|0);
    $192 = HEAP8[$191>>0]|0;
    $193 = $192&255;
    $194 = ((($6)) + 8|0);
    $195 = HEAP8[$194>>0]|0;
    $196 = $195&255;
    $197 = ((($6)) + 9|0);
    $198 = HEAP8[$197>>0]|0;
    $199 = $198&255;
    HEAP32[$vararg_buffer131>>2] = 9724;
    $vararg_ptr134 = ((($vararg_buffer131)) + 4|0);
    HEAP32[$vararg_ptr134>>2] = $193;
    $vararg_ptr135 = ((($vararg_buffer131)) + 8|0);
    HEAP32[$vararg_ptr135>>2] = $196;
    $vararg_ptr136 = ((($vararg_buffer131)) + 12|0);
    HEAP32[$vararg_ptr136>>2] = $199;
    (_sprintf($0,9647,$vararg_buffer131)|0);
    break;
   }
   case 60:  {
    $200 = ((($6)) + 10|0);
    $201 = HEAP8[$200>>0]|0;
    $202 = $201&255;
    $203 = ((($6)) + 8|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = $204&255;
    $206 = ((($6)) + 9|0);
    $207 = HEAP8[$206>>0]|0;
    $208 = $207&255;
    HEAP32[$vararg_buffer137>>2] = 9728;
    $vararg_ptr140 = ((($vararg_buffer137)) + 4|0);
    HEAP32[$vararg_ptr140>>2] = $202;
    $vararg_ptr141 = ((($vararg_buffer137)) + 8|0);
    HEAP32[$vararg_ptr141>>2] = $205;
    $vararg_ptr142 = ((($vararg_buffer137)) + 12|0);
    HEAP32[$vararg_ptr142>>2] = $208;
    (_sprintf($0,9647,$vararg_buffer137)|0);
    break;
   }
   case 48:  {
    $209 = ((($6)) + 10|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $210&255;
    $212 = ((($6)) + 8|0);
    $213 = HEAP8[$212>>0]|0;
    $214 = $213&255;
    $215 = ((($6)) + 9|0);
    $216 = HEAP8[$215>>0]|0;
    $217 = $216&255;
    HEAP32[$vararg_buffer143>>2] = 9732;
    $vararg_ptr146 = ((($vararg_buffer143)) + 4|0);
    HEAP32[$vararg_ptr146>>2] = $211;
    $vararg_ptr147 = ((($vararg_buffer143)) + 8|0);
    HEAP32[$vararg_ptr147>>2] = $214;
    $vararg_ptr148 = ((($vararg_buffer143)) + 12|0);
    HEAP32[$vararg_ptr148>>2] = $217;
    (_sprintf($0,9647,$vararg_buffer143)|0);
    break;
   }
   case 44:  {
    $218 = ((($6)) + 10|0);
    $219 = HEAP8[$218>>0]|0;
    $220 = $219&255;
    $221 = ((($6)) + 8|0);
    $222 = HEAP8[$221>>0]|0;
    $223 = $222&255;
    $224 = ((($6)) + 9|0);
    $225 = HEAP8[$224>>0]|0;
    $226 = $225&255;
    HEAP32[$vararg_buffer149>>2] = 9736;
    $vararg_ptr152 = ((($vararg_buffer149)) + 4|0);
    HEAP32[$vararg_ptr152>>2] = $220;
    $vararg_ptr153 = ((($vararg_buffer149)) + 8|0);
    HEAP32[$vararg_ptr153>>2] = $223;
    $vararg_ptr154 = ((($vararg_buffer149)) + 12|0);
    HEAP32[$vararg_ptr154>>2] = $226;
    (_sprintf($0,9647,$vararg_buffer149)|0);
    break;
   }
   case 56:  {
    $227 = ((($6)) + 10|0);
    $228 = HEAP8[$227>>0]|0;
    $229 = $228&255;
    $230 = ((($6)) + 8|0);
    $231 = HEAP8[$230>>0]|0;
    $232 = $231&255;
    $233 = ((($6)) + 9|0);
    $234 = HEAP8[$233>>0]|0;
    $235 = $234&255;
    HEAP32[$vararg_buffer155>>2] = 9740;
    $vararg_ptr158 = ((($vararg_buffer155)) + 4|0);
    HEAP32[$vararg_ptr158>>2] = $229;
    $vararg_ptr159 = ((($vararg_buffer155)) + 8|0);
    HEAP32[$vararg_ptr159>>2] = $232;
    $vararg_ptr160 = ((($vararg_buffer155)) + 12|0);
    HEAP32[$vararg_ptr160>>2] = $235;
    (_sprintf($0,9647,$vararg_buffer155)|0);
    break;
   }
   case 52:  {
    $236 = ((($6)) + 10|0);
    $237 = HEAP8[$236>>0]|0;
    $238 = $237&255;
    $239 = ((($6)) + 8|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ((($6)) + 9|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    HEAP32[$vararg_buffer161>>2] = 9744;
    $vararg_ptr164 = ((($vararg_buffer161)) + 4|0);
    HEAP32[$vararg_ptr164>>2] = $238;
    $vararg_ptr165 = ((($vararg_buffer161)) + 8|0);
    HEAP32[$vararg_ptr165>>2] = $241;
    $vararg_ptr166 = ((($vararg_buffer161)) + 12|0);
    HEAP32[$vararg_ptr166>>2] = $244;
    (_sprintf($0,9647,$vararg_buffer161)|0);
    break;
   }
   case 71:  {
    $245 = ((($6)) + 10|0);
    $246 = HEAP8[$245>>0]|0;
    $247 = $246&255;
    $248 = ((($6)) + 8|0);
    $249 = HEAP8[$248>>0]|0;
    $250 = $249&255;
    $251 = ((($6)) + 12|0);
    $252 = HEAP16[$251>>1]|0;
    $253 = $252 << 16 >> 16;
    HEAP32[$vararg_buffer167>>2] = 9662;
    $vararg_ptr170 = ((($vararg_buffer167)) + 4|0);
    HEAP32[$vararg_ptr170>>2] = $247;
    $vararg_ptr171 = ((($vararg_buffer167)) + 8|0);
    HEAP32[$vararg_ptr171>>2] = $250;
    $vararg_ptr172 = ((($vararg_buffer167)) + 12|0);
    HEAP32[$vararg_ptr172>>2] = $253;
    (_sprintf($0,9748,$vararg_buffer167)|0);
    break;
   }
   case 75:  {
    $254 = ((($6)) + 10|0);
    $255 = HEAP8[$254>>0]|0;
    $256 = $255&255;
    $257 = ((($6)) + 8|0);
    $258 = HEAP8[$257>>0]|0;
    $259 = $258&255;
    $260 = ((($6)) + 12|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = $261 << 16 >> 16;
    HEAP32[$vararg_buffer173>>2] = 9667;
    $vararg_ptr176 = ((($vararg_buffer173)) + 4|0);
    HEAP32[$vararg_ptr176>>2] = $256;
    $vararg_ptr177 = ((($vararg_buffer173)) + 8|0);
    HEAP32[$vararg_ptr177>>2] = $259;
    $vararg_ptr178 = ((($vararg_buffer173)) + 12|0);
    HEAP32[$vararg_ptr178>>2] = $262;
    (_sprintf($0,9748,$vararg_buffer173)|0);
    break;
   }
   case 21:  {
    $263 = ((($6)) + 10|0);
    $264 = HEAP8[$263>>0]|0;
    $265 = $264&255;
    $266 = ((($6)) + 8|0);
    $267 = HEAP8[$266>>0]|0;
    $268 = $267&255;
    $269 = ((($6)) + 12|0);
    $270 = HEAP16[$269>>1]|0;
    $271 = $270 << 16 >> 16;
    HEAP32[$vararg_buffer179>>2] = 9695;
    $vararg_ptr182 = ((($vararg_buffer179)) + 4|0);
    HEAP32[$vararg_ptr182>>2] = $265;
    $vararg_ptr183 = ((($vararg_buffer179)) + 8|0);
    HEAP32[$vararg_ptr183>>2] = $268;
    $vararg_ptr184 = ((($vararg_buffer179)) + 12|0);
    HEAP32[$vararg_ptr184>>2] = $271;
    (_sprintf($0,9748,$vararg_buffer179)|0);
    break;
   }
   case 23:  {
    $272 = ((($6)) + 10|0);
    $273 = HEAP8[$272>>0]|0;
    $274 = $273&255;
    $275 = ((($6)) + 8|0);
    $276 = HEAP8[$275>>0]|0;
    $277 = $276&255;
    $278 = ((($6)) + 12|0);
    $279 = HEAP16[$278>>1]|0;
    $280 = $279 << 16 >> 16;
    HEAP32[$vararg_buffer185>>2] = 9699;
    $vararg_ptr188 = ((($vararg_buffer185)) + 4|0);
    HEAP32[$vararg_ptr188>>2] = $274;
    $vararg_ptr189 = ((($vararg_buffer185)) + 8|0);
    HEAP32[$vararg_ptr189>>2] = $277;
    $vararg_ptr190 = ((($vararg_buffer185)) + 12|0);
    HEAP32[$vararg_ptr190>>2] = $280;
    (_sprintf($0,9748,$vararg_buffer185)|0);
    break;
   }
   case 25:  {
    $281 = ((($6)) + 10|0);
    $282 = HEAP8[$281>>0]|0;
    $283 = $282&255;
    $284 = ((($6)) + 8|0);
    $285 = HEAP8[$284>>0]|0;
    $286 = $285&255;
    $287 = ((($6)) + 12|0);
    $288 = HEAP16[$287>>1]|0;
    $289 = $288 << 16 >> 16;
    HEAP32[$vararg_buffer191>>2] = 9702;
    $vararg_ptr194 = ((($vararg_buffer191)) + 4|0);
    HEAP32[$vararg_ptr194>>2] = $283;
    $vararg_ptr195 = ((($vararg_buffer191)) + 8|0);
    HEAP32[$vararg_ptr195>>2] = $286;
    $vararg_ptr196 = ((($vararg_buffer191)) + 12|0);
    HEAP32[$vararg_ptr196>>2] = $289;
    (_sprintf($0,9748,$vararg_buffer191)|0);
    break;
   }
   case 87:  {
    $290 = ((($6)) + 10|0);
    $291 = HEAP8[$290>>0]|0;
    $292 = $291&255;
    $293 = ((($6)) + 8|0);
    $294 = HEAP8[$293>>0]|0;
    $295 = $294&255;
    $296 = ((($6)) + 12|0);
    $297 = HEAP16[$296>>1]|0;
    $298 = $297 << 16 >> 16;
    HEAP32[$vararg_buffer197>>2] = 9763;
    $vararg_ptr200 = ((($vararg_buffer197)) + 4|0);
    HEAP32[$vararg_ptr200>>2] = $292;
    $vararg_ptr201 = ((($vararg_buffer197)) + 8|0);
    HEAP32[$vararg_ptr201>>2] = $295;
    $vararg_ptr202 = ((($vararg_buffer197)) + 12|0);
    HEAP32[$vararg_ptr202>>2] = $298;
    (_sprintf($0,9748,$vararg_buffer197)|0);
    break;
   }
   case 89:  {
    $299 = ((($6)) + 10|0);
    $300 = HEAP8[$299>>0]|0;
    $301 = $300&255;
    $302 = ((($6)) + 8|0);
    $303 = HEAP8[$302>>0]|0;
    $304 = $303&255;
    $305 = ((($6)) + 12|0);
    $306 = HEAP16[$305>>1]|0;
    $307 = $306 << 16 >> 16;
    HEAP32[$vararg_buffer203>>2] = 9768;
    $vararg_ptr206 = ((($vararg_buffer203)) + 4|0);
    HEAP32[$vararg_ptr206>>2] = $301;
    $vararg_ptr207 = ((($vararg_buffer203)) + 8|0);
    HEAP32[$vararg_ptr207>>2] = $304;
    $vararg_ptr208 = ((($vararg_buffer203)) + 12|0);
    HEAP32[$vararg_ptr208>>2] = $307;
    (_sprintf($0,9748,$vararg_buffer203)|0);
    break;
   }
   case 85:  {
    $308 = ((($6)) + 10|0);
    $309 = HEAP8[$308>>0]|0;
    $310 = $309&255;
    $311 = ((($6)) + 8|0);
    $312 = HEAP8[$311>>0]|0;
    $313 = $312&255;
    $314 = ((($6)) + 12|0);
    $315 = HEAP16[$314>>1]|0;
    $316 = $315 << 16 >> 16;
    HEAP32[$vararg_buffer209>>2] = 9773;
    $vararg_ptr212 = ((($vararg_buffer209)) + 4|0);
    HEAP32[$vararg_ptr212>>2] = $310;
    $vararg_ptr213 = ((($vararg_buffer209)) + 8|0);
    HEAP32[$vararg_ptr213>>2] = $313;
    $vararg_ptr214 = ((($vararg_buffer209)) + 12|0);
    HEAP32[$vararg_ptr214>>2] = $316;
    (_sprintf($0,9748,$vararg_buffer209)|0);
    break;
   }
   case 41:  {
    $317 = ((($6)) + 10|0);
    $318 = HEAP8[$317>>0]|0;
    $319 = $318&255;
    $320 = ((($6)) + 8|0);
    $321 = HEAP8[$320>>0]|0;
    $322 = $321&255;
    $323 = ((($6)) + 12|0);
    $324 = HEAP16[$323>>1]|0;
    $325 = $324 << 16 >> 16;
    HEAP32[$vararg_buffer215>>2] = 9724;
    $vararg_ptr218 = ((($vararg_buffer215)) + 4|0);
    HEAP32[$vararg_ptr218>>2] = $319;
    $vararg_ptr219 = ((($vararg_buffer215)) + 8|0);
    HEAP32[$vararg_ptr219>>2] = $322;
    $vararg_ptr220 = ((($vararg_buffer215)) + 12|0);
    HEAP32[$vararg_ptr220>>2] = $325;
    (_sprintf($0,9748,$vararg_buffer215)|0);
    break;
   }
   case 61:  {
    $326 = ((($6)) + 10|0);
    $327 = HEAP8[$326>>0]|0;
    $328 = $327&255;
    $329 = ((($6)) + 8|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = $330&255;
    $332 = ((($6)) + 12|0);
    $333 = HEAP16[$332>>1]|0;
    $334 = $333 << 16 >> 16;
    HEAP32[$vararg_buffer221>>2] = 9728;
    $vararg_ptr224 = ((($vararg_buffer221)) + 4|0);
    HEAP32[$vararg_ptr224>>2] = $328;
    $vararg_ptr225 = ((($vararg_buffer221)) + 8|0);
    HEAP32[$vararg_ptr225>>2] = $331;
    $vararg_ptr226 = ((($vararg_buffer221)) + 12|0);
    HEAP32[$vararg_ptr226>>2] = $334;
    (_sprintf($0,9748,$vararg_buffer221)|0);
    break;
   }
   case 49:  {
    $335 = ((($6)) + 10|0);
    $336 = HEAP8[$335>>0]|0;
    $337 = $336&255;
    $338 = ((($6)) + 8|0);
    $339 = HEAP8[$338>>0]|0;
    $340 = $339&255;
    $341 = ((($6)) + 12|0);
    $342 = HEAP16[$341>>1]|0;
    $343 = $342 << 16 >> 16;
    HEAP32[$vararg_buffer227>>2] = 9732;
    $vararg_ptr230 = ((($vararg_buffer227)) + 4|0);
    HEAP32[$vararg_ptr230>>2] = $337;
    $vararg_ptr231 = ((($vararg_buffer227)) + 8|0);
    HEAP32[$vararg_ptr231>>2] = $340;
    $vararg_ptr232 = ((($vararg_buffer227)) + 12|0);
    HEAP32[$vararg_ptr232>>2] = $343;
    (_sprintf($0,9748,$vararg_buffer227)|0);
    break;
   }
   case 45:  {
    $344 = ((($6)) + 10|0);
    $345 = HEAP8[$344>>0]|0;
    $346 = $345&255;
    $347 = ((($6)) + 8|0);
    $348 = HEAP8[$347>>0]|0;
    $349 = $348&255;
    $350 = ((($6)) + 12|0);
    $351 = HEAP16[$350>>1]|0;
    $352 = $351 << 16 >> 16;
    HEAP32[$vararg_buffer233>>2] = 9736;
    $vararg_ptr236 = ((($vararg_buffer233)) + 4|0);
    HEAP32[$vararg_ptr236>>2] = $346;
    $vararg_ptr237 = ((($vararg_buffer233)) + 8|0);
    HEAP32[$vararg_ptr237>>2] = $349;
    $vararg_ptr238 = ((($vararg_buffer233)) + 12|0);
    HEAP32[$vararg_ptr238>>2] = $352;
    (_sprintf($0,9748,$vararg_buffer233)|0);
    break;
   }
   case 57:  {
    $353 = ((($6)) + 10|0);
    $354 = HEAP8[$353>>0]|0;
    $355 = $354&255;
    $356 = ((($6)) + 8|0);
    $357 = HEAP8[$356>>0]|0;
    $358 = $357&255;
    $359 = ((($6)) + 12|0);
    $360 = HEAP16[$359>>1]|0;
    $361 = $360 << 16 >> 16;
    HEAP32[$vararg_buffer239>>2] = 9740;
    $vararg_ptr242 = ((($vararg_buffer239)) + 4|0);
    HEAP32[$vararg_ptr242>>2] = $355;
    $vararg_ptr243 = ((($vararg_buffer239)) + 8|0);
    HEAP32[$vararg_ptr243>>2] = $358;
    $vararg_ptr244 = ((($vararg_buffer239)) + 12|0);
    HEAP32[$vararg_ptr244>>2] = $361;
    (_sprintf($0,9748,$vararg_buffer239)|0);
    break;
   }
   case 53:  {
    $362 = ((($6)) + 10|0);
    $363 = HEAP8[$362>>0]|0;
    $364 = $363&255;
    $365 = ((($6)) + 8|0);
    $366 = HEAP8[$365>>0]|0;
    $367 = $366&255;
    $368 = ((($6)) + 12|0);
    $369 = HEAP16[$368>>1]|0;
    $370 = $369 << 16 >> 16;
    HEAP32[$vararg_buffer245>>2] = 9744;
    $vararg_ptr248 = ((($vararg_buffer245)) + 4|0);
    HEAP32[$vararg_ptr248>>2] = $364;
    $vararg_ptr249 = ((($vararg_buffer245)) + 8|0);
    HEAP32[$vararg_ptr249>>2] = $367;
    $vararg_ptr250 = ((($vararg_buffer245)) + 12|0);
    HEAP32[$vararg_ptr250>>2] = $370;
    (_sprintf($0,9748,$vararg_buffer245)|0);
    break;
   }
   case 101:  {
    $371 = (_i64Add(($1|0),($2|0),4,0)|0);
    $372 = tempRet0;
    $373 = ((($6)) + 12|0);
    $374 = HEAP16[$373>>1]|0;
    $375 = $374 << 16 >> 16;
    $376 = ($375|0)<(0);
    $377 = $376 << 31 >> 31;
    $378 = (_i64Add(($371|0),($372|0),($375|0),($377|0))|0);
    $379 = tempRet0;
    _te_etiqueta($4,$378,$379,2);
    $380 = ((($6)) + 8|0);
    $381 = HEAP8[$380>>0]|0;
    $382 = $381&255;
    HEAP32[$vararg_buffer251>>2] = 9788;
    $vararg_ptr254 = ((($vararg_buffer251)) + 4|0);
    HEAP32[$vararg_ptr254>>2] = $382;
    $vararg_ptr255 = ((($vararg_buffer251)) + 8|0);
    HEAP32[$vararg_ptr255>>2] = $4;
    (_sprintf($0,9778,$vararg_buffer251)|0);
    break;
   }
   case 100:  {
    $383 = (_i64Add(($1|0),($2|0),4,0)|0);
    $384 = tempRet0;
    $385 = ((($6)) + 12|0);
    $386 = HEAP16[$385>>1]|0;
    $387 = $386 << 16 >> 16;
    $388 = ($387|0)<(0);
    $389 = $388 << 31 >> 31;
    $390 = (_i64Add(($383|0),($384|0),($387|0),($389|0))|0);
    $391 = tempRet0;
    _te_etiqueta($4,$390,$391,2);
    $392 = ((($6)) + 8|0);
    $393 = HEAP8[$392>>0]|0;
    $394 = $393&255;
    HEAP32[$vararg_buffer256>>2] = 9793;
    $vararg_ptr259 = ((($vararg_buffer256)) + 4|0);
    HEAP32[$vararg_ptr259>>2] = $394;
    $vararg_ptr260 = ((($vararg_buffer256)) + 8|0);
    HEAP32[$vararg_ptr260>>2] = $4;
    (_sprintf($0,9778,$vararg_buffer256)|0);
    break;
   }
   case 103:  {
    $395 = (_i64Add(($1|0),($2|0),4,0)|0);
    $396 = tempRet0;
    $397 = ((($6)) + 12|0);
    $398 = HEAP16[$397>>1]|0;
    $399 = $398 << 16 >> 16;
    $400 = ($399|0)<(0);
    $401 = $400 << 31 >> 31;
    $402 = (_i64Add(($395|0),($396|0),($399|0),($401|0))|0);
    $403 = tempRet0;
    _te_etiqueta($4,$402,$403,2);
    $404 = ((($6)) + 8|0);
    $405 = HEAP8[$404>>0]|0;
    $406 = $405&255;
    $407 = ((($6)) + 9|0);
    $408 = HEAP8[$407>>0]|0;
    $409 = $408&255;
    HEAP32[$vararg_buffer261>>2] = 9812;
    $vararg_ptr264 = ((($vararg_buffer261)) + 4|0);
    HEAP32[$vararg_ptr264>>2] = $406;
    $vararg_ptr265 = ((($vararg_buffer261)) + 8|0);
    HEAP32[$vararg_ptr265>>2] = $409;
    $vararg_ptr266 = ((($vararg_buffer261)) + 12|0);
    HEAP32[$vararg_ptr266>>2] = $4;
    (_sprintf($0,9798,$vararg_buffer261)|0);
    break;
   }
   case 102:  {
    $410 = (_i64Add(($1|0),($2|0),4,0)|0);
    $411 = tempRet0;
    $412 = ((($6)) + 12|0);
    $413 = HEAP16[$412>>1]|0;
    $414 = $413 << 16 >> 16;
    $415 = ($414|0)<(0);
    $416 = $415 << 31 >> 31;
    $417 = (_i64Add(($410|0),($411|0),($414|0),($416|0))|0);
    $418 = tempRet0;
    _te_etiqueta($4,$417,$418,2);
    $419 = ((($6)) + 8|0);
    $420 = HEAP8[$419>>0]|0;
    $421 = $420&255;
    $422 = ((($6)) + 9|0);
    $423 = HEAP8[$422>>0]|0;
    $424 = $423&255;
    HEAP32[$vararg_buffer267>>2] = 9816;
    $vararg_ptr270 = ((($vararg_buffer267)) + 4|0);
    HEAP32[$vararg_ptr270>>2] = $421;
    $vararg_ptr271 = ((($vararg_buffer267)) + 8|0);
    HEAP32[$vararg_ptr271>>2] = $424;
    $vararg_ptr272 = ((($vararg_buffer267)) + 12|0);
    HEAP32[$vararg_ptr272>>2] = $4;
    (_sprintf($0,9798,$vararg_buffer267)|0);
    break;
   }
   case 104:  {
    $425 = (_i64Add(($1|0),($2|0),4,0)|0);
    $426 = tempRet0;
    $427 = ((($6)) + 12|0);
    $428 = HEAP16[$427>>1]|0;
    $429 = $428 << 16 >> 16;
    $430 = ($429|0)<(0);
    $431 = $430 << 31 >> 31;
    $432 = (_i64Add(($425|0),($426|0),($429|0),($431|0))|0);
    $433 = tempRet0;
    _te_etiqueta($4,$432,$433,2);
    HEAP32[$vararg_buffer273>>2] = 9826;
    $vararg_ptr276 = ((($vararg_buffer273)) + 4|0);
    HEAP32[$vararg_ptr276>>2] = $4;
    (_sprintf($0,9820,$vararg_buffer273)|0);
    break;
   }
   case 105:  {
    $434 = (_i64Add(($1|0),($2|0),4,0)|0);
    $435 = tempRet0;
    $436 = ((($6)) + 12|0);
    $437 = HEAP16[$436>>1]|0;
    $438 = $437 << 16 >> 16;
    $439 = ($438|0)<(0);
    $440 = $439 << 31 >> 31;
    $441 = (_i64Add(($434|0),($435|0),($438|0),($440|0))|0);
    $442 = tempRet0;
    _te_etiqueta($4,$441,$442,2);
    HEAP32[$vararg_buffer277>>2] = 9831;
    $vararg_ptr280 = ((($vararg_buffer277)) + 4|0);
    HEAP32[$vararg_ptr280>>2] = $4;
    (_sprintf($0,9820,$vararg_buffer277)|0);
    break;
   }
   case 107:  {
    $443 = ((($6)) + 10|0);
    $444 = HEAP8[$443>>0]|0;
    $445 = $444&255;
    $446 = ((($6)) + 8|0);
    $447 = HEAP8[$446>>0]|0;
    $448 = $447&255;
    $449 = ((($6)) + 9|0);
    $450 = HEAP8[$449>>0]|0;
    $451 = $450&255;
    HEAP32[$vararg_buffer281>>2] = 9836;
    $vararg_ptr284 = ((($vararg_buffer281)) + 4|0);
    HEAP32[$vararg_ptr284>>2] = $445;
    $vararg_ptr285 = ((($vararg_buffer281)) + 8|0);
    HEAP32[$vararg_ptr285>>2] = $448;
    $vararg_ptr286 = ((($vararg_buffer281)) + 12|0);
    HEAP32[$vararg_ptr286>>2] = $451;
    (_sprintf($0,9647,$vararg_buffer281)|0);
    break;
   }
   case 106:  {
    $452 = ((($6)) + 10|0);
    $453 = HEAP8[$452>>0]|0;
    $454 = $453&255;
    $455 = ((($6)) + 8|0);
    $456 = HEAP8[$455>>0]|0;
    $457 = $456&255;
    $458 = ((($6)) + 9|0);
    $459 = HEAP8[$458>>0]|0;
    $460 = $459&255;
    HEAP32[$vararg_buffer287>>2] = 9841;
    $vararg_ptr290 = ((($vararg_buffer287)) + 4|0);
    HEAP32[$vararg_ptr290>>2] = $454;
    $vararg_ptr291 = ((($vararg_buffer287)) + 8|0);
    HEAP32[$vararg_ptr291>>2] = $457;
    $vararg_ptr292 = ((($vararg_buffer287)) + 12|0);
    HEAP32[$vararg_ptr292>>2] = $460;
    (_sprintf($0,9647,$vararg_buffer287)|0);
    break;
   }
   case 108:  {
    $461 = (_i64Add(($1|0),($2|0),4,0)|0);
    $462 = tempRet0;
    $463 = ((($6)) + 12|0);
    $464 = HEAP16[$463>>1]|0;
    $465 = $464 << 16 >> 16;
    $466 = ($465|0)<(0);
    $467 = $466 << 31 >> 31;
    $468 = (_i64Add(($461|0),($462|0),($465|0),($467|0))|0);
    $469 = tempRet0;
    _te_etiqueta($4,$468,$469,2);
    HEAP32[$vararg_buffer293>>2] = 9846;
    $vararg_ptr296 = ((($vararg_buffer293)) + 4|0);
    HEAP32[$vararg_ptr296>>2] = $4;
    (_sprintf($0,9820,$vararg_buffer293)|0);
    break;
   }
   case 110:  {
    $470 = (_i64Add(($1|0),($2|0),4,0)|0);
    $471 = tempRet0;
    $472 = ((($6)) + 12|0);
    $473 = HEAP16[$472>>1]|0;
    $474 = $473 << 16 >> 16;
    $475 = ($474|0)<(0);
    $476 = $475 << 31 >> 31;
    $477 = (_i64Add(($470|0),($471|0),($474|0),($476|0))|0);
    $478 = tempRet0;
    _te_etiqueta($4,$477,$478,2);
    HEAP32[$vararg_buffer297>>2] = 9848;
    $vararg_ptr300 = ((($vararg_buffer297)) + 4|0);
    HEAP32[$vararg_ptr300>>2] = $4;
    (_sprintf($0,9820,$vararg_buffer297)|0);
    break;
   }
   case 109:  {
    $479 = ((($6)) + 8|0);
    $480 = HEAP8[$479>>0]|0;
    $481 = $480&255;
    HEAP32[$vararg_buffer301>>2] = $481;
    (_sprintf($0,9852,$vararg_buffer301)|0);
    break;
   }
   case 111:  {
    $482 = (_i64Add(($1|0),($2|0),4,0)|0);
    $483 = tempRet0;
    $484 = ((($6)) + 12|0);
    $485 = HEAP16[$484>>1]|0;
    $486 = $485 << 16 >> 16;
    $487 = ($486|0)<(0);
    $488 = $487 << 31 >> 31;
    $489 = (_i64Add(($482|0),($483|0),($486|0),($488|0))|0);
    $490 = tempRet0;
    _te_etiqueta($4,$489,$490,2);
    $491 = ((($6)) + 8|0);
    $492 = HEAP8[$491>>0]|0;
    $493 = $492&255;
    HEAP32[$vararg_buffer304>>2] = $493;
    $vararg_ptr307 = ((($vararg_buffer304)) + 4|0);
    HEAP32[$vararg_ptr307>>2] = $4;
    (_sprintf($0,9859,$vararg_buffer304)|0);
    break;
   }
   case -113:  {
    $494 = ((($6)) + 10|0);
    $495 = HEAP8[$494>>0]|0;
    $496 = $495&255;
    $497 = ((($6)) + 8|0);
    $498 = HEAP8[$497>>0]|0;
    $499 = $498&255;
    $500 = ((($6)) + 9|0);
    $501 = HEAP8[$500>>0]|0;
    $502 = $501&255;
    HEAP32[$vararg_buffer308>>2] = 9886;
    $vararg_ptr311 = ((($vararg_buffer308)) + 4|0);
    HEAP32[$vararg_ptr311>>2] = $496;
    $vararg_ptr312 = ((($vararg_buffer308)) + 8|0);
    HEAP32[$vararg_ptr312>>2] = $499;
    $vararg_ptr313 = ((($vararg_buffer308)) + 12|0);
    HEAP32[$vararg_ptr313>>2] = $502;
    (_sprintf($0,9871,$vararg_buffer308)|0);
    break;
   }
   case -112:  {
    $503 = ((($6)) + 10|0);
    $504 = HEAP8[$503>>0]|0;
    $505 = $504&255;
    $506 = ((($6)) + 8|0);
    $507 = HEAP8[$506>>0]|0;
    $508 = $507&255;
    $509 = ((($6)) + 9|0);
    $510 = HEAP8[$509>>0]|0;
    $511 = $510&255;
    HEAP32[$vararg_buffer314>>2] = 9892;
    $vararg_ptr317 = ((($vararg_buffer314)) + 4|0);
    HEAP32[$vararg_ptr317>>2] = $505;
    $vararg_ptr318 = ((($vararg_buffer314)) + 8|0);
    HEAP32[$vararg_ptr318>>2] = $508;
    $vararg_ptr319 = ((($vararg_buffer314)) + 12|0);
    HEAP32[$vararg_ptr319>>2] = $511;
    (_sprintf($0,9871,$vararg_buffer314)|0);
    break;
   }
   case -111:  {
    $512 = ((($6)) + 10|0);
    $513 = HEAP8[$512>>0]|0;
    $514 = $513&255;
    $515 = ((($6)) + 8|0);
    $516 = HEAP8[$515>>0]|0;
    $517 = $516&255;
    $518 = ((($6)) + 9|0);
    $519 = HEAP8[$518>>0]|0;
    $520 = $519&255;
    HEAP32[$vararg_buffer320>>2] = 9898;
    $vararg_ptr323 = ((($vararg_buffer320)) + 4|0);
    HEAP32[$vararg_ptr323>>2] = $514;
    $vararg_ptr324 = ((($vararg_buffer320)) + 8|0);
    HEAP32[$vararg_ptr324>>2] = $517;
    $vararg_ptr325 = ((($vararg_buffer320)) + 12|0);
    HEAP32[$vararg_ptr325>>2] = $520;
    (_sprintf($0,9871,$vararg_buffer320)|0);
    break;
   }
   case -110:  {
    $521 = ((($6)) + 10|0);
    $522 = HEAP8[$521>>0]|0;
    $523 = $522&255;
    $524 = ((($6)) + 8|0);
    $525 = HEAP8[$524>>0]|0;
    $526 = $525&255;
    $527 = ((($6)) + 9|0);
    $528 = HEAP8[$527>>0]|0;
    $529 = $528&255;
    HEAP32[$vararg_buffer326>>2] = 9904;
    $vararg_ptr329 = ((($vararg_buffer326)) + 4|0);
    HEAP32[$vararg_ptr329>>2] = $523;
    $vararg_ptr330 = ((($vararg_buffer326)) + 8|0);
    HEAP32[$vararg_ptr330>>2] = $526;
    $vararg_ptr331 = ((($vararg_buffer326)) + 12|0);
    HEAP32[$vararg_ptr331>>2] = $529;
    (_sprintf($0,9871,$vararg_buffer326)|0);
    break;
   }
   case -126:  {
    $530 = ((($6)) + 10|0);
    $531 = HEAP8[$530>>0]|0;
    $532 = $531&255;
    $533 = ((($6)) + 8|0);
    $534 = HEAP8[$533>>0]|0;
    $535 = $534&255;
    $536 = ((($6)) + 9|0);
    $537 = HEAP8[$536>>0]|0;
    $538 = $537&255;
    HEAP32[$vararg_buffer332>>2] = 9910;
    $vararg_ptr335 = ((($vararg_buffer332)) + 4|0);
    HEAP32[$vararg_ptr335>>2] = $532;
    $vararg_ptr336 = ((($vararg_buffer332)) + 8|0);
    HEAP32[$vararg_ptr336>>2] = $535;
    $vararg_ptr337 = ((($vararg_buffer332)) + 12|0);
    HEAP32[$vararg_ptr337>>2] = $538;
    (_sprintf($0,9871,$vararg_buffer332)|0);
    break;
   }
   case -125:  {
    $539 = ((($6)) + 10|0);
    $540 = HEAP8[$539>>0]|0;
    $541 = $540&255;
    $542 = ((($6)) + 8|0);
    $543 = HEAP8[$542>>0]|0;
    $544 = $543&255;
    $545 = ((($6)) + 9|0);
    $546 = HEAP8[$545>>0]|0;
    $547 = $546&255;
    HEAP32[$vararg_buffer338>>2] = 9916;
    $vararg_ptr341 = ((($vararg_buffer338)) + 4|0);
    HEAP32[$vararg_ptr341>>2] = $541;
    $vararg_ptr342 = ((($vararg_buffer338)) + 8|0);
    HEAP32[$vararg_ptr342>>2] = $544;
    $vararg_ptr343 = ((($vararg_buffer338)) + 12|0);
    HEAP32[$vararg_ptr343>>2] = $547;
    (_sprintf($0,9871,$vararg_buffer338)|0);
    break;
   }
   case -124:  {
    $548 = ((($6)) + 10|0);
    $549 = HEAP8[$548>>0]|0;
    $550 = $549&255;
    $551 = ((($6)) + 8|0);
    $552 = HEAP8[$551>>0]|0;
    $553 = $552&255;
    $554 = ((($6)) + 9|0);
    $555 = HEAP8[$554>>0]|0;
    $556 = $555&255;
    HEAP32[$vararg_buffer344>>2] = 9922;
    $vararg_ptr347 = ((($vararg_buffer344)) + 4|0);
    HEAP32[$vararg_ptr347>>2] = $550;
    $vararg_ptr348 = ((($vararg_buffer344)) + 8|0);
    HEAP32[$vararg_ptr348>>2] = $553;
    $vararg_ptr349 = ((($vararg_buffer344)) + 12|0);
    HEAP32[$vararg_ptr349>>2] = $556;
    (_sprintf($0,9871,$vararg_buffer344)|0);
    break;
   }
   case -123:  {
    $557 = ((($6)) + 10|0);
    $558 = HEAP8[$557>>0]|0;
    $559 = $558&255;
    $560 = ((($6)) + 8|0);
    $561 = HEAP8[$560>>0]|0;
    $562 = $561&255;
    $563 = ((($6)) + 9|0);
    $564 = HEAP8[$563>>0]|0;
    $565 = $564&255;
    HEAP32[$vararg_buffer350>>2] = 9928;
    $vararg_ptr353 = ((($vararg_buffer350)) + 4|0);
    HEAP32[$vararg_ptr353>>2] = $559;
    $vararg_ptr354 = ((($vararg_buffer350)) + 8|0);
    HEAP32[$vararg_ptr354>>2] = $562;
    $vararg_ptr355 = ((($vararg_buffer350)) + 12|0);
    HEAP32[$vararg_ptr355>>2] = $565;
    (_sprintf($0,9871,$vararg_buffer350)|0);
    break;
   }
   case -102:  {
    $566 = ((($6)) + 10|0);
    $567 = HEAP8[$566>>0]|0;
    $568 = $567&255;
    $569 = ((($6)) + 8|0);
    $570 = HEAP8[$569>>0]|0;
    $571 = $570&255;
    $572 = ((($6)) + 9|0);
    $573 = HEAP8[$572>>0]|0;
    $574 = $573&255;
    HEAP32[$vararg_buffer356>>2] = 9934;
    $vararg_ptr359 = ((($vararg_buffer356)) + 4|0);
    HEAP32[$vararg_ptr359>>2] = $568;
    $vararg_ptr360 = ((($vararg_buffer356)) + 8|0);
    HEAP32[$vararg_ptr360>>2] = $571;
    $vararg_ptr361 = ((($vararg_buffer356)) + 12|0);
    HEAP32[$vararg_ptr361>>2] = $574;
    (_sprintf($0,9871,$vararg_buffer356)|0);
    break;
   }
   case -101:  {
    $575 = ((($6)) + 10|0);
    $576 = HEAP8[$575>>0]|0;
    $577 = $576&255;
    $578 = ((($6)) + 8|0);
    $579 = HEAP8[$578>>0]|0;
    $580 = $579&255;
    $581 = ((($6)) + 9|0);
    $582 = HEAP8[$581>>0]|0;
    $583 = $582&255;
    HEAP32[$vararg_buffer362>>2] = 9941;
    $vararg_ptr365 = ((($vararg_buffer362)) + 4|0);
    HEAP32[$vararg_ptr365>>2] = $577;
    $vararg_ptr366 = ((($vararg_buffer362)) + 8|0);
    HEAP32[$vararg_ptr366>>2] = $580;
    $vararg_ptr367 = ((($vararg_buffer362)) + 12|0);
    HEAP32[$vararg_ptr367>>2] = $583;
    (_sprintf($0,9871,$vararg_buffer362)|0);
    break;
   }
   case -100:  {
    $584 = ((($6)) + 10|0);
    $585 = HEAP8[$584>>0]|0;
    $586 = $585&255;
    $587 = ((($6)) + 8|0);
    $588 = HEAP8[$587>>0]|0;
    $589 = $588&255;
    $590 = ((($6)) + 9|0);
    $591 = HEAP8[$590>>0]|0;
    $592 = $591&255;
    HEAP32[$vararg_buffer368>>2] = 9948;
    $vararg_ptr371 = ((($vararg_buffer368)) + 4|0);
    HEAP32[$vararg_ptr371>>2] = $586;
    $vararg_ptr372 = ((($vararg_buffer368)) + 8|0);
    HEAP32[$vararg_ptr372>>2] = $589;
    $vararg_ptr373 = ((($vararg_buffer368)) + 12|0);
    HEAP32[$vararg_ptr373>>2] = $592;
    (_sprintf($0,9871,$vararg_buffer368)|0);
    break;
   }
   case -99:  {
    $593 = ((($6)) + 10|0);
    $594 = HEAP8[$593>>0]|0;
    $595 = $594&255;
    $596 = ((($6)) + 8|0);
    $597 = HEAP8[$596>>0]|0;
    $598 = $597&255;
    $599 = ((($6)) + 9|0);
    $600 = HEAP8[$599>>0]|0;
    $601 = $600&255;
    HEAP32[$vararg_buffer374>>2] = 9955;
    $vararg_ptr377 = ((($vararg_buffer374)) + 4|0);
    HEAP32[$vararg_ptr377>>2] = $595;
    $vararg_ptr378 = ((($vararg_buffer374)) + 8|0);
    HEAP32[$vararg_ptr378>>2] = $598;
    $vararg_ptr379 = ((($vararg_buffer374)) + 12|0);
    HEAP32[$vararg_ptr379>>2] = $601;
    (_sprintf($0,9871,$vararg_buffer374)|0);
    break;
   }
   case -115:  {
    $602 = ((($6)) + 10|0);
    $603 = HEAP8[$602>>0]|0;
    $604 = $603&255;
    $605 = ((($6)) + 14|0);
    $606 = ((($6)) + 8|0);
    $607 = HEAP8[$606>>0]|0;
    $608 = $607&255;
    HEAP32[$vararg_buffer380>>2] = 9977;
    $vararg_ptr383 = ((($vararg_buffer380)) + 4|0);
    HEAP32[$vararg_ptr383>>2] = $604;
    $vararg_ptr384 = ((($vararg_buffer380)) + 8|0);
    HEAP32[$vararg_ptr384>>2] = $605;
    $vararg_ptr385 = ((($vararg_buffer380)) + 12|0);
    HEAP32[$vararg_ptr385>>2] = $608;
    (_sprintf($0,9962,$vararg_buffer380)|0);
    break;
   }
   case -114:  {
    $609 = ((($6)) + 9|0);
    $610 = HEAP8[$609>>0]|0;
    $611 = $610&255;
    $612 = ((($6)) + 14|0);
    $613 = ((($6)) + 8|0);
    $614 = HEAP8[$613>>0]|0;
    $615 = $614&255;
    HEAP32[$vararg_buffer386>>2] = 9981;
    $vararg_ptr389 = ((($vararg_buffer386)) + 4|0);
    HEAP32[$vararg_ptr389>>2] = $611;
    $vararg_ptr390 = ((($vararg_buffer386)) + 8|0);
    HEAP32[$vararg_ptr390>>2] = $612;
    $vararg_ptr391 = ((($vararg_buffer386)) + 12|0);
    HEAP32[$vararg_ptr391>>2] = $615;
    (_sprintf($0,9962,$vararg_buffer386)|0);
    break;
   }
   case -128:  {
    $616 = ((($6)) + 10|0);
    $617 = HEAP8[$616>>0]|0;
    $618 = $617&255;
    $619 = ((($6)) + 14|0);
    $620 = ((($6)) + 8|0);
    $621 = HEAP8[$620>>0]|0;
    $622 = $621&255;
    HEAP32[$vararg_buffer392>>2] = 9985;
    $vararg_ptr395 = ((($vararg_buffer392)) + 4|0);
    HEAP32[$vararg_ptr395>>2] = $618;
    $vararg_ptr396 = ((($vararg_buffer392)) + 8|0);
    HEAP32[$vararg_ptr396>>2] = $619;
    $vararg_ptr397 = ((($vararg_buffer392)) + 12|0);
    HEAP32[$vararg_ptr397>>2] = $622;
    (_sprintf($0,9962,$vararg_buffer392)|0);
    break;
   }
   case -127:  {
    $623 = ((($6)) + 9|0);
    $624 = HEAP8[$623>>0]|0;
    $625 = $624&255;
    $626 = ((($6)) + 14|0);
    $627 = ((($6)) + 8|0);
    $628 = HEAP8[$627>>0]|0;
    $629 = $628&255;
    HEAP32[$vararg_buffer398>>2] = 9989;
    $vararg_ptr401 = ((($vararg_buffer398)) + 4|0);
    HEAP32[$vararg_ptr401>>2] = $625;
    $vararg_ptr402 = ((($vararg_buffer398)) + 8|0);
    HEAP32[$vararg_ptr402>>2] = $626;
    $vararg_ptr403 = ((($vararg_buffer398)) + 12|0);
    HEAP32[$vararg_ptr403>>2] = $629;
    (_sprintf($0,9962,$vararg_buffer398)|0);
    break;
   }
   case -76:  {
    $630 = ((($6)) + 10|0);
    $631 = HEAP8[$630>>0]|0;
    $632 = $631&255;
    $633 = ((($6)) + 14|0);
    $634 = ((($6)) + 8|0);
    $635 = HEAP8[$634>>0]|0;
    $636 = $635&255;
    HEAP32[$vararg_buffer404>>2] = 9993;
    $vararg_ptr407 = ((($vararg_buffer404)) + 4|0);
    HEAP32[$vararg_ptr407>>2] = $632;
    $vararg_ptr408 = ((($vararg_buffer404)) + 8|0);
    HEAP32[$vararg_ptr408>>2] = $633;
    $vararg_ptr409 = ((($vararg_buffer404)) + 12|0);
    HEAP32[$vararg_ptr409>>2] = $636;
    (_sprintf($0,9962,$vararg_buffer404)|0);
    break;
   }
   case -75:  {
    $637 = ((($6)) + 9|0);
    $638 = HEAP8[$637>>0]|0;
    $639 = $638&255;
    $640 = ((($6)) + 14|0);
    $641 = ((($6)) + 8|0);
    $642 = HEAP8[$641>>0]|0;
    $643 = $642&255;
    HEAP32[$vararg_buffer410>>2] = 9998;
    $vararg_ptr413 = ((($vararg_buffer410)) + 4|0);
    HEAP32[$vararg_ptr413>>2] = $639;
    $vararg_ptr414 = ((($vararg_buffer410)) + 8|0);
    HEAP32[$vararg_ptr414>>2] = $640;
    $vararg_ptr415 = ((($vararg_buffer410)) + 12|0);
    HEAP32[$vararg_ptr415>>2] = $643;
    (_sprintf($0,9962,$vararg_buffer410)|0);
    break;
   }
   case -106:  {
    $644 = ((($6)) + 8|0);
    $645 = HEAP8[$644>>0]|0;
    $646 = $645&255;
    $647 = ((($6)) + 9|0);
    $648 = HEAP8[$647>>0]|0;
    $649 = $648&255;
    HEAP32[$vararg_buffer416>>2] = 10019;
    $vararg_ptr419 = ((($vararg_buffer416)) + 4|0);
    HEAP32[$vararg_ptr419>>2] = $646;
    $vararg_ptr420 = ((($vararg_buffer416)) + 8|0);
    HEAP32[$vararg_ptr420>>2] = $649;
    (_sprintf($0,10003,$vararg_buffer416)|0);
    break;
   }
   case -105:  {
    $650 = ((($6)) + 8|0);
    $651 = HEAP8[$650>>0]|0;
    $652 = $651&255;
    $653 = ((($6)) + 9|0);
    $654 = HEAP8[$653>>0]|0;
    $655 = $654&255;
    HEAP32[$vararg_buffer421>>2] = 10026;
    $vararg_ptr424 = ((($vararg_buffer421)) + 4|0);
    HEAP32[$vararg_ptr424>>2] = $652;
    $vararg_ptr425 = ((($vararg_buffer421)) + 8|0);
    HEAP32[$vararg_ptr425>>2] = $655;
    (_sprintf($0,10003,$vararg_buffer421)|0);
    break;
   }
   case -107:  {
    $656 = ((($6)) + 8|0);
    $657 = HEAP8[$656>>0]|0;
    $658 = $657&255;
    $659 = ((($6)) + 9|0);
    $660 = HEAP8[$659>>0]|0;
    $661 = $660&255;
    HEAP32[$vararg_buffer426>>2] = 10019;
    $vararg_ptr429 = ((($vararg_buffer426)) + 4|0);
    HEAP32[$vararg_ptr429>>2] = $658;
    $vararg_ptr430 = ((($vararg_buffer426)) + 8|0);
    HEAP32[$vararg_ptr430>>2] = $661;
    (_sprintf($0,10003,$vararg_buffer426)|0);
    break;
   }
   case -104:  {
    $662 = ((($6)) + 8|0);
    $663 = HEAP8[$662>>0]|0;
    $664 = $663&255;
    $665 = ((($6)) + 9|0);
    $666 = HEAP8[$665>>0]|0;
    $667 = $666&255;
    HEAP32[$vararg_buffer431>>2] = 10033;
    $vararg_ptr434 = ((($vararg_buffer431)) + 4|0);
    HEAP32[$vararg_ptr434>>2] = $664;
    $vararg_ptr435 = ((($vararg_buffer431)) + 8|0);
    HEAP32[$vararg_ptr435>>2] = $667;
    (_sprintf($0,10003,$vararg_buffer431)|0);
    break;
   }
   case -108:  {
    $668 = ((($6)) + 8|0);
    $669 = HEAP8[$668>>0]|0;
    $670 = $669&255;
    $671 = ((($6)) + 9|0);
    $672 = HEAP8[$671>>0]|0;
    $673 = $672&255;
    HEAP32[$vararg_buffer436>>2] = 10040;
    $vararg_ptr439 = ((($vararg_buffer436)) + 4|0);
    HEAP32[$vararg_ptr439>>2] = $670;
    $vararg_ptr440 = ((($vararg_buffer436)) + 8|0);
    HEAP32[$vararg_ptr440>>2] = $673;
    (_sprintf($0,10003,$vararg_buffer436)|0);
    label = 84;
    break;
   }
   case -103:  {
    label = 84;
    break;
   }
   case -119:  {
    $680 = ((($6)) + 8|0);
    $681 = HEAP8[$680>>0]|0;
    $682 = $681&255;
    $683 = ((($6)) + 9|0);
    $684 = HEAP8[$683>>0]|0;
    $685 = $684&255;
    HEAP32[$vararg_buffer446>>2] = 10054;
    $vararg_ptr449 = ((($vararg_buffer446)) + 4|0);
    HEAP32[$vararg_ptr449>>2] = $682;
    $vararg_ptr450 = ((($vararg_buffer446)) + 8|0);
    HEAP32[$vararg_ptr450>>2] = $685;
    (_sprintf($0,10003,$vararg_buffer446)|0);
    break;
   }
   case -118:  {
    $686 = ((($6)) + 8|0);
    $687 = HEAP8[$686>>0]|0;
    $688 = $687&255;
    $689 = ((($6)) + 9|0);
    $690 = HEAP8[$689>>0]|0;
    $691 = $690&255;
    HEAP32[$vararg_buffer451>>2] = 10061;
    $vararg_ptr454 = ((($vararg_buffer451)) + 4|0);
    HEAP32[$vararg_ptr454>>2] = $688;
    $vararg_ptr455 = ((($vararg_buffer451)) + 8|0);
    HEAP32[$vararg_ptr455>>2] = $691;
    (_sprintf($0,10003,$vararg_buffer451)|0);
    break;
   }
   case -120:  {
    $692 = ((($6)) + 8|0);
    $693 = HEAP8[$692>>0]|0;
    $694 = $693&255;
    $695 = ((($6)) + 9|0);
    $696 = HEAP8[$695>>0]|0;
    $697 = $696&255;
    HEAP32[$vararg_buffer456>>2] = 10068;
    $vararg_ptr459 = ((($vararg_buffer456)) + 4|0);
    HEAP32[$vararg_ptr459>>2] = $694;
    $vararg_ptr460 = ((($vararg_buffer456)) + 8|0);
    HEAP32[$vararg_ptr460>>2] = $697;
    (_sprintf($0,10003,$vararg_buffer456)|0);
    break;
   }
   case -117:  {
    $698 = ((($6)) + 8|0);
    $699 = HEAP8[$698>>0]|0;
    $700 = $699&255;
    $701 = ((($6)) + 9|0);
    $702 = HEAP8[$701>>0]|0;
    $703 = $702&255;
    HEAP32[$vararg_buffer461>>2] = 10076;
    $vararg_ptr464 = ((($vararg_buffer461)) + 4|0);
    HEAP32[$vararg_ptr464>>2] = $700;
    $vararg_ptr465 = ((($vararg_buffer461)) + 8|0);
    HEAP32[$vararg_ptr465>>2] = $703;
    (_sprintf($0,10003,$vararg_buffer461)|0);
    break;
   }
   case -121:  {
    $704 = ((($6)) + 8|0);
    $705 = HEAP8[$704>>0]|0;
    $706 = $705&255;
    $707 = ((($6)) + 9|0);
    $708 = HEAP8[$707>>0]|0;
    $709 = $708&255;
    HEAP32[$vararg_buffer466>>2] = 10083;
    $vararg_ptr469 = ((($vararg_buffer466)) + 4|0);
    HEAP32[$vararg_ptr469>>2] = $706;
    $vararg_ptr470 = ((($vararg_buffer466)) + 8|0);
    HEAP32[$vararg_ptr470>>2] = $709;
    (_sprintf($0,10003,$vararg_buffer466)|0);
    break;
   }
   case -116:  {
    $710 = ((($6)) + 8|0);
    $711 = HEAP8[$710>>0]|0;
    $712 = $711&255;
    $713 = ((($6)) + 9|0);
    $714 = HEAP8[$713>>0]|0;
    $715 = $714&255;
    HEAP32[$vararg_buffer471>>2] = 10090;
    $vararg_ptr474 = ((($vararg_buffer471)) + 4|0);
    HEAP32[$vararg_ptr474>>2] = $712;
    $vararg_ptr475 = ((($vararg_buffer471)) + 8|0);
    HEAP32[$vararg_ptr475>>2] = $715;
    (_sprintf($0,10003,$vararg_buffer471)|0);
    break;
   }
   case -73:  {
    $716 = ((($6)) + 10|0);
    $717 = HEAP8[$716>>0]|0;
    $718 = $717&255;
    $719 = ((($6)) + 8|0);
    $720 = HEAP8[$719>>0]|0;
    $721 = $720&255;
    HEAP32[$vararg_buffer476>>2] = $718;
    $vararg_ptr479 = ((($vararg_buffer476)) + 4|0);
    HEAP32[$vararg_ptr479>>2] = $721;
    (_sprintf($0,10097,$vararg_buffer476)|0);
    break;
   }
   case -74:  {
    $722 = ((($6)) + 10|0);
    $723 = HEAP8[$722>>0]|0;
    $724 = $723&255;
    $725 = ((($6)) + 8|0);
    $726 = HEAP8[$725>>0]|0;
    $727 = $726&255;
    HEAP32[$vararg_buffer480>>2] = $724;
    $vararg_ptr483 = ((($vararg_buffer480)) + 4|0);
    HEAP32[$vararg_ptr483>>2] = $727;
    (_sprintf($0,10111,$vararg_buffer480)|0);
    break;
   }
   default: {
    $728 = ((($6)) + 10|0);
    $729 = HEAP8[$728>>0]|0;
    $730 = $729&255;
    $731 = ((($6)) + 8|0);
    $732 = HEAP8[$731>>0]|0;
    $733 = $732&255;
    $734 = ((($6)) + 9|0);
    $735 = HEAP8[$734>>0]|0;
    $736 = $735&255;
    $737 = ((($6)) + 12|0);
    $738 = HEAP16[$737>>1]|0;
    $739 = $738 << 16 >> 16;
    HEAP32[$vararg_buffer484>>2] = $730;
    $vararg_ptr487 = ((($vararg_buffer484)) + 4|0);
    HEAP32[$vararg_ptr487>>2] = $733;
    $vararg_ptr488 = ((($vararg_buffer484)) + 8|0);
    HEAP32[$vararg_ptr488>>2] = $736;
    $vararg_ptr489 = ((($vararg_buffer484)) + 12|0);
    HEAP32[$vararg_ptr489>>2] = $739;
    (_sprintf($0,10125,$vararg_buffer484)|0);
   }
   }
  } while(0);
  if ((label|0) == 84) {
   $674 = ((($6)) + 8|0);
   $675 = HEAP8[$674>>0]|0;
   $676 = $675&255;
   $677 = ((($6)) + 9|0);
   $678 = HEAP8[$677>>0]|0;
   $679 = $678&255;
   HEAP32[$vararg_buffer441>>2] = 10047;
   $vararg_ptr444 = ((($vararg_buffer441)) + 4|0);
   HEAP32[$vararg_ptr444>>2] = $676;
   $vararg_ptr445 = ((($vararg_buffer441)) + 8|0);
   HEAP32[$vararg_ptr445>>2] = $679;
   (_sprintf($0,10003,$vararg_buffer441)|0);
  }
 }
 $strlen = (_strlen($0)|0);
 $leninc = (($strlen) + 1)|0;
 _memcpy(($4|0),($0|0),($leninc|0))|0;
 $740 = ($3|0)==(1);
 if ($740) {
  _color_instruccion($5,$1,$2);
  HEAP32[$vararg_buffer490>>2] = $5;
  $vararg_ptr493 = ((($vararg_buffer490)) + 4|0);
  HEAP32[$vararg_ptr493>>2] = $4;
  (_sprintf($0,10158,$vararg_buffer490)|0);
  STACKTOP = sp;return;
 } else {
  $strlen106 = (_strlen($4)|0);
  $leninc107 = (($strlen106) + 1)|0;
  _memcpy(($0|0),($4|0),($leninc107|0))|0;
  STACKTOP = sp;return;
 }
}
function _fase_busqueda() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $switch = 0, $switch11 = 0, $switch13 = 0, $switch15 = 0, $switch17 = 0, $switch3 = 0, $switch5 = 0, $switch7 = 0, $switch9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = 54832;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[19181]|0;
 _init_instruc($3,$7);
 $8 = 54832;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 _lee_mem_instruc($0,$10,$13);
 _memcpy((54840|0),($0|0),144)|0;
 $14 = 54832;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_i64Add(($16|0),($19|0),4,0)|0);
 $21 = tempRet0;
 $22 = (54984);
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = HEAP32[19192]|0;
 $27 = ($26|0)<(0);
 $28 = $27 << 31 >> 31;
 $29 = ($19|0)<($28|0);
 $30 = ($16>>>0)<($26>>>0);
 $31 = ($19|0)==($28|0);
 $32 = $31 & $30;
 $33 = $29 | $32;
 if ($33) {
  $34 = HEAP32[482]|0;
  $35 = $vararg_buffer;
  $36 = $35;
  HEAP32[$36>>2] = $16;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $19;
  (_fprintf($34,10185,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $39 = HEAP32[(76772)>>2]|0;
 $40 = ($39|0)<(0);
 $41 = $40 << 31 >> 31;
 $42 = ($19|0)<($41|0);
 $43 = ($16>>>0)<($39>>>0);
 $44 = ($19|0)==($41|0);
 $45 = $44 & $43;
 $46 = $42 | $45;
 $47 = HEAP8[54840]|0;
 $48 = ($47<<24>>24)==(1);
 $or$cond = $46 | $48;
 if (!($or$cond)) {
  $49 = HEAP32[482]|0;
  $50 = $vararg_buffer1;
  $51 = $50;
  HEAP32[$51>>2] = $16;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = $19;
  (_fprintf($49,10185,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 $54 = 54832;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = (54992);
 $61 = $60;
 HEAP32[$61>>2] = $56;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $59;
 $64 = HEAP32[19181]|0;
 HEAP32[(55000)>>2] = $64;
 HEAP32[199582] = 0;
 $65 = HEAP32[19177]|0;
 do {
  switch ($65|0) {
  case 6:  {
   $66 = HEAP32[(55904)>>2]|0;
   $67 = ($66|0)==(0);
   if ($67) {
    $98 = (_i64Add(($56|0),($59|0),4,0)|0);
    $99 = tempRet0;
    $100 = 54824;
    $101 = $100;
    HEAP32[$101>>2] = $98;
    $102 = (($100) + 4)|0;
    $103 = $102;
    HEAP32[$103>>2] = $99;
    STACKTOP = sp;return;
   }
   $68 = HEAP8[55744]|0;
   $69 = $68 & -2;
   $switch = ($69<<24>>24)==(110);
   if ($switch) {
    $70 = (55912);
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (_i64Add(($72|0),($75|0),4,0)|0);
    $77 = tempRet0;
    $78 = (54280);
    $79 = $78;
    HEAP32[$79>>2] = $76;
    $80 = (($78) + 4)|0;
    $81 = $80;
    HEAP32[$81>>2] = $77;
   }
   HEAP32[199582] = 1;
   $82 = (55888);
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = 54824;
   $89 = $88;
   HEAP32[$89>>2] = $84;
   $90 = (($88) + 4)|0;
   $91 = $90;
   HEAP32[$91>>2] = $87;
   $92 = (55912);
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($92) + 4)|0;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   _write_log(10250,$94,$97);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   $104 = HEAP32[199581]|0;
   $105 = ($104|0)==(0);
   if ($105) {
    $136 = (_i64Add(($56|0),($59|0),4,0)|0);
    $137 = tempRet0;
    $138 = 54824;
    $139 = $138;
    HEAP32[$139>>2] = $136;
    $140 = (($138) + 4)|0;
    $141 = $140;
    HEAP32[$141>>2] = $137;
    STACKTOP = sp;return;
   }
   $106 = HEAP8[55368]|0;
   $107 = $106 & -2;
   $switch3 = ($107<<24>>24)==(110);
   if ($switch3) {
    $108 = (55544);
    $109 = $108;
    $110 = HEAP32[$109>>2]|0;
    $111 = (($108) + 4)|0;
    $112 = $111;
    $113 = HEAP32[$112>>2]|0;
    $114 = (_i64Add(($110|0),($113|0),4,0)|0);
    $115 = tempRet0;
    $116 = (54280);
    $117 = $116;
    HEAP32[$117>>2] = $114;
    $118 = (($116) + 4)|0;
    $119 = $118;
    HEAP32[$119>>2] = $115;
   }
   HEAP32[199582] = 1;
   $120 = 75984;
   $121 = $120;
   $122 = HEAP32[$121>>2]|0;
   $123 = (($120) + 4)|0;
   $124 = $123;
   $125 = HEAP32[$124>>2]|0;
   $126 = 54824;
   $127 = $126;
   HEAP32[$127>>2] = $122;
   $128 = (($126) + 4)|0;
   $129 = $128;
   HEAP32[$129>>2] = $125;
   $130 = (55544);
   $131 = $130;
   $132 = HEAP32[$131>>2]|0;
   $133 = (($130) + 4)|0;
   $134 = $133;
   $135 = HEAP32[$134>>2]|0;
   _write_log(10250,$132,$135);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   $142 = HEAP32[199575]|0;
   $143 = ($142|0)==(0);
   if (!($143)) {
    STACKTOP = sp;return;
   }
   $144 = HEAP32[199580]|0;
   $145 = ($144|0)==(0);
   if ($145) {
    $176 = (_i64Add(($56|0),($59|0),4,0)|0);
    $177 = tempRet0;
    $178 = 54824;
    $179 = $178;
    HEAP32[$179>>2] = $176;
    $180 = (($178) + 4)|0;
    $181 = $180;
    HEAP32[$181>>2] = $177;
    STACKTOP = sp;return;
   }
   $146 = HEAP8[55008]|0;
   $147 = $146 & -2;
   $switch5 = ($147<<24>>24)==(110);
   if ($switch5) {
    $148 = (55160);
    $149 = $148;
    $150 = HEAP32[$149>>2]|0;
    $151 = (($148) + 4)|0;
    $152 = $151;
    $153 = HEAP32[$152>>2]|0;
    $154 = (_i64Add(($150|0),($153|0),4,0)|0);
    $155 = tempRet0;
    $156 = (54280);
    $157 = $156;
    HEAP32[$157>>2] = $154;
    $158 = (($156) + 4)|0;
    $159 = $158;
    HEAP32[$159>>2] = $155;
   }
   HEAP32[199582] = 1;
   $160 = 75976;
   $161 = $160;
   $162 = HEAP32[$161>>2]|0;
   $163 = (($160) + 4)|0;
   $164 = $163;
   $165 = HEAP32[$164>>2]|0;
   $166 = 54824;
   $167 = $166;
   HEAP32[$167>>2] = $162;
   $168 = (($166) + 4)|0;
   $169 = $168;
   HEAP32[$169>>2] = $165;
   $170 = (55160);
   $171 = $170;
   $172 = HEAP32[$171>>2]|0;
   $173 = (($170) + 4)|0;
   $174 = $173;
   $175 = HEAP32[$174>>2]|0;
   _write_log(10250,$172,$175);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $182 = HEAP32[(55904)>>2]|0;
   $183 = ($182|0)==(0);
   if ($183) {
    $220 = (_i64Add(($56|0),($59|0),4,0)|0);
    $221 = tempRet0;
    $222 = 54824;
    $223 = $222;
    HEAP32[$223>>2] = $220;
    $224 = (($222) + 4)|0;
    $225 = $224;
    HEAP32[$225>>2] = $221;
    STACKTOP = sp;return;
   }
   $184 = HEAP8[55744]|0;
   $185 = $184 & -2;
   $switch7 = ($185<<24>>24)==(110);
   if ($switch7) {
    $186 = (55912);
    $187 = $186;
    $188 = HEAP32[$187>>2]|0;
    $189 = (($186) + 4)|0;
    $190 = $189;
    $191 = HEAP32[$190>>2]|0;
    $192 = (_i64Add(($188|0),($191|0),4,0)|0);
    $193 = tempRet0;
    $194 = (54280);
    $195 = $194;
    HEAP32[$195>>2] = $192;
    $196 = (($194) + 4)|0;
    $197 = $196;
    HEAP32[$197>>2] = $193;
   }
   HEAP32[199582] = 1;
   $198 = (55888);
   $199 = $198;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($198) + 4)|0;
   $202 = $201;
   $203 = HEAP32[$202>>2]|0;
   $204 = 54824;
   $205 = $204;
   HEAP32[$205>>2] = $200;
   $206 = (($204) + 4)|0;
   $207 = $206;
   HEAP32[$207>>2] = $203;
   HEAP32[199577] = 1;
   HEAP32[199578] = 1;
   HEAP32[199579] = 1;
   $208 = (55912);
   $209 = $208;
   $210 = HEAP32[$209>>2]|0;
   $211 = (($208) + 4)|0;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   _write_log(10265,$210,$213);
   $214 = (55912);
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $217 = (($214) + 4)|0;
   $218 = $217;
   $219 = HEAP32[$218>>2]|0;
   _write_log(10250,$216,$219);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   $226 = HEAP32[199581]|0;
   $227 = ($226|0)==(0);
   if ($227) {
    $264 = (_i64Add(($56|0),($59|0),4,0)|0);
    $265 = tempRet0;
    $266 = 54824;
    $267 = $266;
    HEAP32[$267>>2] = $264;
    $268 = (($266) + 4)|0;
    $269 = $268;
    HEAP32[$269>>2] = $265;
    STACKTOP = sp;return;
   }
   $228 = HEAP8[55368]|0;
   $229 = $228 & -2;
   $switch9 = ($229<<24>>24)==(110);
   if ($switch9) {
    $230 = (55544);
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = (($230) + 4)|0;
    $234 = $233;
    $235 = HEAP32[$234>>2]|0;
    $236 = (_i64Add(($232|0),($235|0),4,0)|0);
    $237 = tempRet0;
    $238 = (54280);
    $239 = $238;
    HEAP32[$239>>2] = $236;
    $240 = (($238) + 4)|0;
    $241 = $240;
    HEAP32[$241>>2] = $237;
   }
   HEAP32[199582] = 1;
   $242 = 75984;
   $243 = $242;
   $244 = HEAP32[$243>>2]|0;
   $245 = (($242) + 4)|0;
   $246 = $245;
   $247 = HEAP32[$246>>2]|0;
   $248 = 54824;
   $249 = $248;
   HEAP32[$249>>2] = $244;
   $250 = (($248) + 4)|0;
   $251 = $250;
   HEAP32[$251>>2] = $247;
   HEAP32[199577] = 1;
   HEAP32[199578] = 1;
   $252 = (55912);
   $253 = $252;
   $254 = HEAP32[$253>>2]|0;
   $255 = (($252) + 4)|0;
   $256 = $255;
   $257 = HEAP32[$256>>2]|0;
   _write_log(10285,$254,$257);
   $258 = (55544);
   $259 = $258;
   $260 = HEAP32[$259>>2]|0;
   $261 = (($258) + 4)|0;
   $262 = $261;
   $263 = HEAP32[$262>>2]|0;
   _write_log(10250,$260,$263);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   $270 = HEAP32[199575]|0;
   $271 = ($270|0)==(0);
   if (!($271)) {
    STACKTOP = sp;return;
   }
   $272 = HEAP32[199580]|0;
   $273 = ($272|0)==(0);
   if ($273) {
    $310 = (_i64Add(($56|0),($59|0),4,0)|0);
    $311 = tempRet0;
    $312 = 54824;
    $313 = $312;
    HEAP32[$313>>2] = $310;
    $314 = (($312) + 4)|0;
    $315 = $314;
    HEAP32[$315>>2] = $311;
    STACKTOP = sp;return;
   }
   $274 = HEAP8[55008]|0;
   $275 = $274 & -2;
   $switch11 = ($275<<24>>24)==(110);
   if ($switch11) {
    $276 = (55160);
    $277 = $276;
    $278 = HEAP32[$277>>2]|0;
    $279 = (($276) + 4)|0;
    $280 = $279;
    $281 = HEAP32[$280>>2]|0;
    $282 = (_i64Add(($278|0),($281|0),4,0)|0);
    $283 = tempRet0;
    $284 = (54280);
    $285 = $284;
    HEAP32[$285>>2] = $282;
    $286 = (($284) + 4)|0;
    $287 = $286;
    HEAP32[$287>>2] = $283;
   }
   HEAP32[199582] = 1;
   $288 = 75976;
   $289 = $288;
   $290 = HEAP32[$289>>2]|0;
   $291 = (($288) + 4)|0;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = 54824;
   $295 = $294;
   HEAP32[$295>>2] = $290;
   $296 = (($294) + 4)|0;
   $297 = $296;
   HEAP32[$297>>2] = $293;
   HEAP32[199577] = 1;
   $298 = (55912);
   $299 = $298;
   $300 = HEAP32[$299>>2]|0;
   $301 = (($298) + 4)|0;
   $302 = $301;
   $303 = HEAP32[$302>>2]|0;
   _write_log(17092,$300,$303);
   $304 = (55160);
   $305 = $304;
   $306 = HEAP32[$305>>2]|0;
   $307 = (($304) + 4)|0;
   $308 = $307;
   $309 = HEAP32[$308>>2]|0;
   _write_log(10250,$306,$309);
   STACKTOP = sp;return;
   break;
  }
  case 0:  {
   $316 = HEAP32[(55904)>>2]|0;
   $317 = ($316|0)==(0);
   if ($317) {
    $354 = (_i64Add(($56|0),($59|0),4,0)|0);
    $355 = tempRet0;
    $356 = 54824;
    $357 = $356;
    HEAP32[$357>>2] = $354;
    $358 = (($356) + 4)|0;
    $359 = $358;
    HEAP32[$359>>2] = $355;
    STACKTOP = sp;return;
   }
   $318 = HEAP8[55744]|0;
   $319 = $318 & -2;
   $switch13 = ($319<<24>>24)==(110);
   if ($switch13) {
    $320 = (55912);
    $321 = $320;
    $322 = HEAP32[$321>>2]|0;
    $323 = (($320) + 4)|0;
    $324 = $323;
    $325 = HEAP32[$324>>2]|0;
    $326 = (_i64Add(($322|0),($325|0),4,0)|0);
    $327 = tempRet0;
    $328 = (54280);
    $329 = $328;
    HEAP32[$329>>2] = $326;
    $330 = (($328) + 4)|0;
    $331 = $330;
    HEAP32[$331>>2] = $327;
   }
   HEAP32[199582] = 1;
   $332 = (55888);
   $333 = $332;
   $334 = HEAP32[$333>>2]|0;
   $335 = (($332) + 4)|0;
   $336 = $335;
   $337 = HEAP32[$336>>2]|0;
   $338 = 54824;
   $339 = $338;
   HEAP32[$339>>2] = $334;
   $340 = (($338) + 4)|0;
   $341 = $340;
   HEAP32[$341>>2] = $337;
   HEAP32[199577] = 1;
   $342 = (55912);
   $343 = $342;
   $344 = HEAP32[$343>>2]|0;
   $345 = (($342) + 4)|0;
   $346 = $345;
   $347 = HEAP32[$346>>2]|0;
   _write_log(17092,$344,$347);
   $348 = (55912);
   $349 = $348;
   $350 = HEAP32[$349>>2]|0;
   $351 = (($348) + 4)|0;
   $352 = $351;
   $353 = HEAP32[$352>>2]|0;
   _write_log(10250,$350,$353);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $360 = HEAP32[199581]|0;
   $361 = ($360|0)==(0);
   if ($361) {
    $398 = (_i64Add(($56|0),($59|0),4,0)|0);
    $399 = tempRet0;
    $400 = 54824;
    $401 = $400;
    HEAP32[$401>>2] = $398;
    $402 = (($400) + 4)|0;
    $403 = $402;
    HEAP32[$403>>2] = $399;
    STACKTOP = sp;return;
   }
   $362 = HEAP8[55368]|0;
   $363 = $362 & -2;
   $switch15 = ($363<<24>>24)==(110);
   if ($switch15) {
    $364 = (55544);
    $365 = $364;
    $366 = HEAP32[$365>>2]|0;
    $367 = (($364) + 4)|0;
    $368 = $367;
    $369 = HEAP32[$368>>2]|0;
    $370 = (_i64Add(($366|0),($369|0),4,0)|0);
    $371 = tempRet0;
    $372 = (54280);
    $373 = $372;
    HEAP32[$373>>2] = $370;
    $374 = (($372) + 4)|0;
    $375 = $374;
    HEAP32[$375>>2] = $371;
   }
   HEAP32[199582] = 1;
   $376 = 75984;
   $377 = $376;
   $378 = HEAP32[$377>>2]|0;
   $379 = (($376) + 4)|0;
   $380 = $379;
   $381 = HEAP32[$380>>2]|0;
   $382 = 54824;
   $383 = $382;
   HEAP32[$383>>2] = $378;
   $384 = (($382) + 4)|0;
   $385 = $384;
   HEAP32[$385>>2] = $381;
   HEAP32[199577] = 1;
   $386 = (55544);
   $387 = $386;
   $388 = HEAP32[$387>>2]|0;
   $389 = (($386) + 4)|0;
   $390 = $389;
   $391 = HEAP32[$390>>2]|0;
   _write_log(17092,$388,$391);
   $392 = (55544);
   $393 = $392;
   $394 = HEAP32[$393>>2]|0;
   $395 = (($392) + 4)|0;
   $396 = $395;
   $397 = HEAP32[$396>>2]|0;
   _write_log(10250,$394,$397);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $404 = HEAP32[199575]|0;
   $405 = ($404|0)==(0);
   if (!($405)) {
    STACKTOP = sp;return;
   }
   $406 = HEAP32[199580]|0;
   $407 = ($406|0)==(0);
   if ($407) {
    $444 = (_i64Add(($56|0),($59|0),4,0)|0);
    $445 = tempRet0;
    $446 = 54824;
    $447 = $446;
    HEAP32[$447>>2] = $444;
    $448 = (($446) + 4)|0;
    $449 = $448;
    HEAP32[$449>>2] = $445;
    STACKTOP = sp;return;
   }
   $408 = HEAP8[55008]|0;
   $409 = $408 & -2;
   $switch17 = ($409<<24>>24)==(110);
   if ($switch17) {
    $410 = (55160);
    $411 = $410;
    $412 = HEAP32[$411>>2]|0;
    $413 = (($410) + 4)|0;
    $414 = $413;
    $415 = HEAP32[$414>>2]|0;
    $416 = (_i64Add(($412|0),($415|0),4,0)|0);
    $417 = tempRet0;
    $418 = (54280);
    $419 = $418;
    HEAP32[$419>>2] = $416;
    $420 = (($418) + 4)|0;
    $421 = $420;
    HEAP32[$421>>2] = $417;
   }
   HEAP32[199582] = 1;
   $422 = 75976;
   $423 = $422;
   $424 = HEAP32[$423>>2]|0;
   $425 = (($422) + 4)|0;
   $426 = $425;
   $427 = HEAP32[$426>>2]|0;
   $428 = 54824;
   $429 = $428;
   HEAP32[$429>>2] = $424;
   $430 = (($428) + 4)|0;
   $431 = $430;
   HEAP32[$431>>2] = $427;
   HEAP32[199577] = 1;
   $432 = (55160);
   $433 = $432;
   $434 = HEAP32[$433>>2]|0;
   $435 = (($432) + 4)|0;
   $436 = $435;
   $437 = HEAP32[$436>>2]|0;
   _write_log(17092,$434,$437);
   $438 = (55160);
   $439 = $438;
   $440 = HEAP32[$439>>2]|0;
   $441 = (($438) + 4)|0;
   $442 = $441;
   $443 = HEAP32[$442>>2]|0;
   _write_log(10250,$440,$443);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _fase_decodificacion() {
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 HEAP32[199572] = 0;
 HEAP32[199571] = 0;
 HEAP32[199573] = 0;
 $0 = HEAP8[55008]|0;
 switch ($0<<24>>24) {
 case 120: case 1:  {
  HEAP32[199574] = 1;
  $1 = (55160);
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  _write_log(17020,$3,$6);
  $$pr = HEAP8[55008]|0;
  $7 = $$pr;
  break;
 }
 default: {
  $7 = $0;
 }
 }
 $8 = ($7<<24>>24)>(-1);
 if ($8) {
  _detectar_riesgos_control();
  $9 = HEAP8[(55016)>>0]|0;
  $10 = $9&255;
  $11 = (54032 + ($10<<3)|0);
  $12 = $11;
  $13 = $12;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($12) + 4)|0;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (55888);
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (_mux_COMPidsup($14,$17,$20,$23)|0);
  $25 = tempRet0;
  $26 = HEAP8[(55017)>>0]|0;
  $27 = $26&255;
  $28 = (54032 + ($27<<3)|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (55888);
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = (_mux_COMPidinf($31,$34,$37,$40)|0);
  $42 = tempRet0;
  $43 = HEAP8[55008]|0;
  $44 = (_operacion_COMP($43,$24,$25,$41,$42)|0);
  $45 = tempRet0;
  HEAP32[199580] = $44;
  $46 = HEAP8[55008]|0;
  switch ($46<<24>>24) {
  case 111: case 109:  {
   $61 = $24;$64 = $25;
   break;
  }
  default: {
   $47 = (55152);
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($47) + 4)|0;
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP16[(55020)>>1]|0;
   $54 = $53 << 16 >> 16;
   $55 = ($54|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($54|0),($56|0),($49|0),($52|0))|0);
   $58 = tempRet0;
   $61 = $57;$64 = $58;
  }
  }
  $59 = 75976;
  $60 = $59;
  HEAP32[$60>>2] = $61;
  $62 = (($59) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = $64;
  _detectar_riesgos_datos();
  _pasar_a_FP_LS_NOP();
  _pasar_a_FP_A_NOP();
  _pasar_a_FP_M_NOP();
  _pasar_a_FP_C_NOP();
  _pasar_a_ID_WB_NOP();
  $65 = HEAP8[(55016)>>0]|0;
  $66 = $65&255;
  $67 = (54032 + ($66<<3)|0);
  $68 = $67;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($68) + 4)|0;
  $72 = $71;
  $73 = HEAP32[$72>>2]|0;
  $74 = (55328);
  $75 = $74;
  HEAP32[$75>>2] = $70;
  $76 = (($74) + 4)|0;
  $77 = $76;
  HEAP32[$77>>2] = $73;
  $78 = HEAP8[(55017)>>0]|0;
  $79 = $78&255;
  $80 = (54032 + ($79<<3)|0);
  $81 = $80;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) + 4)|0;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = (55336);
  $88 = $87;
  HEAP32[$88>>2] = $83;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = $86;
  $91 = HEAP16[(55020)>>1]|0;
  $92 = $91 << 16 >> 16;
  $93 = ($92|0)<(0);
  $94 = $93 << 31 >> 31;
  $95 = (55344);
  $96 = $95;
  HEAP32[$96>>2] = $92;
  $97 = (($95) + 4)|0;
  $98 = $97;
  HEAP32[$98>>2] = $94;
  $99 = (55152);
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = (($99) + 4)|0;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  $105 = (55320);
  $106 = $105;
  HEAP32[$106>>2] = $101;
  $107 = (($105) + 4)|0;
  $108 = $107;
  HEAP32[$108>>2] = $104;
  _memcpy((55176|0),(55008|0),144)|0;
  $109 = (55160);
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (55352);
  $116 = $115;
  HEAP32[$116>>2] = $111;
  $117 = (($115) + 4)|0;
  $118 = $117;
  HEAP32[$118>>2] = $114;
  $119 = HEAP32[(55168)>>2]|0;
  HEAP32[(55360)>>2] = $119;
  STACKTOP = sp;return 0;
 }
 _detectar_riesgos_RAW_FP();
 _detectar_riesgos_WAW_FP();
 _detectar_riesgos_WB_FP();
 $120 = HEAP32[199575]|0;
 $121 = ($120|0)==(0);
 if (!($121)) {
  STACKTOP = sp;return 0;
 }
 $122 = HEAP8[55008]|0;
 switch ($122<<24>>24) {
 case -76: case -128: case -115:  {
  $123 = HEAP8[(55016)>>0]|0;
  $124 = $123&255;
  $125 = (54032 + ($124<<3)|0);
  $126 = $125;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = (($126) + 4)|0;
  $130 = $129;
  $131 = HEAP32[$130>>2]|0;
  $132 = (57008);
  $133 = $132;
  HEAP32[$133>>2] = $128;
  $134 = (($132) + 4)|0;
  $135 = $134;
  HEAP32[$135>>2] = $131;
  $136 = HEAP8[(55017)>>0]|0;
  $137 = $136&255;
  $138 = (54032 + ($137<<3)|0);
  $139 = $138;
  $140 = $139;
  $141 = HEAP32[$140>>2]|0;
  $142 = (($139) + 4)|0;
  $143 = $142;
  $144 = HEAP32[$143>>2]|0;
  $145 = (57016);
  $146 = $145;
  HEAP32[$146>>2] = $141;
  $147 = (($145) + 4)|0;
  $148 = $147;
  HEAP32[$148>>2] = $144;
  $149 = HEAP16[(55020)>>1]|0;
  $150 = $149 << 16 >> 16;
  $151 = ($150|0)<(0);
  $152 = $151 << 31 >> 31;
  $153 = (57024);
  $154 = $153;
  HEAP32[$154>>2] = $150;
  $155 = (($153) + 4)|0;
  $156 = $155;
  HEAP32[$156>>2] = $152;
  $157 = HEAP32[19182]|0;
  $158 = HEAP32[21]|0;
  $159 = (($158) + ($157))|0;
  $160 = HEAP8[(55018)>>0]|0;
  $161 = $160&255;
  $162 = (((54296 + ($161<<4)|0)) + 8|0);
  HEAP32[$162>>2] = $159;
  $163 = (55152);
  $164 = $163;
  $165 = HEAP32[$164>>2]|0;
  $166 = (($163) + 4)|0;
  $167 = $166;
  $168 = HEAP32[$167>>2]|0;
  $169 = (56984);
  $170 = $169;
  HEAP32[$170>>2] = $165;
  $171 = (($169) + 4)|0;
  $172 = $171;
  HEAP32[$172>>2] = $168;
  _memcpy((56840|0),(55008|0),144)|0;
  $173 = (55160);
  $174 = $173;
  $175 = HEAP32[$174>>2]|0;
  $176 = (($173) + 4)|0;
  $177 = $176;
  $178 = HEAP32[$177>>2]|0;
  $179 = (57032);
  $180 = $179;
  HEAP32[$180>>2] = $175;
  $181 = (($179) + 4)|0;
  $182 = $181;
  HEAP32[$182>>2] = $178;
  $183 = HEAP32[(55168)>>2]|0;
  HEAP32[(57040)>>2] = $183;
  _pasar_a_FP_A_NOP();
  _pasar_a_FP_M_NOP();
  _pasar_a_FP_C_NOP();
  _pasar_a_EX_NOP();
  _pasar_a_ID_WB_NOP();
  STACKTOP = sp;return 0;
  break;
 }
 case -75: case -127: case -114:  {
  $184 = HEAP8[(55016)>>0]|0;
  $185 = $184&255;
  $186 = (54032 + ($185<<3)|0);
  $187 = $186;
  $188 = $187;
  $189 = HEAP32[$188>>2]|0;
  $190 = (($187) + 4)|0;
  $191 = $190;
  $192 = HEAP32[$191>>2]|0;
  $193 = (57008);
  $194 = $193;
  HEAP32[$194>>2] = $189;
  $195 = (($193) + 4)|0;
  $196 = $195;
  HEAP32[$196>>2] = $192;
  $197 = HEAP8[(55017)>>0]|0;
  $198 = $197&255;
  $199 = (54032 + ($198<<3)|0);
  $200 = $199;
  $201 = $200;
  $202 = HEAP32[$201>>2]|0;
  $203 = (($200) + 4)|0;
  $204 = $203;
  $205 = HEAP32[$204>>2]|0;
  $206 = (57016);
  $207 = $206;
  HEAP32[$207>>2] = $202;
  $208 = (($206) + 4)|0;
  $209 = $208;
  HEAP32[$209>>2] = $205;
  $210 = HEAP16[(55020)>>1]|0;
  $211 = $210 << 16 >> 16;
  $212 = ($211|0)<(0);
  $213 = $212 << 31 >> 31;
  $214 = (57024);
  $215 = $214;
  HEAP32[$215>>2] = $211;
  $216 = (($214) + 4)|0;
  $217 = $216;
  HEAP32[$217>>2] = $213;
  $218 = (54296 + ($185<<4)|0);
  $219 = $218;
  $220 = $219;
  $221 = HEAP32[$220>>2]|0;
  $222 = (($219) + 4)|0;
  $223 = $222;
  $224 = HEAP32[$223>>2]|0;
  $225 = (56992);
  $226 = $225;
  HEAP32[$226>>2] = $221;
  $227 = (($225) + 4)|0;
  $228 = $227;
  HEAP32[$228>>2] = $224;
  $229 = HEAP8[(55017)>>0]|0;
  $230 = $229&255;
  $231 = (54296 + ($230<<4)|0);
  $232 = $231;
  $233 = $232;
  $234 = HEAP32[$233>>2]|0;
  $235 = (($232) + 4)|0;
  $236 = $235;
  $237 = HEAP32[$236>>2]|0;
  $238 = (57000);
  $239 = $238;
  HEAP32[$239>>2] = $234;
  $240 = (($238) + 4)|0;
  $241 = $240;
  HEAP32[$241>>2] = $237;
  $242 = (55152);
  $243 = $242;
  $244 = HEAP32[$243>>2]|0;
  $245 = (($242) + 4)|0;
  $246 = $245;
  $247 = HEAP32[$246>>2]|0;
  $248 = (56984);
  $249 = $248;
  HEAP32[$249>>2] = $244;
  $250 = (($248) + 4)|0;
  $251 = $250;
  HEAP32[$251>>2] = $247;
  _memcpy((56840|0),(55008|0),144)|0;
  $252 = (55160);
  $253 = $252;
  $254 = HEAP32[$253>>2]|0;
  $255 = (($252) + 4)|0;
  $256 = $255;
  $257 = HEAP32[$256>>2]|0;
  $258 = (57032);
  $259 = $258;
  HEAP32[$259>>2] = $254;
  $260 = (($258) + 4)|0;
  $261 = $260;
  HEAP32[$261>>2] = $257;
  $262 = HEAP32[(55168)>>2]|0;
  HEAP32[(57040)>>2] = $262;
  _pasar_a_FP_A_NOP();
  _pasar_a_FP_M_NOP();
  _pasar_a_FP_C_NOP();
  _pasar_a_EX_NOP();
  _pasar_a_ID_WB_NOP();
  STACKTOP = sp;return 0;
  break;
 }
 case -101: case -102: case -125: case -126: case -112: case -113:  {
  $263 = HEAP8[(55016)>>0]|0;
  $264 = $263&255;
  $265 = (54296 + ($264<<4)|0);
  $266 = $265;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  $272 = (57200);
  $273 = $272;
  HEAP32[$273>>2] = $268;
  $274 = (($272) + 4)|0;
  $275 = $274;
  HEAP32[$275>>2] = $271;
  $276 = HEAP8[(55017)>>0]|0;
  $277 = $276&255;
  $278 = (54296 + ($277<<4)|0);
  $279 = $278;
  $280 = $279;
  $281 = HEAP32[$280>>2]|0;
  $282 = (($279) + 4)|0;
  $283 = $282;
  $284 = HEAP32[$283>>2]|0;
  $285 = (57208);
  $286 = $285;
  HEAP32[$286>>2] = $281;
  $287 = (($285) + 4)|0;
  $288 = $287;
  HEAP32[$288>>2] = $284;
  $289 = HEAP32[19182]|0;
  $290 = HEAP32[18]|0;
  $291 = (($290) + ($289))|0;
  $292 = HEAP8[(55018)>>0]|0;
  $293 = $292&255;
  $294 = (((54296 + ($293<<4)|0)) + 8|0);
  HEAP32[$294>>2] = $291;
  $295 = (55152);
  $296 = $295;
  $297 = HEAP32[$296>>2]|0;
  $298 = (($295) + 4)|0;
  $299 = $298;
  $300 = HEAP32[$299>>2]|0;
  $301 = (57192);
  $302 = $301;
  HEAP32[$302>>2] = $297;
  $303 = (($301) + 4)|0;
  $304 = $303;
  HEAP32[$304>>2] = $300;
  _memcpy((57048|0),(55008|0),144)|0;
  $305 = (55160);
  $306 = $305;
  $307 = HEAP32[$306>>2]|0;
  $308 = (($305) + 4)|0;
  $309 = $308;
  $310 = HEAP32[$309>>2]|0;
  $311 = (57240);
  $312 = $311;
  HEAP32[$312>>2] = $307;
  $313 = (($311) + 4)|0;
  $314 = $313;
  HEAP32[$314>>2] = $310;
  $315 = HEAP32[(55168)>>2]|0;
  HEAP32[(57248)>>2] = $315;
  _pasar_a_FP_LS_NOP();
  _pasar_a_FP_M_NOP();
  _pasar_a_FP_C_NOP();
  _pasar_a_EX_NOP();
  _pasar_a_ID_WB_NOP();
  STACKTOP = sp;return 0;
  break;
 }
 case -99: case -100: case -123: case -124: case -110: case -111:  {
  $316 = HEAP8[(55016)>>0]|0;
  $317 = $316&255;
  $318 = (54296 + ($317<<4)|0);
  $319 = $318;
  $320 = $319;
  $321 = HEAP32[$320>>2]|0;
  $322 = (($319) + 4)|0;
  $323 = $322;
  $324 = HEAP32[$323>>2]|0;
  $325 = (57616);
  $326 = $325;
  HEAP32[$326>>2] = $321;
  $327 = (($325) + 4)|0;
  $328 = $327;
  HEAP32[$328>>2] = $324;
  $329 = HEAP8[(55017)>>0]|0;
  $330 = $329&255;
  $331 = (54296 + ($330<<4)|0);
  $332 = $331;
  $333 = $332;
  $334 = HEAP32[$333>>2]|0;
  $335 = (($332) + 4)|0;
  $336 = $335;
  $337 = HEAP32[$336>>2]|0;
  $338 = (57624);
  $339 = $338;
  HEAP32[$339>>2] = $334;
  $340 = (($338) + 4)|0;
  $341 = $340;
  HEAP32[$341>>2] = $337;
  $342 = HEAP32[19182]|0;
  $343 = HEAP32[19]|0;
  $344 = (($343) + ($342))|0;
  $345 = HEAP8[(55018)>>0]|0;
  $346 = $345&255;
  $347 = (((54296 + ($346<<4)|0)) + 8|0);
  HEAP32[$347>>2] = $344;
  $348 = (55152);
  $349 = $348;
  $350 = HEAP32[$349>>2]|0;
  $351 = (($348) + 4)|0;
  $352 = $351;
  $353 = HEAP32[$352>>2]|0;
  $354 = (57608);
  $355 = $354;
  HEAP32[$355>>2] = $350;
  $356 = (($354) + 4)|0;
  $357 = $356;
  HEAP32[$357>>2] = $353;
  _memcpy((57464|0),(55008|0),144)|0;
  $358 = (55160);
  $359 = $358;
  $360 = HEAP32[$359>>2]|0;
  $361 = (($358) + 4)|0;
  $362 = $361;
  $363 = HEAP32[$362>>2]|0;
  $364 = (57656);
  $365 = $364;
  HEAP32[$365>>2] = $360;
  $366 = (($364) + 4)|0;
  $367 = $366;
  HEAP32[$367>>2] = $363;
  $368 = HEAP32[(55168)>>2]|0;
  HEAP32[(57664)>>2] = $368;
  _pasar_a_FP_LS_NOP();
  _pasar_a_FP_A_NOP();
  _pasar_a_FP_C_NOP();
  _pasar_a_EX_NOP();
  _pasar_a_ID_WB_NOP();
  STACKTOP = sp;return 0;
  break;
 }
 case -116: case -121: case -117: case -120: case -118: case -119: case -103: case -108: case -104: case -107: case -105: case -106:  {
  $369 = HEAP8[(55016)>>0]|0;
  $370 = $369&255;
  $371 = (54296 + ($370<<4)|0);
  $372 = $371;
  $373 = $372;
  $374 = HEAP32[$373>>2]|0;
  $375 = (($372) + 4)|0;
  $376 = $375;
  $377 = HEAP32[$376>>2]|0;
  $378 = (58032);
  $379 = $378;
  HEAP32[$379>>2] = $374;
  $380 = (($378) + 4)|0;
  $381 = $380;
  HEAP32[$381>>2] = $377;
  $382 = HEAP8[(55017)>>0]|0;
  $383 = $382&255;
  $384 = (54296 + ($383<<4)|0);
  $385 = $384;
  $386 = $385;
  $387 = HEAP32[$386>>2]|0;
  $388 = (($385) + 4)|0;
  $389 = $388;
  $390 = HEAP32[$389>>2]|0;
  $391 = (58040);
  $392 = $391;
  HEAP32[$392>>2] = $387;
  $393 = (($391) + 4)|0;
  $394 = $393;
  HEAP32[$394>>2] = $390;
  $395 = HEAP32[19182]|0;
  $396 = HEAP32[20]|0;
  $397 = (($396) + ($395))|0;
  $398 = HEAP8[(55018)>>0]|0;
  $399 = $398&255;
  $400 = (((54296 + ($399<<4)|0)) + 8|0);
  HEAP32[$400>>2] = $397;
  $401 = (55152);
  $402 = $401;
  $403 = HEAP32[$402>>2]|0;
  $404 = (($401) + 4)|0;
  $405 = $404;
  $406 = HEAP32[$405>>2]|0;
  $407 = (58024);
  $408 = $407;
  HEAP32[$408>>2] = $403;
  $409 = (($407) + 4)|0;
  $410 = $409;
  HEAP32[$410>>2] = $406;
  _memcpy((57880|0),(55008|0),144)|0;
  $411 = (55160);
  $412 = $411;
  $413 = HEAP32[$412>>2]|0;
  $414 = (($411) + 4)|0;
  $415 = $414;
  $416 = HEAP32[$415>>2]|0;
  $417 = (58072);
  $418 = $417;
  HEAP32[$418>>2] = $413;
  $419 = (($417) + 4)|0;
  $420 = $419;
  HEAP32[$420>>2] = $416;
  $421 = HEAP32[(55168)>>2]|0;
  HEAP32[(58080)>>2] = $421;
  _pasar_a_FP_LS_NOP();
  _pasar_a_FP_A_NOP();
  _pasar_a_FP_M_NOP();
  _pasar_a_EX_NOP();
  _pasar_a_ID_WB_NOP();
  STACKTOP = sp;return 0;
  break;
 }
 case -74: case -73:  {
  _memcpy((75640|0),(55008|0),144)|0;
  $422 = (55160);
  $423 = $422;
  $424 = HEAP32[$423>>2]|0;
  $425 = (($422) + 4)|0;
  $426 = $425;
  $427 = HEAP32[$426>>2]|0;
  $428 = (75792);
  $429 = $428;
  HEAP32[$429>>2] = $424;
  $430 = (($428) + 4)|0;
  $431 = $430;
  HEAP32[$431>>2] = $427;
  $432 = HEAP32[(55168)>>2]|0;
  HEAP32[(75800)>>2] = $432;
  $433 = HEAP8[(55016)>>0]|0;
  $434 = $433&255;
  $435 = (54296 + ($434<<4)|0);
  $436 = $435;
  $437 = $436;
  $438 = HEAP32[$437>>2]|0;
  $439 = (($436) + 4)|0;
  $440 = $439;
  $441 = HEAP32[$440>>2]|0;
  $442 = (75784);
  $443 = $442;
  HEAP32[$443>>2] = $438;
  $444 = (($442) + 4)|0;
  $445 = $444;
  HEAP32[$445>>2] = $441;
  $446 = HEAP32[19182]|0;
  $447 = HEAP8[(55018)>>0]|0;
  $448 = $447&255;
  $449 = (((54296 + ($448<<4)|0)) + 8|0);
  HEAP32[$449>>2] = $446;
  _pasar_a_FP_LS_NOP();
  _pasar_a_FP_A_NOP();
  _pasar_a_FP_M_NOP();
  _pasar_a_FP_C_NOP();
  _pasar_a_EX_NOP();
  STACKTOP = sp;return 0;
  break;
 }
 default: {
  $450 = HEAP32[482]|0;
  HEAP32[$vararg_buffer>>2] = 10298;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 10328;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 516;
  (_fprintf($450,27188,$vararg_buffer)|0);
  $451 = HEAP8[55008]|0;
  $452 = $451&255;
  HEAP32[$vararg_buffer3>>2] = $452;
  (_fprintf($450,10348,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 }
 return (0)|0;
}
function _fase_ejecucion() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[55368]|0;
 switch ($0<<24>>24) {
 case 120: case 1:  {
  HEAP32[199574] = 1;
  $1 = (55544);
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  _write_log(17020,$3,$6);
  break;
 }
 default: {
 }
 }
 $7 = HEAP32[19177]|0;
 $switch = ($7>>>0)<(2);
 L4: do {
  if ($switch) {
   $8 = HEAP8[55368]|0;
   switch ($8<<24>>24) {
   case 111: case 110: case 109: case 108: case 105: case 104: case 102: case 103: case 100: case 101:  {
    break;
   }
   default: {
    break L4;
   }
   }
   HEAP32[199574] = 1;
   $9 = (55544);
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 4)|0;
   $13 = $12;
   $14 = HEAP32[$13>>2]|0;
   _write_log(17020,$11,$14);
  }
 } while(0);
 $15 = (55512);
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (55520);
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (55888);
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = 75992;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (_mux_ALUsup($17,$20,$23,$26,$29,$32,$35,$38)|0);
 $40 = tempRet0;
 $41 = (55528);
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (55536);
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($47) + 4)|0;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (55888);
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($53) + 4)|0;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = 75992;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = (_mux_ALUinf($43,$46,$49,$52,$55,$58,$61,$64)|0);
 $66 = tempRet0;
 $67 = HEAP8[55368]|0;
 $68 = (_operacion_ALU($67,$39,$40,$65,$66)|0);
 $69 = tempRet0;
 $70 = 75984;
 $71 = $70;
 HEAP32[$71>>2] = $68;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = $69;
 $74 = (55704);
 $75 = $74;
 HEAP32[$75>>2] = $68;
 $76 = (($74) + 4)|0;
 $77 = $76;
 HEAP32[$77>>2] = $69;
 $78 = (55520);
 $79 = $78;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($78) + 4)|0;
 $82 = $81;
 $83 = HEAP32[$82>>2]|0;
 $84 = (55888);
 $85 = $84;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($84) + 4)|0;
 $88 = $87;
 $89 = HEAP32[$88>>2]|0;
 $90 = 75992;
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($90) + 4)|0;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (56600);
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($96) + 4)|0;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = (_mux_COMPsup($80,$83,$86,$89,$92,$95,$98,$101)|0);
 $103 = tempRet0;
 $104 = (55528);
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = (55888);
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($110) + 4)|0;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = 75992;
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $119 = (($116) + 4)|0;
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 $122 = (_mux_COMPinf($106,$109,$112,$115,$118,$121)|0);
 $123 = tempRet0;
 $124 = HEAP8[55368]|0;
 $125 = (_operacion_COMP($124,$102,$103,$122,$123)|0);
 $126 = tempRet0;
 HEAP32[199581] = $125;
 HEAP32[(55720)>>2] = $125;
 $127 = (55528);
 $128 = $127;
 $129 = HEAP32[$128>>2]|0;
 $130 = (($127) + 4)|0;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = 75992;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (($133) + 4)|0;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = (_mux_EXmem($129,$132,$135,$138)|0);
 $140 = tempRet0;
 $141 = (55712);
 $142 = $141;
 HEAP32[$142>>2] = $139;
 $143 = (($141) + 4)|0;
 $144 = $143;
 HEAP32[$144>>2] = $140;
 _memcpy((55560|0),(55368|0),144)|0;
 $145 = (55544);
 $146 = $145;
 $147 = HEAP32[$146>>2]|0;
 $148 = (($145) + 4)|0;
 $149 = $148;
 $150 = HEAP32[$149>>2]|0;
 $151 = (55728);
 $152 = $151;
 HEAP32[$152>>2] = $147;
 $153 = (($151) + 4)|0;
 $154 = $153;
 HEAP32[$154>>2] = $150;
 $155 = HEAP32[(55552)>>2]|0;
 HEAP32[(55736)>>2] = $155;
 return;
}
function _fase_memoria() {
 var $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $$byval_copy3 = sp + 64|0;
 $0 = sp + 40|0;
 $1 = sp + 72|0;
 $2 = sp + 56|0;
 $3 = sp + 48|0;
 $4 = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 8|0;
 $8 = sp;
 HEAP32[199558] = 0;
 $9 = HEAP8[55744]|0;
 switch ($9<<24>>24) {
 case 120: case 1:  {
  HEAP32[199574] = 1;
  $10 = (55912);
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + 4)|0;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  _write_log(17020,$12,$15);
  break;
 }
 default: {
 }
 }
 $16 = HEAP32[19177]|0;
 $cond = ($16|0)==(0);
 L4: do {
  if ($cond) {
   $17 = HEAP8[55744]|0;
   switch ($17<<24>>24) {
   case 111: case 110: case 109: case 108: case 105: case 104: case 102: case 103: case 100: case 101:  {
    break;
   }
   default: {
    break L4;
   }
   }
   HEAP32[199574] = 1;
   $18 = (55912);
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($18) + 4)|0;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   _write_log(17020,$20,$23);
  }
 } while(0);
 $24 = (55896);
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = 75992;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_mux_MEMmem($26,$29,$32,$35)|0);
 $37 = tempRet0;
 $38 = HEAP8[55744]|0;
 do {
  switch ($38<<24>>24) {
  case 64:  {
   $39 = (55888);
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   _lee_mem_datos($2,$41,$44,5,$1);
   $45 = $2;
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + 4)|0;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = $0;
   $52 = $51;
   HEAP32[$52>>2] = $47;
   $53 = (($51) + 4)|0;
   $54 = $53;
   HEAP32[$54>>2] = $50;
   $55 = (56080);
   $56 = $55;
   HEAP32[$56>>2] = $47;
   $57 = (($55) + 4)|0;
   $58 = $57;
   HEAP32[$58>>2] = $50;
   break;
  }
  case 65:  {
   $59 = $0;
   $60 = $59;
   HEAP32[$60>>2] = $36;
   $61 = (($59) + 4)|0;
   $62 = $61;
   HEAP32[$62>>2] = $37;
   $63 = (55888);
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + 4)|0;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$0+4>>2]|0;
   _escribe_mem_datos($65,$68,$$byval_copy3,5,1);
   break;
  }
  case 14:  {
   $69 = (55888);
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($69) + 4)|0;
   $73 = $72;
   $74 = HEAP32[$73>>2]|0;
   _lee_mem_datos($3,$71,$74,4,$1);
   $75 = $3;
   $76 = $75;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($75) + 4)|0;
   $79 = $78;
   $80 = HEAP32[$79>>2]|0;
   $81 = $0;
   $82 = $81;
   HEAP32[$82>>2] = $77;
   $83 = (($81) + 4)|0;
   $84 = $83;
   HEAP32[$84>>2] = $80;
   $85 = HEAP32[$0>>2]|0;
   $86 = ($85|0)<(0);
   $87 = $86 << 31 >> 31;
   $88 = (56080);
   $89 = $88;
   HEAP32[$89>>2] = $85;
   $90 = (($88) + 4)|0;
   $91 = $90;
   HEAP32[$91>>2] = $87;
   break;
  }
  case 15:  {
   $92 = (55888);
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($92) + 4)|0;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   _lee_mem_datos($4,$94,$97,4,$1);
   $98 = $4;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($98) + 4)|0;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = $0;
   $105 = $104;
   HEAP32[$105>>2] = $100;
   $106 = (($104) + 4)|0;
   $107 = $106;
   HEAP32[$107>>2] = $103;
   $108 = HEAP32[$0>>2]|0;
   $109 = (56080);
   $110 = $109;
   HEAP32[$110>>2] = $108;
   $111 = (($109) + 4)|0;
   $112 = $111;
   HEAP32[$112>>2] = 0;
   break;
  }
  case 18:  {
   HEAP32[$0>>2] = $36;
   $113 = (55888);
   $114 = $113;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($113) + 4)|0;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$0+4>>2]|0;
   _escribe_mem_datos($115,$118,$$byval_copy3,4,1);
   break;
  }
  case 12:  {
   $119 = (55888);
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($119) + 4)|0;
   $123 = $122;
   $124 = HEAP32[$123>>2]|0;
   _lee_mem_datos($5,$121,$124,3,$1);
   $125 = $5;
   $126 = $125;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) + 4)|0;
   $129 = $128;
   $130 = HEAP32[$129>>2]|0;
   $131 = $0;
   $132 = $131;
   HEAP32[$132>>2] = $127;
   $133 = (($131) + 4)|0;
   $134 = $133;
   HEAP32[$134>>2] = $130;
   $135 = HEAP16[$0>>1]|0;
   $136 = $135 << 16 >> 16;
   $137 = ($136|0)<(0);
   $138 = $137 << 31 >> 31;
   $139 = (56080);
   $140 = $139;
   HEAP32[$140>>2] = $136;
   $141 = (($139) + 4)|0;
   $142 = $141;
   HEAP32[$142>>2] = $138;
   break;
  }
  case 13:  {
   $143 = (55888);
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 4)|0;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   _lee_mem_datos($6,$145,$148,3,$1);
   $149 = $6;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $152 = (($149) + 4)|0;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   $155 = $0;
   $156 = $155;
   HEAP32[$156>>2] = $151;
   $157 = (($155) + 4)|0;
   $158 = $157;
   HEAP32[$158>>2] = $154;
   $159 = HEAP16[$0>>1]|0;
   $160 = $159&65535;
   $161 = (56080);
   $162 = $161;
   HEAP32[$162>>2] = $160;
   $163 = (($161) + 4)|0;
   $164 = $163;
   HEAP32[$164>>2] = 0;
   break;
  }
  case 17:  {
   $165 = $36&65535;
   HEAP16[$0>>1] = $165;
   $166 = (55888);
   $167 = $166;
   $168 = HEAP32[$167>>2]|0;
   $169 = (($166) + 4)|0;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$0+4>>2]|0;
   _escribe_mem_datos($168,$171,$$byval_copy3,3,1);
   break;
  }
  case 10:  {
   $172 = (55888);
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   _lee_mem_datos($7,$174,$177,2,$1);
   $178 = $7;
   $179 = $178;
   $180 = HEAP32[$179>>2]|0;
   $181 = (($178) + 4)|0;
   $182 = $181;
   $183 = HEAP32[$182>>2]|0;
   $184 = $0;
   $185 = $184;
   HEAP32[$185>>2] = $180;
   $186 = (($184) + 4)|0;
   $187 = $186;
   HEAP32[$187>>2] = $183;
   $188 = HEAP8[$0>>0]|0;
   $189 = $188 << 24 >> 24;
   $190 = ($189|0)<(0);
   $191 = $190 << 31 >> 31;
   $192 = (56080);
   $193 = $192;
   HEAP32[$193>>2] = $189;
   $194 = (($192) + 4)|0;
   $195 = $194;
   HEAP32[$195>>2] = $191;
   break;
  }
  case 11:  {
   $196 = (55888);
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($196) + 4)|0;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   _lee_mem_datos($8,$198,$201,2,$1);
   $202 = $8;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($202) + 4)|0;
   $206 = $205;
   $207 = HEAP32[$206>>2]|0;
   $208 = $0;
   $209 = $208;
   HEAP32[$209>>2] = $204;
   $210 = (($208) + 4)|0;
   $211 = $210;
   HEAP32[$211>>2] = $207;
   $212 = HEAP8[$0>>0]|0;
   $213 = $212&255;
   $214 = (56080);
   $215 = $214;
   HEAP32[$215>>2] = $213;
   $216 = (($214) + 4)|0;
   $217 = $216;
   HEAP32[$217>>2] = 0;
   break;
  }
  case 16:  {
   $218 = $36&255;
   HEAP8[$0>>0] = $218;
   $219 = (55888);
   $220 = $219;
   $221 = HEAP32[$220>>2]|0;
   $222 = (($219) + 4)|0;
   $223 = $222;
   $224 = HEAP32[$223>>2]|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$0+4>>2]|0;
   _escribe_mem_datos($221,$224,$$byval_copy3,2,1);
   break;
  }
  default: {
  }
  }
 } while(0);
 $225 = (55888);
 $226 = $225;
 $227 = HEAP32[$226>>2]|0;
 $228 = (($225) + 4)|0;
 $229 = $228;
 $230 = HEAP32[$229>>2]|0;
 $231 = (56072);
 $232 = $231;
 HEAP32[$232>>2] = $227;
 $233 = (($231) + 4)|0;
 $234 = $233;
 HEAP32[$234>>2] = $230;
 _memcpy((55928|0),(55744|0),144)|0;
 $235 = (55912);
 $236 = $235;
 $237 = HEAP32[$236>>2]|0;
 $238 = (($235) + 4)|0;
 $239 = $238;
 $240 = HEAP32[$239>>2]|0;
 $241 = (56088);
 $242 = $241;
 HEAP32[$242>>2] = $237;
 $243 = (($241) + 4)|0;
 $244 = $243;
 HEAP32[$244>>2] = $240;
 $245 = HEAP32[(55920)>>2]|0;
 HEAP32[(56096)>>2] = $245;
 STACKTOP = sp;return;
}
function _fase_escritura() {
 var $$01622 = 0, $$023 = 0, $$117 = 0, $$121 = 0, $$2 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond25 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP8[840713] = 0;
 HEAP8[841225] = 0;
 $0 = HEAP8[56104]|0;
 switch ($0<<24>>24) {
 case 120: case 1:  {
  HEAP32[199574] = 1;
  $1 = (56264);
  $2 = $1;
  $3 = HEAP32[$2>>2]|0;
  $4 = (($1) + 4)|0;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  _write_log(17020,$3,$6);
  break;
 }
 default: {
 }
 }
 $7 = (56264);
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)==(-1);
 $14 = ($12|0)==(-1);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = HEAP32[(76736)>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[(76736)>>2] = $17;
  $18 = HEAP32[(76740)>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[(76740)>>2] = $19;
 }
 $20 = HEAP8[56104]|0;
 switch ($20<<24>>24) {
 case 64:  {
  $21 = HEAP8[(56114)>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 18;
  } else {
   $23 = $21&255;
   $24 = (56256);
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   _escribe_int_reg($23,0,$26,$29,5,1);
   $30 = (56256);
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + 4)|0;
   $34 = $33;
   $35 = HEAP32[$34>>2]|0;
   $36 = 75992;
   $37 = $36;
   HEAP32[$37>>2] = $32;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
   label = 18;
  }
  break;
 }
 case 15: case 14:  {
  $40 = HEAP8[(56114)>>0]|0;
  $41 = ($40<<24>>24)==(0);
  if ($41) {
   label = 18;
  } else {
   $42 = $40&255;
   $43 = (56256);
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + 4)|0;
   $47 = $46;
   $48 = HEAP32[$47>>2]|0;
   _escribe_int_reg($42,0,$45,$48,4,1);
   $49 = (56256);
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($49) + 4)|0;
   $53 = $52;
   $54 = HEAP32[$53>>2]|0;
   $55 = 75992;
   $56 = $55;
   HEAP32[$56>>2] = $51;
   $57 = (($55) + 4)|0;
   $58 = $57;
   HEAP32[$58>>2] = $54;
   label = 18;
  }
  break;
 }
 case 13: case 12:  {
  $59 = HEAP8[(56114)>>0]|0;
  $60 = ($59<<24>>24)==(0);
  if ($60) {
   label = 18;
  } else {
   $61 = $59&255;
   $62 = (56256);
   $63 = $62;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($62) + 4)|0;
   $66 = $65;
   $67 = HEAP32[$66>>2]|0;
   _escribe_int_reg($61,0,$64,$67,3,1);
   $68 = (56256);
   $69 = $68;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($68) + 4)|0;
   $72 = $71;
   $73 = HEAP32[$72>>2]|0;
   $74 = 75992;
   $75 = $74;
   HEAP32[$75>>2] = $70;
   $76 = (($74) + 4)|0;
   $77 = $76;
   HEAP32[$77>>2] = $73;
   label = 18;
  }
  break;
 }
 case 11: case 10:  {
  $78 = HEAP8[(56114)>>0]|0;
  $79 = ($78<<24>>24)==(0);
  if ($79) {
   label = 18;
  } else {
   $80 = $78&255;
   $81 = (56256);
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($81) + 4)|0;
   $85 = $84;
   $86 = HEAP32[$85>>2]|0;
   _escribe_int_reg($80,0,$83,$86,2,1);
   $87 = (56256);
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($87) + 4)|0;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = 75992;
   $94 = $93;
   HEAP32[$94>>2] = $89;
   $95 = (($93) + 4)|0;
   $96 = $95;
   HEAP32[$96>>2] = $92;
   label = 18;
  }
  break;
 }
 case 111: case 109: case 110: case 108: case 102: case 103: case 101: case 100: case 16: case 17: case 18: case 65: case 0:  {
  label = 18;
  break;
 }
 case 1:  {
  HEAP32[19188] = 1;
  $$01622 = 1;$$023 = 0;
  label = 19;
  break;
 }
 case 120:  {
  HEAP32[19189] = 1;
  label = 18;
  break;
 }
 default: {
  $97 = HEAP8[(56114)>>0]|0;
  $98 = ($97<<24>>24)==(0);
  if ($98) {
   label = 18;
  } else {
   $99 = $97&255;
   $100 = (56248);
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($100) + 4)|0;
   $104 = $103;
   $105 = HEAP32[$104>>2]|0;
   _escribe_int_reg($99,0,$102,$105,5,1);
   $106 = (56248);
   $107 = $106;
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + 4)|0;
   $110 = $109;
   $111 = HEAP32[$110>>2]|0;
   $112 = 75992;
   $113 = $112;
   HEAP32[$113>>2] = $108;
   $114 = (($112) + 4)|0;
   $115 = $114;
   HEAP32[$115>>2] = $111;
   label = 18;
  }
 }
 }
 if ((label|0) == 18) {
  $$pr = HEAP32[19188]|0;
  $116 = ($$pr|0)==(0);
  if ($116) {
   $$117 = 0;
  } else {
   $$01622 = 1;$$023 = 0;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  while(1) {
   label = 0;
   $117 = ($$01622|0)==(0);
   if ($117) {
    $122 = 0;
   } else {
    $118 = (((54296 + ($$023<<4)|0)) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==(0);
    $122 = $120;
   }
   $121 = $122&1;
   $123 = (($$023) + 1)|0;
   $exitcond25 = ($123|0)==(32);
   if ($exitcond25) {
    $$117 = $121;
    break;
   } else {
    $$01622 = $121;$$023 = $123;
    label = 19;
   }
  }
 }
 $124 = HEAP32[19189]|0;
 $125 = ($124|0)==(0);
 if ($125) {
  $$2 = $$117;
 } else {
  $$121 = 0;$135 = 1;
  while(1) {
   if ($135) {
    $126 = (((54296 + ($$121<<4)|0)) + 8|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0);
    $136 = $128;
   } else {
    $136 = 0;
   }
   $129 = (($$121) + 1)|0;
   $exitcond = ($129|0)==(32);
   if ($exitcond) {
    break;
   } else {
    $$121 = $129;$135 = $136;
   }
  }
  if ($136) {
   HEAP32[19189] = 0;
   $130 = (_process_syscall()|0);
   $$2 = $130;
  } else {
   $$2 = $$117;
  }
 }
 $131 = ($$2|0)==(0);
 if ($131) {
  STACKTOP = sp;return ($$2|0);
 }
 $132 = HEAP32[482]|0;
 $133 = HEAP32[19182]|0;
 $134 = (($133) + 1)|0;
 HEAP32[$vararg_buffer>>2] = $134;
 (_fprintf($132,10381,$vararg_buffer)|0);
 STACKTOP = sp;return ($$2|0);
}
function _fase_escritura_FP() {
 var $$byval_copy12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $ADD_WB$byval_copy = 0, $LS_WB$byval_copy = 0, $MUL_WB$byval_copy = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $$byval_copy12 = sp + 696|0;
 $MUL_WB$byval_copy = sp + 360|0;
 $ADD_WB$byval_copy = sp + 192|0;
 $LS_WB$byval_copy = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 528|0;
 _memcpy(($LS_WB$byval_copy|0),(74464|0),168)|0;
 _memcpy(($ADD_WB$byval_copy|0),(74800|0),168)|0;
 _memcpy(($MUL_WB$byval_copy|0),(75136|0),168)|0;
 _memcpy(($$byval_copy12|0),(75808|0),168)|0;
 _mux_FP_WB($0,$LS_WB$byval_copy,$ADD_WB$byval_copy,$MUL_WB$byval_copy,$$byval_copy12);
 _memcpy((75472|0),($0|0),168)|0;
 $1 = (75624);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)==(-1);
 $8 = ($6|0)==(-1);
 $9 = $7 & $8;
 if (!($9)) {
  $10 = HEAP32[(76736)>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[(76736)>>2] = $11;
  $12 = HEAP32[(76744)>>2]|0;
  $13 = (($12) + 1)|0;
  HEAP32[(76744)>>2] = $13;
 }
 $14 = HEAP8[75472]|0;
 do {
  switch ($14<<24>>24) {
  case -115:  {
   $15 = HEAP8[(75482)>>0]|0;
   $16 = $15&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($16,0,$$byval_copy12,8,1);
   $17 = HEAP32[19182]|0;
   $18 = HEAP8[(75482)>>0]|0;
   $19 = $18&255;
   $20 = (((54296 + ($19<<4)|0)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   $23 = ($17|0)==($22|0);
   if (!($23)) {
    STACKTOP = sp;return;
   }
   HEAP32[$20>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -128:  {
   $24 = HEAP8[(75482)>>0]|0;
   $25 = $24&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($25,0,$$byval_copy12,6,1);
   $26 = HEAP32[19182]|0;
   $27 = HEAP8[(75482)>>0]|0;
   $28 = $27&255;
   $29 = (((54296 + ($28<<4)|0)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 1)|0;
   $32 = ($26|0)==($31|0);
   if (!($32)) {
    STACKTOP = sp;return;
   }
   HEAP32[$29>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -76:  {
   $33 = HEAP8[(75482)>>0]|0;
   $34 = $33&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($34,0,$$byval_copy12,7,1);
   $35 = HEAP32[19182]|0;
   $36 = HEAP8[(75482)>>0]|0;
   $37 = $36&255;
   $38 = (((54296 + ($37<<4)|0)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 1)|0;
   $41 = ($35|0)==($40|0);
   if (!($41)) {
    STACKTOP = sp;return;
   }
   HEAP32[$38>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -110: case -111: case -112: case -113:  {
   $42 = HEAP32[(76748)>>2]|0;
   $43 = (($42) + 1)|0;
   HEAP32[(76748)>>2] = $43;
   $44 = HEAP8[(75482)>>0]|0;
   $45 = $44&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($45,0,$$byval_copy12,8,1);
   $46 = HEAP32[19182]|0;
   $47 = HEAP8[(75482)>>0]|0;
   $48 = $47&255;
   $49 = (((54296 + ($48<<4)|0)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = ($46|0)==($51|0);
   if (!($52)) {
    STACKTOP = sp;return;
   }
   HEAP32[$49>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -123: case -124: case -125: case -126:  {
   $53 = HEAP32[(76748)>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[(76748)>>2] = $54;
   $55 = HEAP8[(75482)>>0]|0;
   $56 = $55&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($56,0,$$byval_copy12,6,1);
   $57 = HEAP32[19182]|0;
   $58 = HEAP8[(75482)>>0]|0;
   $59 = $58&255;
   $60 = (((54296 + ($59<<4)|0)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 1)|0;
   $63 = ($57|0)==($62|0);
   if (!($63)) {
    STACKTOP = sp;return;
   }
   HEAP32[$60>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -99: case -100: case -101: case -102:  {
   $64 = HEAP32[(76748)>>2]|0;
   $65 = (($64) + 1)|0;
   HEAP32[(76748)>>2] = $65;
   $66 = HEAP8[(75482)>>0]|0;
   $67 = $66&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($67,0,$$byval_copy12,7,1);
   $68 = HEAP32[19182]|0;
   $69 = HEAP8[(75482)>>0]|0;
   $70 = $69&255;
   $71 = (((54296 + ($70<<4)|0)) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + 1)|0;
   $74 = ($68|0)==($73|0);
   if (!($74)) {
    STACKTOP = sp;return;
   }
   HEAP32[$71>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -73:  {
   $75 = HEAP8[(75482)>>0]|0;
   $76 = $75&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($76,0,$$byval_copy12,8,1);
   $77 = HEAP32[19182]|0;
   $78 = HEAP8[(75482)>>0]|0;
   $79 = $78&255;
   $80 = (((54296 + ($79<<4)|0)) + 8|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + 1)|0;
   $83 = ($77|0)==($82|0);
   if (!($83)) {
    STACKTOP = sp;return;
   }
   HEAP32[$80>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -74:  {
   $84 = HEAP8[(75482)>>0]|0;
   $85 = $84&255;
   ;HEAP32[$$byval_copy12>>2]=HEAP32[(75616)>>2]|0;HEAP32[$$byval_copy12+4>>2]=HEAP32[(75616)+4>>2]|0;
   _escribe_fp_reg($85,0,$$byval_copy12,6,1);
   $86 = HEAP32[19182]|0;
   $87 = HEAP8[(75482)>>0]|0;
   $88 = $87&255;
   $89 = (((54296 + ($88<<4)|0)) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + 1)|0;
   $92 = ($86|0)==($91|0);
   if (!($92)) {
    STACKTOP = sp;return;
   }
   HEAP32[$89>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case -75: case -127: case -114: case 0:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   $93 = HEAP32[482]|0;
   HEAP32[$vararg_buffer>>2] = 10298;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 10435;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 1024;
   (_fprintf($93,27188,$vararg_buffer)|0);
   $94 = HEAP8[75472]|0;
   $95 = $94&255;
   HEAP32[$vararg_buffer3>>2] = $95;
   (_fprintf($93,10453,$vararg_buffer3)|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
}
function _fase_escritura_FPSR() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = (56616);
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==(-1);
 $7 = ($5|0)==(-1);
 $8 = $6 & $7;
 if (!($8)) {
  $9 = HEAP32[(76736)>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[(76736)>>2] = $10;
  $11 = HEAP32[(76744)>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[(76744)>>2] = $12;
 }
 $13 = HEAP8[56456]|0;
 switch ($13<<24>>24) {
 case -103: case -108: case -104: case -107: case -105: case -106:  {
  $14 = HEAP32[(76748)>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[(76748)>>2] = $15;
  $16 = HEAP8[(56466)>>0]|0;
  $17 = $16&255;
  $18 = (56600);
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  _escribe_int_reg($17,0,$20,$23,5,1);
  $24 = HEAP32[19182]|0;
  $25 = HEAP8[(56466)>>0]|0;
  $26 = $25&255;
  $27 = (((54296 + ($26<<4)|0)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  $30 = ($24|0)==($29|0);
  if (!($30)) {
   STACKTOP = sp;return;
  }
  HEAP32[$27>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case -116: case -121: case -117: case -120: case -118: case -119:  {
  $31 = HEAP32[(76748)>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[(76748)>>2] = $32;
  $33 = HEAP8[(56466)>>0]|0;
  $34 = $33&255;
  $35 = (56600);
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  _escribe_int_reg($34,0,$37,$40,5,1);
  $41 = HEAP32[19182]|0;
  $42 = HEAP8[(56466)>>0]|0;
  $43 = $42&255;
  $44 = (((54296 + ($43<<4)|0)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1)|0;
  $47 = ($41|0)==($46|0);
  if (!($47)) {
   STACKTOP = sp;return;
  }
  HEAP32[$44>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  $48 = HEAP32[482]|0;
  HEAP32[$vararg_buffer>>2] = 10298;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 10500;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 1120;
  (_fprintf($48,27188,$vararg_buffer)|0);
  $49 = HEAP8[56456]|0;
  $50 = $49&255;
  HEAP32[$vararg_buffer3>>2] = $50;
  (_fprintf($48,10520,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 }
}
function _impulso_reloj() {
 var $$030 = 0, $$126 = 0, $$222 = 0, $$321 = 0, $$pr = 0, $$pr17 = 0, $$pr19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[199577]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$pr = HEAP32[199574]|0;
  $2 = ($$pr|0)==(0);
  if ($2) {
   label = 4;
  } else {
   $15 = HEAP32[199582]|0;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = HEAP32[19181]|0;
    $18 = (($17) + 1)|0;
    HEAP32[19181] = $18;
    $19 = 54824;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($19) + 4)|0;
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = 54832;
    $26 = $25;
    HEAP32[$26>>2] = $21;
    $27 = (($25) + 4)|0;
    $28 = $27;
    HEAP32[$28>>2] = $24;
   }
   _pasar_a_ID_NOP();
   HEAP32[199574] = 0;
  }
 } else {
  _pasar_a_ID_NOP();
  HEAP32[199577] = 0;
  HEAP32[199574] = 0;
  label = 4;
 }
 if ((label|0) == 4) {
  $3 = HEAP32[19181]|0;
  $4 = (($3) + 1)|0;
  HEAP32[19181] = $4;
  $5 = 54824;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = 54832;
  $12 = $11;
  HEAP32[$12>>2] = $7;
  $13 = (($11) + 4)|0;
  $14 = $13;
  HEAP32[$14>>2] = $10;
 }
 $29 = HEAP32[199578]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $$pr17 = HEAP32[199575]|0;
  $31 = ($$pr17|0)==(0);
  if ($31) {
   label = 11;
  } else {
   _pasar_a_EX_NOP();
   _pasar_a_FP_LS_NOP();
   _pasar_a_FP_A_NOP();
   _pasar_a_FP_C_NOP();
   _pasar_a_FP_M_NOP();
   _pasar_a_ID_WB_NOP();
   HEAP32[199575] = 0;
  }
 } else {
  _pasar_a_EX_NOP();
  _pasar_a_FP_LS_NOP();
  _pasar_a_FP_A_NOP();
  _pasar_a_FP_C_NOP();
  _pasar_a_FP_M_NOP();
  _pasar_a_ID_WB_NOP();
  HEAP32[199578] = 0;
  HEAP32[199575] = 0;
  label = 11;
 }
 if ((label|0) == 11) {
  _memcpy((55008|0),(54840|0),168)|0;
 }
 $32 = HEAP32[199579]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $$pr19 = HEAP32[199576]|0;
  $34 = ($$pr19|0)==(0);
  if ($34) {
   label = 16;
  } else {
   _pasar_a_MEM_NOP();
   HEAP32[199576] = 0;
  }
 } else {
  _pasar_a_MEM_NOP();
  _pasar_a_FP_LS2_NOP();
  _pasar_a_FP_A2_NOP();
  _pasar_a_FP_C2_NOP();
  _pasar_a_FP_M2_NOP();
  HEAP32[199579] = 0;
  HEAP32[199576] = 0;
  label = 16;
 }
 if ((label|0) == 16) {
  _memcpy((55368|0),(55176|0),192)|0;
 }
 _memcpy((55744|0),(55560|0),184)|0;
 _memcpy((56104|0),(55928|0),176)|0;
 _memcpy((56632|0),(56840|0),208)|0;
 $35 = HEAP32[21]|0;
 $36 = ($35|0)<(2);
 if (!($36)) {
  $37 = HEAP32[21]|0;
  $$030 = 2;
  while(1) {
   $38 = (58296 + (($$030*200)|0)|0);
   $39 = (60296 + (($$030*200)|0)|0);
   _memcpy(($38|0),($39|0),200)|0;
   $40 = (($$030) + 1)|0;
   $41 = ($$030|0)<($37|0);
   if ($41) {
    $$030 = $40;
   } else {
    break;
   }
  }
 }
 _memcpy((57256|0),(57048|0),208)|0;
 $42 = HEAP32[18]|0;
 $43 = ($42|0)<(2);
 if (!($43)) {
  $44 = HEAP32[18]|0;
  $$126 = 2;
  while(1) {
   $45 = (62296 + (($$126*200)|0)|0);
   $46 = (64296 + (($$126*200)|0)|0);
   _memcpy(($45|0),($46|0),200)|0;
   $47 = (($$126) + 1)|0;
   $48 = ($$126|0)<($44|0);
   if ($48) {
    $$126 = $47;
   } else {
    break;
   }
  }
 }
 _memcpy((58088|0),(57880|0),208)|0;
 $49 = HEAP32[20]|0;
 $50 = ($49|0)<(2);
 if (!($50)) {
  $51 = HEAP32[20]|0;
  $$222 = 2;
  while(1) {
   $52 = (70296 + (($$222*200)|0)|0);
   $53 = (72296 + (($$222*200)|0)|0);
   _memcpy(($52|0),($53|0),200)|0;
   $54 = (($$222) + 1)|0;
   $55 = ($$222|0)<($51|0);
   if ($55) {
    $$222 = $54;
   } else {
    break;
   }
  }
 }
 _memcpy((57672|0),(57464|0),208)|0;
 $56 = HEAP32[19]|0;
 $57 = ($56|0)<(2);
 if ($57) {
  _memcpy((74464|0),(74296|0),168)|0;
  _memcpy((74800|0),(74632|0),168)|0;
  _memcpy((75136|0),(74968|0),168)|0;
  _memcpy((75472|0),(75304|0),168)|0;
  _memcpy((56456|0),(56280|0),176)|0;
  _memcpy((75808|0),(75640|0),168)|0;
  return;
 }
 $58 = HEAP32[19]|0;
 $$321 = 2;
 while(1) {
  $59 = (66296 + (($$321*200)|0)|0);
  $60 = (68296 + (($$321*200)|0)|0);
  _memcpy(($59|0),($60|0),200)|0;
  $61 = (($$321) + 1)|0;
  $62 = ($$321|0)<($58|0);
  if ($62) {
   $$321 = $61;
  } else {
   break;
  }
 }
 _memcpy((74464|0),(74296|0),168)|0;
 _memcpy((74800|0),(74632|0),168)|0;
 _memcpy((75136|0),(74968|0),168)|0;
 _memcpy((75472|0),(75304|0),168)|0;
 _memcpy((56456|0),(56280|0),176)|0;
 _memcpy((75808|0),(75640|0),168)|0;
 return;
}
function _mem_rango($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($2|0) {
 case 1: case 2:  {
  $5 = $3;
  $6 = $5;
  HEAP32[$6>>2] = $0;
  $7 = (($5) + 4)|0;
  $8 = $7;
  HEAP32[$8>>2] = $1;
  $9 = (_i64Add(($0|0),($1|0),1,0)|0);
  $10 = tempRet0;
  $69 = $9;$72 = $10;
  break;
 }
 case 3:  {
  $11 = (___divdi3(($0|0),($1|0),2,0)|0);
  $12 = tempRet0;
  $13 = (_bitshift64Shl(($11|0),($12|0),1)|0);
  $14 = tempRet0;
  $15 = $3;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  $19 = (_i64Add(($13|0),($14|0),2,0)|0);
  $20 = tempRet0;
  $69 = $19;$72 = $20;
  break;
 }
 case 4:  {
  $21 = (___divdi3(($0|0),($1|0),4,0)|0);
  $22 = tempRet0;
  $23 = (_bitshift64Shl(($21|0),($22|0),2)|0);
  $24 = tempRet0;
  $25 = $3;
  $26 = $25;
  HEAP32[$26>>2] = $23;
  $27 = (($25) + 4)|0;
  $28 = $27;
  HEAP32[$28>>2] = $24;
  $29 = (_i64Add(($23|0),($24|0),4,0)|0);
  $30 = tempRet0;
  $69 = $29;$72 = $30;
  break;
 }
 case 5:  {
  $31 = (___divdi3(($0|0),($1|0),8,0)|0);
  $32 = tempRet0;
  $33 = (_bitshift64Shl(($31|0),($32|0),3)|0);
  $34 = tempRet0;
  $35 = $3;
  $36 = $35;
  HEAP32[$36>>2] = $33;
  $37 = (($35) + 4)|0;
  $38 = $37;
  HEAP32[$38>>2] = $34;
  $39 = (_i64Add(($33|0),($34|0),8,0)|0);
  $40 = tempRet0;
  $69 = $39;$72 = $40;
  break;
 }
 case 6:  {
  $41 = (___divdi3(($0|0),($1|0),4,0)|0);
  $42 = tempRet0;
  $43 = (_bitshift64Shl(($41|0),($42|0),2)|0);
  $44 = tempRet0;
  $45 = $3;
  $46 = $45;
  HEAP32[$46>>2] = $43;
  $47 = (($45) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = $44;
  $49 = (_i64Add(($43|0),($44|0),4,0)|0);
  $50 = tempRet0;
  $69 = $49;$72 = $50;
  break;
 }
 case 8:  {
  $51 = (___divdi3(($0|0),($1|0),8,0)|0);
  $52 = tempRet0;
  $53 = (_bitshift64Shl(($51|0),($52|0),3)|0);
  $54 = tempRet0;
  $55 = $3;
  $56 = $55;
  HEAP32[$56>>2] = $53;
  $57 = (($55) + 4)|0;
  $58 = $57;
  HEAP32[$58>>2] = $54;
  $59 = (_i64Add(($53|0),($54|0),8,0)|0);
  $60 = tempRet0;
  $69 = $59;$72 = $60;
  break;
 }
 default: {
  $61 = $3;
  $62 = $61;
  HEAP32[$62>>2] = $0;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = $1;
  $65 = (_i64Add(($0|0),($1|0),1,0)|0);
  $66 = tempRet0;
  $69 = $65;$72 = $66;
 }
 }
 $67 = $4;
 $68 = $67;
 HEAP32[$68>>2] = $69;
 $70 = (($67) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $72;
 return;
}
function _mem_etiqueta($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $scevgep = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = (666600 + ($0<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 _mem_rango($0,$1,$9,$4,$5);
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $5;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($15|0)<($21|0);
 $23 = ($12>>>0)<($18>>>0);
 $24 = ($15|0)==($21|0);
 $25 = $24 & $23;
 $26 = $22 | $25;
 if ($26) {
  $27 = $5;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 4)|0;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $scevgep = (666600 + ($12<<2)|0);
  $33 = (_i64Add(($12|0),($15|0),1,0)|0);
  $34 = tempRet0;
  $35 = ($32|0)>($34|0);
  $36 = ($29>>>0)>($33>>>0);
  $37 = ($32|0)==($34|0);
  $38 = $37 & $36;
  $39 = $35 | $38;
  $40 = $39 ? $29 : $33;
  $41 = $39 ? $32 : $34;
  $42 = (_i64Add(($40|0),($41|0),1073741823,0)|0);
  $43 = tempRet0;
  $44 = (_i64Subtract(($42|0),($43|0),($12|0),($15|0))|0);
  $45 = tempRet0;
  $46 = $44 << 2;
  $47 = (($46) + 4)|0;
  _memset(($scevgep|0),0,($47|0))|0;
 }
 _mem_rango($0,$1,$2,$6,$7);
 $48 = $6;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = $7;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 4)|0;
 $58 = $57;
 $59 = HEAP32[$58>>2]|0;
 $60 = ($53|0)<($59|0);
 $61 = ($50>>>0)<($56>>>0);
 $62 = ($53|0)==($59|0);
 $63 = $62 & $61;
 $64 = $60 | $63;
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $65 = ($3|0)==(0);
 $66 = $7;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 $73 = $50;$75 = $53;
 while(1) {
  $72 = (666600 + ($73<<2)|0);
  HEAP32[$72>>2] = $2;
  if (!($65)) {
   $74 = (732136 + ($73<<2)|0);
   HEAP32[$74>>2] = 1;
  }
  $76 = (_i64Add(($73|0),($75|0),1,0)|0);
  $77 = tempRet0;
  $78 = ($77|0)<($71|0);
  $79 = ($76>>>0)<($68>>>0);
  $80 = ($77|0)==($71|0);
  $81 = $80 & $79;
  $82 = $78 | $81;
  if ($82) {
   $73 = $76;$75 = $77;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _lee_mem_datos($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$0$0$$sroa_idx$sroa_raw_idx = 0, $$sroa$0$sroa$0$sroa$0$0$extract$trunc = 0, $$sroa$0$sroa$0$sroa$0$0$extract$trunc20 = 0, $$sroa$0$sroa$0$sroa$0$0$extract$trunc21 = 0, $$sroa$0$sroa$0$sroa$0$0$insert$insert = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0 = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc38 = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc39 = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc40 = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$ext = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert = 0, $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift = 0, $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift42 = 0, $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift46 = 0, $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift49 = 0, $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift52 = 0, $$sroa$0$sroa$0$sroa$0$sroa$10$0$insert$ext = 0, $$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = 0, $$sroa$0$sroa$0$sroa$10$0$extract$shift = 0;
 var $$sroa$0$sroa$0$sroa$10$0$extract$shift26 = 0, $$sroa$0$sroa$0$sroa$10$0$extract$shift29 = 0, $$sroa$0$sroa$0$sroa$10$0$extract$shift32 = 0, $$sroa$0$sroa$0$sroa$10$sroa$0$0 = 0, $$sroa$0$sroa$10$0 = 0, $$sroa_raw_idx = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = HEAP32[19190]|0;
 $6 = ($5|0)<(0);
 $7 = $6 << 31 >> 31;
 $8 = ($7|0)>($2|0);
 $9 = ($5>>>0)>($1>>>0);
 $10 = ($7|0)==($2|0);
 $11 = $10 & $9;
 $12 = $8 | $11;
 if ($12) {
  $98 = HEAP32[482]|0;
  $99 = $vararg_buffer13;
  $100 = $99;
  HEAP32[$100>>2] = $1;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $2;
  (_fprintf($98,10933,$vararg_buffer13)|0);
  _exit(1);
  // unreachable;
 }
 $13 = HEAP32[(76764)>>2]|0;
 $14 = ($13|0)<(0);
 $15 = $14 << 31 >> 31;
 $16 = ($15|0)>($2|0);
 $17 = ($13>>>0)>($1>>>0);
 $18 = ($15|0)==($2|0);
 $19 = $18 & $17;
 $20 = $16 | $19;
 if (!($20)) {
  $98 = HEAP32[482]|0;
  $99 = $vararg_buffer13;
  $100 = $99;
  HEAP32[$100>>2] = $1;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $2;
  (_fprintf($98,10933,$vararg_buffer13)|0);
  _exit(1);
  // unreachable;
 }
 L7: do {
  switch ($3|0) {
  case 1: case 2:  {
   $21 = (37648 + ($1)|0);
   $22 = HEAP8[$21>>0]|0;
   $$sroa$0$sroa$0$sroa$0$sroa$0$0 = $22;$$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = 0;$$sroa$0$sroa$0$sroa$10$sroa$0$0 = 0;$$sroa$0$sroa$10$0 = 0;
   break;
  }
  case 3:  {
   $23 = $1 & 1;
   $24 = ($23|0)==(0);
   $25 = (0)==(0);
   $26 = $24 & $25;
   if ($26) {
    $27 = (___divdi3(($1|0),($2|0),2,0)|0);
    $28 = tempRet0;
    $29 = (37648 + ($27<<1)|0);
    $30 = HEAP16[$29>>1]|0;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc = $30&255;
    $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift = $30 & -256;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0 = $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc;$$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift;$$sroa$0$sroa$0$sroa$10$sroa$0$0 = 0;$$sroa$0$sroa$10$0 = 0;
    break L7;
   } else {
    $31 = HEAP32[482]|0;
    $32 = $vararg_buffer;
    $33 = $32;
    HEAP32[$33>>2] = $1;
    $34 = (($32) + 4)|0;
    $35 = $34;
    HEAP32[$35>>2] = $2;
    (_fprintf($31,10569,$vararg_buffer)|0);
    _exit(1);
    // unreachable;
   }
   break;
  }
  case 4:  {
   $36 = $1 & 3;
   $37 = ($36|0)==(0);
   $38 = (0)==(0);
   $39 = $37 & $38;
   if ($39) {
    $40 = (___divdi3(($1|0),($2|0),4,0)|0);
    $41 = tempRet0;
    $42 = (37648 + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $$sroa$0$sroa$0$sroa$0$0$extract$trunc21 = $43&65535;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc40 = $43&255;
    $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift49 = $$sroa$0$sroa$0$sroa$0$0$extract$trunc21 & -256;
    $$sroa$0$sroa$0$sroa$10$0$extract$shift29 = $43 & -65536;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0 = $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc40;$$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift49;$$sroa$0$sroa$0$sroa$10$sroa$0$0 = $$sroa$0$sroa$0$sroa$10$0$extract$shift29;$$sroa$0$sroa$10$0 = 0;
    break L7;
   } else {
    $44 = HEAP32[482]|0;
    $45 = $vararg_buffer1;
    $46 = $45;
    HEAP32[$46>>2] = $1;
    $47 = (($45) + 4)|0;
    $48 = $47;
    HEAP32[$48>>2] = $2;
    (_fprintf($44,10641,$vararg_buffer1)|0);
    _exit(1);
    // unreachable;
   }
   break;
  }
  case 5:  {
   $49 = $1 & 7;
   $50 = ($49|0)==(0);
   $51 = (0)==(0);
   $52 = $50 & $51;
   if ($52) {
    $53 = (___divdi3(($1|0),($2|0),8,0)|0);
    $54 = tempRet0;
    $55 = (37648 + ($53<<3)|0);
    $56 = HEAP32[$55>>2]|0;
    $$sroa_raw_idx = ((($55)) + 4|0);
    $57 = HEAP32[$$sroa_raw_idx>>2]|0;
    $$sroa$0$sroa$0$sroa$0$0$extract$trunc20 = $56&65535;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc39 = $56&255;
    $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift46 = $$sroa$0$sroa$0$sroa$0$0$extract$trunc20 & -256;
    $$sroa$0$sroa$0$sroa$10$0$extract$shift26 = $56 & -65536;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0 = $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc39;$$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift46;$$sroa$0$sroa$0$sroa$10$sroa$0$0 = $$sroa$0$sroa$0$sroa$10$0$extract$shift26;$$sroa$0$sroa$10$0 = $57;
    break L7;
   } else {
    $58 = HEAP32[482]|0;
    $59 = $vararg_buffer4;
    $60 = $59;
    HEAP32[$60>>2] = $1;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $2;
    (_fprintf($58,10713,$vararg_buffer4)|0);
    _exit(1);
    // unreachable;
   }
   break;
  }
  case 6:  {
   $63 = $1 & 3;
   $64 = ($63|0)==(0);
   $65 = (0)==(0);
   $66 = $64 & $65;
   if ($66) {
    $67 = (___divdi3(($1|0),($2|0),4,0)|0);
    $68 = tempRet0;
    $69 = (37648 + ($67<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $$sroa$0$sroa$0$sroa$0$0$extract$trunc = $70&65535;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc38 = $70&255;
    $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift42 = $$sroa$0$sroa$0$sroa$0$0$extract$trunc & -256;
    $$sroa$0$sroa$0$sroa$10$0$extract$shift = $70 & -65536;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0 = $$sroa$0$sroa$0$sroa$0$sroa$0$0$extract$trunc38;$$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift42;$$sroa$0$sroa$0$sroa$10$sroa$0$0 = $$sroa$0$sroa$0$sroa$10$0$extract$shift;$$sroa$0$sroa$10$0 = 0;
    break L7;
   } else {
    $71 = HEAP32[482]|0;
    $72 = $vararg_buffer7;
    $73 = $72;
    HEAP32[$73>>2] = $1;
    $74 = (($72) + 4)|0;
    $75 = $74;
    HEAP32[$75>>2] = $2;
    (_fprintf($71,10786,$vararg_buffer7)|0);
    _exit(1);
    // unreachable;
   }
   break;
  }
  case 8:  {
   $76 = $1 & 7;
   $77 = ($76|0)==(0);
   $78 = (0)==(0);
   $79 = $77 & $78;
   if ($79) {
    $80 = (___divdi3(($1|0),($2|0),8,0)|0);
    $81 = tempRet0;
    $82 = (37648 + ($80<<3)|0);
    $83 = $82;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    $86 = (($83) + 4)|0;
    $87 = $86;
    $88 = HEAP32[$87>>2]|0;
    $89 = $85&65535;
    $90 = $85&255;
    $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift52 = $89 & -256;
    $$sroa$0$sroa$0$sroa$10$0$extract$shift32 = $85 & -65536;
    $$sroa$0$sroa$0$sroa$0$sroa$0$0 = $90;$$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = $$sroa$0$sroa$0$sroa$0$sroa$10$0$extract$shift52;$$sroa$0$sroa$0$sroa$10$sroa$0$0 = $$sroa$0$sroa$0$sroa$10$0$extract$shift32;$$sroa$0$sroa$10$0 = $88;
    break L7;
   } else {
    $91 = HEAP32[482]|0;
    $92 = $vararg_buffer10;
    $93 = $92;
    HEAP32[$93>>2] = $1;
    $94 = (($92) + 4)|0;
    $95 = $94;
    HEAP32[$95>>2] = $2;
    (_fprintf($91,10859,$vararg_buffer10)|0);
    _exit(1);
    // unreachable;
   }
   break;
  }
  default: {
   $$sroa$0$sroa$0$sroa$0$sroa$0$0 = 0;$$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk = 0;$$sroa$0$sroa$0$sroa$10$sroa$0$0 = 0;$$sroa$0$sroa$10$0 = 0;
  }
  }
 } while(0);
 $96 = (732136 + ($1<<2)|0);
 $97 = HEAP32[$96>>2]|0;
 HEAP32[$4>>2] = $97;
 $$sroa$0$sroa$0$sroa$0$sroa$10$0$insert$ext = $$sroa$0$sroa$0$sroa$0$sroa$10$sroa$0$0$shrunk&65535;
 $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$ext = $$sroa$0$sroa$0$sroa$0$sroa$0$0&255;
 $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert = $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$ext | $$sroa$0$sroa$0$sroa$0$sroa$10$0$insert$ext;
 $$sroa$0$sroa$0$sroa$0$0$insert$insert = $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert | $$sroa$0$sroa$0$sroa$10$sroa$0$0;
 HEAP32[$0>>2] = $$sroa$0$sroa$0$sroa$0$0$insert$insert;
 $$sroa$0$0$$sroa_idx$sroa_raw_idx = ((($0)) + 4|0);
 HEAP32[$$sroa$0$0$$sroa_idx$sroa_raw_idx>>2] = $$sroa$0$sroa$10$0;
 STACKTOP = sp;return;
}
function _escribe_mem_datos($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 switch ($3|0) {
 case 2: case 1:  {
  $5 = HEAP8[$2>>0]|0;
  $6 = (37648 + ($0)|0);
  HEAP8[$6>>0] = $5;
  _mem_etiqueta($0,$1,$3,$4);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $7 = HEAP16[$2>>1]|0;
  $8 = (___divdi3(($0|0),($1|0),2,0)|0);
  $9 = tempRet0;
  $10 = (37648 + ($8<<1)|0);
  HEAP16[$10>>1] = $7;
  _mem_etiqueta($0,$1,$3,$4);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $11 = HEAP32[$2>>2]|0;
  $12 = (___divdi3(($0|0),($1|0),4,0)|0);
  $13 = tempRet0;
  $14 = (37648 + ($12<<2)|0);
  HEAP32[$14>>2] = $11;
  _mem_etiqueta($0,$1,$3,$4);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $15 = $2;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (___divdi3(($0|0),($1|0),8,0)|0);
  $22 = tempRet0;
  $23 = (37648 + ($21<<3)|0);
  $24 = $23;
  $25 = $24;
  HEAP32[$25>>2] = $17;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $20;
  _mem_etiqueta($0,$1,$3,$4);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $28 = HEAP32[$2>>2]|0;
  $29 = (___divdi3(($0|0),($1|0),4,0)|0);
  $30 = tempRet0;
  $31 = (37648 + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  _mem_etiqueta($0,$1,$3,$4);
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $32 = +HEAPF64[$2>>3];
  $33 = (___divdi3(($0|0),($1|0),8,0)|0);
  $34 = tempRet0;
  $35 = (37648 + ($33<<3)|0);
  HEAPF64[$35>>3] = $32;
  _mem_etiqueta($0,$1,$3,$4);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $36 = HEAP32[482]|0;
  HEAP32[$vararg_buffer>>2] = 10990;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 11023;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 190;
  (_fprintf($36,27188,$vararg_buffer)|0);
  $37 = $vararg_buffer3;
  $38 = $37;
  HEAP32[$38>>2] = $0;
  $39 = (($37) + 4)|0;
  $40 = $39;
  HEAP32[$40>>2] = $1;
  (_fprintf($36,11041,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 }
}
function _lee_mem_instruc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = $1 & 3;
 $4 = ($3|0)==(0);
 $5 = (0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $12 = (___divdi3(($1|0),($2|0),4,0)|0);
  $13 = tempRet0;
  $14 = (76776 + (($12*144)|0)|0);
  _memcpy(($0|0),($14|0),144)|0;
  STACKTOP = sp;return;
 } else {
  $7 = HEAP32[482]|0;
  $8 = $vararg_buffer;
  $9 = $8;
  HEAP32[$9>>2] = $1;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $2;
  (_fprintf($7,11108,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
}
function _escribe_mem_instruc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = $0 & 3;
 $4 = ($3|0)==(0);
 $5 = (0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $12 = (___divdi3(($0|0),($1|0),4,0)|0);
  $13 = tempRet0;
  $14 = (76776 + (($12*144)|0)|0);
  _memcpy(($14|0),($2|0),144)|0;
  STACKTOP = sp;return;
 } else {
  $7 = HEAP32[482]|0;
  $8 = $vararg_buffer;
  $9 = $8;
  HEAP32[$9>>2] = $0;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $1;
  (_fprintf($7,11171,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
}
function _lee_int_reg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (797800 + ($0<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (798060 + ($0<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$3>>2] = $7;
 $8 = (54032 + ($0<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 tempRet0 = ($14);
 return ($11|0);
}
function _escribe_int_reg($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (54032 + ($0<<3)|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $2;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $3;
 $11 = (797800 + ($0<<2)|0);
 HEAP32[$11>>2] = $4;
 $12 = ($5|0)==(0);
 if ($12) {
  return;
 }
 $13 = (798060 + ($0<<2)|0);
 HEAP32[$13>>2] = 1;
 return;
}
function _lee_fp_reg($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (797672 + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$3>>2] = $6;
 $7 = (797932 + ($1<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$4>>2] = $8;
 $9 = (54296 + ($1<<4)|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function _escribe_fp_reg($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (54296 + ($0<<4)|0);
 $6 = $2;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (797672 + ($0<<2)|0);
 HEAP32[$16>>2] = $3;
 $17 = ($4|0)==(0);
 if ($17) {
  return;
 }
 $18 = (797932 + ($0<<2)|0);
 HEAP32[$18>>2] = 1;
 return;
}
function _dibuja_datapath() {
 var $$ = 0, $$byval_copy156 = 0, $$byval_copy157 = 0, $$off = 0, $$pr = 0, $$pr128 = 0, $$pr129 = 0, $$pr130 = 0, $$sink = 0, $$sink63 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $leninc = 0, $leninc100 = 0, $leninc102 = 0, $leninc104 = 0, $leninc106 = 0, $leninc108 = 0, $leninc111 = 0, $leninc113 = 0, $leninc115 = 0, $leninc117 = 0, $leninc119 = 0, $leninc121 = 0, $leninc123 = 0;
 var $leninc125 = 0, $leninc127 = 0, $leninc70 = 0, $leninc72 = 0, $leninc74 = 0, $leninc76 = 0, $leninc78 = 0, $leninc80 = 0, $leninc82 = 0, $leninc84 = 0, $leninc86 = 0, $leninc88 = 0, $leninc90 = 0, $leninc92 = 0, $leninc94 = 0, $leninc96 = 0, $leninc98 = 0, $not$ = 0, $not$109 = 0, $not$switch = 0;
 var $strlen = 0, $strlen101 = 0, $strlen103 = 0, $strlen105 = 0, $strlen107 = 0, $strlen110 = 0, $strlen112 = 0, $strlen114 = 0, $strlen116 = 0, $strlen118 = 0, $strlen120 = 0, $strlen122 = 0, $strlen124 = 0, $strlen126 = 0, $strlen69 = 0, $strlen71 = 0, $strlen73 = 0, $strlen75 = 0, $strlen77 = 0, $strlen79 = 0;
 var $strlen81 = 0, $strlen83 = 0, $strlen85 = 0, $strlen87 = 0, $strlen89 = 0, $strlen91 = 0, $strlen93 = 0, $strlen95 = 0, $strlen97 = 0, $strlen99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 29696|0;
 $$byval_copy157 = sp;
 $$byval_copy156 = sp + 29448|0;
 $0 = sp + 29560|0;
 $1 = sp + 28384|0;
 $2 = sp + 27320|0;
 $3 = sp + 26176|0;
 $4 = sp + 25032|0;
 $5 = sp + 23888|0;
 $6 = sp + 22744|0;
 $7 = sp + 21672|0;
 $8 = sp + 20600|0;
 $9 = sp + 19528|0;
 $10 = sp + 18456|0;
 $11 = sp + 17384|0;
 $12 = sp + 16312|0;
 $13 = sp + 15240|0;
 $14 = sp + 14144|0;
 $15 = sp + 13048|0;
 $16 = sp + 11952|0;
 $17 = sp + 10864|0;
 $18 = sp + 9776|0;
 $19 = sp + 8688|0;
 $20 = sp + 7600|0;
 $21 = sp + 6512|0;
 $22 = sp + 5432|0;
 $23 = sp + 4352|0;
 $24 = sp + 3272|0;
 $25 = sp + 2192|0;
 $26 = sp + 1112|0;
 $27 = sp + 32|0;
 $28 = sp + 8|0;
 $29 = sp + 29536|0;
 $30 = sp + 29516|0;
 $31 = sp + 29496|0;
 $32 = sp + 29476|0;
 $33 = sp + 29456|0;
 $34 = 54832;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 _color_instruccion($29,$36,$39);
 $40 = (55160);
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 _color_instruccion($30,$42,$45);
 $46 = (55544);
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 _color_instruccion($31,$48,$51);
 $52 = (55912);
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 _color_instruccion($32,$54,$57);
 $58 = (56264);
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 _color_instruccion($33,$60,$63);
 $64 = HEAP32[199583]|0;
 (_fwrite(11236,25,1,$64)|0);
 $65 = HEAP32[199583]|0;
 (_fprintf($65,11262,$$byval_copy157)|0);
 $66 = HEAP32[199583]|0;
 (_fwrite(11418,23,1,$66)|0);
 $67 = 54832;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = (($67) + 4)|0;
 $71 = $70;
 $72 = HEAP32[$71>>2]|0;
 _imprime_instruccion_color($0,$69,$72,0);
 _escribe(90,15,$0,$29,18);
 $73 = (55160);
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 _imprime_instruccion_color($0,$75,$78,0);
 _escribe(330,15,$0,$30,18);
 $79 = (55544);
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 $82 = (($79) + 4)|0;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 _imprime_instruccion_color($0,$81,$84,0);
 _escribe(570,15,$0,$31,18);
 $85 = (55912);
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 _imprime_instruccion_color($0,$87,$90,0);
 _escribe(770,15,$0,$32,18);
 $91 = (56264);
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($91) + 4)|0;
 $95 = $94;
 $96 = HEAP32[$95>>2]|0;
 _imprime_instruccion_color($0,$93,$96,0);
 _escribe(940,15,$0,$33,18);
 _genera_latch($1);
 _genera_mem($12,100,190,11442,840456,11452);
 $97 = ((($1)) + 32|0);
 $98 = ((($12)) + 24|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$97>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$97+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$98>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$98+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$29);
 _genera_alu($7,100,60,50,100,11457);
 $99 = ((($7)) + 24|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + -20)|0;
 $102 = ((($7)) + 28|0);
 $103 = HEAP32[$102>>2]|0;
 _escribe($101,$103,11459,11461,14);
 $104 = ((($7)) + 32|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$97>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$97+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$104>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$104+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$29);
 HEAP32[$28>>2] = 2;
 $105 = HEAP32[19177]|0;
 $106 = HEAP32[199582]|0;
 $107 = ($106|0)!=(0);
 L1: do {
  switch ($105|0) {
  case 2: case 5: case 8:  {
   if (!($107)) {
    $110 = ((($28)) + 4|0);
    $strlen124 = (_strlen($29)|0);
    $leninc125 = (($strlen124) + 1)|0;
    _memcpy(($110|0),($29|0),($leninc125|0))|0;
    break L1;
   }
   $108 = HEAP8[55008]|0;
   switch ($108<<24>>24) {
   case 111: case 109:  {
    $$sink = 1;
    break;
   }
   default: {
    $$sink = 0;
   }
   }
   HEAP32[$28>>2] = $$sink;
   $109 = ((($28)) + 4|0);
   $strlen126 = (_strlen($30)|0);
   $leninc127 = (($strlen126) + 1)|0;
   _memcpy(($109|0),($30|0),($leninc127|0))|0;
   break;
  }
  case 1: case 4: case 7:  {
   if ($107) {
    HEAP32[$28>>2] = 0;
    $111 = ((($28)) + 4|0);
    $strlen122 = (_strlen($31)|0);
    $leninc123 = (($strlen122) + 1)|0;
    _memcpy(($111|0),($31|0),($leninc123|0))|0;
    break L1;
   } else {
    $112 = ((($28)) + 4|0);
    $strlen120 = (_strlen($29)|0);
    $leninc121 = (($strlen120) + 1)|0;
    _memcpy(($112|0),($29|0),($leninc121|0))|0;
    break L1;
   }
   break;
  }
  default: {
   if ($107) {
    HEAP32[$28>>2] = 0;
    $113 = ((($28)) + 4|0);
    $strlen118 = (_strlen($32)|0);
    $leninc119 = (($strlen118) + 1)|0;
    _memcpy(($113|0),($32|0),($leninc119|0))|0;
    break L1;
   } else {
    $114 = ((($28)) + 4|0);
    $strlen = (_strlen($29)|0);
    $leninc = (($strlen) + 1)|0;
    _memcpy(($114|0),($29|0),($leninc|0))|0;
    break L1;
   }
  }
  }
 } while(0);
 $115 = HEAP32[$28>>2]|0;
 $116 = ((($28)) + 4|0);
 _genera_mux3($21,190,110,$115,$116);
 $117 = ((($7)) + 40|0);
 $118 = ((($21)) + 40|0);
 $119 = ((($21)) + 44|0);
 $120 = HEAP32[$119>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$117>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$117+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$118>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$118+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$120,-10,$29);
 $121 = ((($12)) + 40|0);
 $122 = ((($12)) + 44|0);
 $123 = HEAP32[$122>>2]|0;
 _genera_latch6($3,230,160,$123,0,0,0,0,11467,11473,11477,840456,840456,840456,840456);
 $124 = ((($3)) + 24|0);
 $125 = ((($3)) + 28|0);
 $126 = HEAP32[$125>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$117>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$117+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$124>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$124+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$126,0,$29);
 $127 = ((($3)) + 40|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$121>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$121+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$127>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$127+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$29);
 $128 = ((($21)) + 56|0);
 $129 = ((($1)) + 24|0);
 $130 = ((($7)) + 12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ((($1)) + 4|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = (($133) - ($131))|0;
 $135 = (($134|0) / 2)&-1;
 $136 = (($135) + ($131))|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$128>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$128+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$129>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$129+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$136,-10,$29);
 $137 = HEAP8[(55016)>>0]|0;
 $138 = $137&255;
 $139 = HEAP8[(55017)>>0]|0;
 $140 = $139&255;
 $141 = HEAP8[(56114)>>0]|0;
 $142 = $141&255;
 $143 = 75992;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + 4)|0;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 _genera_regs($14,$138,$30,$140,$30,$142,$33,$145,$33);
 _genera_elipse($2);
 $149 = ((($3)) + 48|0);
 $150 = ((($14)) + 24|0);
 $151 = ((($14)) + 28|0);
 $152 = HEAP32[$151>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$149>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$149+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$150>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$150+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$152,0,$30);
 $153 = ((($14)) + 32|0);
 $154 = ((($14)) + 36|0);
 $155 = HEAP32[$154>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$149>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$149+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$153>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$153+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$155,0,$30);
 $156 = ((($2)) + 24|0);
 $157 = ((($2)) + 28|0);
 $158 = HEAP32[$157>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$149>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$149+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$156>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$156+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$158,0,$30);
 $159 = HEAP32[19177]|0;
 $160 = ((($3)) + 32|0);
 $161 = ((($3)) + 36|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ((($14)) + 56|0);
 $164 = ((($14)) + 60|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ((($14)) + 64|0);
 $167 = ((($14)) + 68|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ((($2)) + 32|0);
 $170 = ((($2)) + 36|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ((($2)) + 12|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = (($173) + 30)|0;
 switch ($159|0) {
 case 2: case 5: case 8:  {
  _genera_latch6($4,490,0,$162,$165,$168,$171,$174,11480,840456,840456,11486,11488,11490,11477);
  break;
 }
 default: {
  _genera_latch6($4,490,0,$162,$165,$168,$171,$174,11480,840456,11473,11486,11488,11490,11477);
 }
 }
 $175 = HEAP32[(55012)>>2]|0;
 $not$ = ($175|0)!=(0);
 $176 = $not$&1;
 HEAP32[$28>>2] = $176;
 _genera_mux2($22,320,470,$176,$30);
 $177 = ((($22)) + 32|0);
 $178 = ((($22)) + 36|0);
 $179 = HEAP32[$178>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$149>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$149+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$177>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$177+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$179,0,$30);
 $180 = ((($22)) + 24|0);
 $181 = ((($22)) + 28|0);
 $182 = HEAP32[$181>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$149>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$149+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$180>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$180+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$182,0,$30);
 $183 = ((($4)) + 56|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$163>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$163+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$183>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$183+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$30);
 $184 = ((($4)) + 72|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$166>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$166+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$184>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$184+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$30);
 $185 = ((($4)) + 88|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$169>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$169+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$185>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$185+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$30);
 $186 = ((($22)) + 48|0);
 $187 = ((($4)) + 104|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$186>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$186+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$187>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$187+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$30);
 $188 = HEAP32[19177]|0;
 switch ($188|0) {
 case 2: case 5: case 8:  {
  _genera_alu($10,430,70,40,80,11494);
  _genera_alu($9,300,60,50,100,11457);
  $189 = ((($9)) + 32|0);
  $190 = ((($2)) + 4|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = (($191) + -10)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$169>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$169+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$189>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$189+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$192,-10,$30);
  $193 = ((($9)) + 24|0);
  $194 = ((($9)) + 28|0);
  $195 = HEAP32[$194>>2]|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$160>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$160+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$193>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$193+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$195,0,$30);
  $196 = ((($10)) + 40|0);
  $197 = ((($21)) + 48|0);
  $198 = ((($3)) + 4|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (($199) + -30)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$196>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$196+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$197>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$197+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$200,0,$30);
  $201 = ((($9)) + 40|0);
  $202 = ((($21)) + 24|0);
  $203 = HEAP32[$198>>2]|0;
  $204 = (($203) + -40)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$201>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$201+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$202>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$202+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$204,-10,$30);
  $205 = ((($21)) + 32|0);
  $206 = ((($14)) + 4|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = (($207) + -10)|0;
  $209 = HEAP32[$198>>2]|0;
  $210 = (($209) + -50)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$163>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$163+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$205>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$205+4>>2]|0;
  _conecta_p1_dx1_y1_dx2_y2_dx3_p2($$byval_copy156,$$byval_copy157,$208,$210,$30);
  $211 = HEAP32[19178]|0;
  $212 = ($211|0)==(1);
  if ($212) {
   label = 19;
  } else {
   $213 = ((($10)) + 24|0);
   $214 = HEAP32[$206>>2]|0;
   $215 = (($214) + -10)|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$163>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$163+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$213>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$213+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$215,-20,$30);
   $216 = ((($10)) + 32|0);
   $217 = HEAP32[$206>>2]|0;
   $218 = (($217) + -20)|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$166>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$166+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$216>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$216+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$218,-10,$30);
   $$pr = HEAP32[19178]|0;
   $219 = ($$pr|0)==(1);
   if ($219) {
    label = 19;
   }
  }
  if ((label|0) == 19) {
   $220 = HEAP32[199559]|0;
   $221 = ($220|0)==(0);
   if ($221) {
    HEAP32[$28>>2] = 2;
    $strlen110 = (_strlen($30)|0);
    $leninc111 = (($strlen110) + 1)|0;
    _memcpy(($116|0),($30|0),($leninc111|0))|0;
   } else {
    HEAP32[$28>>2] = 0;
    $strlen116 = (_strlen($32)|0);
    $leninc117 = (($strlen116) + 1)|0;
    _memcpy(($116|0),($32|0),($leninc117|0))|0;
   }
   $222 = ((($10)) + 24|0);
   $223 = ((($10)) + 28|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = HEAP32[$28>>2]|0;
   _genera_mux3($17,390,$224,$225,$116);
   $226 = ((($17)) + 56|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$226>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$226+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$222>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$222+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$30);
   $227 = ((($17)) + 40|0);
   $228 = HEAP32[$206>>2]|0;
   $229 = (($228) + -10)|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$163>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$163+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$227>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$227+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$229,-20,$30);
   $230 = HEAP32[199560]|0;
   $231 = ($230|0)==(0);
   if ($231) {
    HEAP32[$28>>2] = 2;
    $strlen112 = (_strlen($30)|0);
    $leninc113 = (($strlen112) + 1)|0;
    _memcpy(($116|0),($30|0),($leninc113|0))|0;
   } else {
    HEAP32[$28>>2] = 0;
    $strlen114 = (_strlen($32)|0);
    $leninc115 = (($strlen114) + 1)|0;
    _memcpy(($116|0),($32|0),($leninc115|0))|0;
   }
   $232 = ((($10)) + 32|0);
   $233 = ((($10)) + 36|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[$28>>2]|0;
   _genera_mux3($18,390,$234,$235,$116);
   $236 = ((($18)) + 56|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$236>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$236+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$232>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$232+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$30);
   $237 = ((($18)) + 40|0);
   $238 = HEAP32[$206>>2]|0;
   $239 = (($238) + -20)|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$166>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$166+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$237>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$237+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$239,-10,$30);
  }
  $$pr128 = HEAP32[19177]|0;
  $240 = $$pr128;
  break;
 }
 default: {
  $240 = $188;
 }
 }
 switch ($240|0) {
 case 2: case 5: case 8:  {
  break;
 }
 default: {
  $241 = ((($4)) + 40|0);
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$160>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$160+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$241>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$241+4>>2]|0;
  _conecta($$byval_copy156,$$byval_copy157,$30);
 }
 }
 _genera_alu($8,620,225,50,120,11498);
 $242 = HEAP32[19177]|0;
 switch ($242|0) {
 case 2: case 5: case 8:  {
  $243 = ((($4)) + 36|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = ((($10)) + 44|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = ((($8)) + 44|0);
  $248 = HEAP32[$247>>2]|0;
  $249 = ((($4)) + 100|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($250) + -10)|0;
  $252 = ((($4)) + 116|0);
  $253 = HEAP32[$252>>2]|0;
  _genera_latch6($5,690,$244,$246,$248,$251,$253,0,11502,840456,840456,11507,11488,11477,840456);
  $$pr129 = HEAP32[19177]|0;
  $254 = $$pr129;
  break;
 }
 default: {
  $254 = $242;
 }
 }
 switch ($254|0) {
 case 1: case 4: case 7:  {
  _genera_alu($11,620,70,40,80,11494);
  $255 = ((($4)) + 36|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = ((($11)) + 40|0);
  $258 = ((($11)) + 44|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ((($8)) + 40|0);
  $261 = ((($8)) + 44|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = ((($8)) + 12|0);
  $264 = HEAP32[$263>>2]|0;
  $265 = (($264) + 50)|0;
  $266 = ((($4)) + 116|0);
  $267 = HEAP32[$266>>2]|0;
  _genera_latch6($5,690,$256,$259,$262,$265,$267,0,11502,840456,840456,11507,11488,11477,840456);
  $268 = ((($21)) + 48|0);
  $269 = ((($4)) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (($270) + -30)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$257>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$257+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$268>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$268+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$271,0,$31);
  $272 = ((($21)) + 24|0);
  $273 = HEAP32[$269>>2]|0;
  $274 = (($273) + -50)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$260>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$260+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$272>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$272+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$274,-10,$31);
  break;
 }
 default: {
 }
 }
 $275 = HEAP32[19177]|0;
 switch ($275|0) {
 case 0: case 3: case 6:  {
  _genera_alu($11,620,70,40,80,11494);
  $276 = ((($4)) + 36|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = ((($11)) + 40|0);
  $279 = ((($11)) + 44|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = ((($8)) + 44|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = ((($8)) + 12|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) + 50)|0;
  $286 = ((($4)) + 116|0);
  $287 = HEAP32[$286>>2]|0;
  _genera_latch6($5,690,$277,$280,$282,$285,$287,0,11502,840456,11514,11507,11488,11477,840456);
  $288 = ((($5)) + 40|0);
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$278>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$278+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$288>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$288+4>>2]|0;
  _conecta($$byval_copy156,$$byval_copy157,$31);
  break;
 }
 default: {
 }
 }
 $289 = HEAP32[19178]|0;
 $290 = ($289|0)==(1);
 if ($290) {
  label = 40;
 } else {
  $291 = HEAP32[19177]|0;
  switch ($291|0) {
  case 2: case 5: case 8:  {
   $312 = ((($4)) + 64|0);
   $313 = ((($8)) + 24|0);
   $314 = ((($8)) + 28|0);
   $315 = HEAP32[$314>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$312>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$312+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$313>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$313+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$315,0,$31);
   break;
  }
  default: {
   $292 = HEAP8[55368]|0;
   $$off = (($292) + -100)<<24>>24;
   $not$switch = ($$off&255)>(5);
   $$ = $not$switch&1;
   HEAP32[$28>>2] = $$;
   $293 = ((($8)) + 24|0);
   $294 = ((($8)) + 28|0);
   $295 = HEAP32[$294>>2]|0;
   _genera_mux2($23,580,$295,$$,$31);
   $296 = ((($23)) + 48|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$296>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$296+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$293>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$293+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$31);
   $297 = ((($4)) + 64|0);
   $298 = ((($23)) + 32|0);
   $299 = ((($23)) + 36|0);
   $300 = HEAP32[$299>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$297>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$297+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$298>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$298+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$300,0,$31);
   $301 = ((($4)) + 48|0);
   $302 = ((($23)) + 24|0);
   $303 = ((($23)) + 28|0);
   $304 = HEAP32[$303>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$301>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$301+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$302>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$302+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$304,0,$31);
   $305 = ((($11)) + 24|0);
   $306 = ((($11)) + 28|0);
   $307 = HEAP32[$306>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$297>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$297+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$305>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$305+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$307,0,$31);
   $308 = ((($4)) + 80|0);
   $309 = ((($11)) + 32|0);
   $310 = ((($11)) + 36|0);
   $311 = HEAP32[$310>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$308>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$308+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$309>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$309+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$311,0,$31);
  }
  }
  $316 = HEAP32[(55372)>>2]|0;
  $not$109 = ($316|0)!=(0);
  $317 = $not$109&1;
  HEAP32[$28>>2] = $317;
  $318 = ((($8)) + 32|0);
  $319 = ((($8)) + 36|0);
  $320 = HEAP32[$319>>2]|0;
  _genera_mux2($24,580,$320,$317,$31);
  $321 = ((($24)) + 48|0);
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$321>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$321+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$318>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$318+4>>2]|0;
  _conecta($$byval_copy156,$$byval_copy157,$31);
  $322 = ((($4)) + 80|0);
  $323 = ((($24)) + 24|0);
  $324 = ((($24)) + 28|0);
  $325 = HEAP32[$324>>2]|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$322>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$322+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$323>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$323+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$325,0,$31);
  $326 = ((($4)) + 96|0);
  $327 = ((($24)) + 32|0);
  $328 = ((($24)) + 36|0);
  $329 = HEAP32[$328>>2]|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$326>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$326+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$327>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$327+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$329,0,$31);
  $330 = ((($5)) + 72|0);
  $331 = ((($5)) + 76|0);
  $332 = HEAP32[$331>>2]|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$322>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$322+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$330>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$330+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$332,0,$31);
  $$pr130 = HEAP32[19178]|0;
  $333 = ($$pr130|0)==(1);
  if ($333) {
   label = 40;
  }
 }
 L56: do {
  if ((label|0) == 40) {
   $334 = HEAP32[199553]|0;
   $335 = ($334|0)==(0);
   L58: do {
    if ($335) {
     $336 = HEAP32[199549]|0;
     $337 = ($336|0)==(0);
     if (!($337)) {
      HEAP32[$28>>2] = 1;
      $strlen105 = (_strlen($32)|0);
      $leninc106 = (($strlen105) + 1)|0;
      _memcpy(($116|0),($32|0),($leninc106|0))|0;
      break;
     }
     $338 = HEAP8[55368]|0;
     switch ($338<<24>>24) {
     case 110: case 108: case 105: case 104: case 102: case 103: case 100: case 101:  {
      break;
     }
     default: {
      HEAP32[$28>>2] = 3;
      $strlen73 = (_strlen($31)|0);
      $leninc74 = (($strlen73) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc74|0))|0;
      break L58;
     }
     }
     $339 = HEAP32[19177]|0;
     switch ($339|0) {
     case 2: case 5: case 8:  {
      HEAP32[$28>>2] = 3;
      $strlen103 = (_strlen($31)|0);
      $leninc104 = (($strlen103) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc104|0))|0;
      break L58;
      break;
     }
     default: {
      HEAP32[$28>>2] = 0;
      $strlen101 = (_strlen($31)|0);
      $leninc102 = (($strlen101) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc102|0))|0;
      break L58;
     }
     }
    } else {
     HEAP32[$28>>2] = 2;
     $strlen107 = (_strlen($33)|0);
     $leninc108 = (($strlen107) + 1)|0;
     _memcpy(($116|0),($33|0),($leninc108|0))|0;
    }
   } while(0);
   $340 = ((($8)) + 24|0);
   $341 = ((($8)) + 28|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = HEAP32[$28>>2]|0;
   _genera_mux4($15,$342,$343,$116);
   $344 = HEAP32[199554]|0;
   $345 = ($344|0)==(0);
   L71: do {
    if ($345) {
     $346 = HEAP32[199550]|0;
     $347 = ($346|0)==(0);
     if (!($347)) {
      HEAP32[$28>>2] = 1;
      $strlen97 = (_strlen($32)|0);
      $leninc98 = (($strlen97) + 1)|0;
      _memcpy(($116|0),($32|0),($leninc98|0))|0;
      break;
     }
     $348 = HEAP32[(55372)>>2]|0;
     $349 = ($348|0)==(0);
     if ($349) {
      HEAP32[$28>>2] = 0;
      $strlen95 = (_strlen($31)|0);
      $leninc96 = (($strlen95) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc96|0))|0;
      break;
     }
     $350 = HEAP32[19177]|0;
     switch ($350|0) {
     case 2: case 5: case 8:  {
      HEAP32[$28>>2] = 0;
      $strlen93 = (_strlen($31)|0);
      $leninc94 = (($strlen93) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc94|0))|0;
      break L71;
      break;
     }
     default: {
      HEAP32[$28>>2] = 3;
      $strlen75 = (_strlen($31)|0);
      $leninc76 = (($strlen75) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc76|0))|0;
      break L71;
     }
     }
    } else {
     HEAP32[$28>>2] = 2;
     $strlen99 = (_strlen($33)|0);
     $leninc100 = (($strlen99) + 1)|0;
     _memcpy(($116|0),($33|0),($leninc100|0))|0;
    }
   } while(0);
   $351 = ((($8)) + 32|0);
   $352 = ((($8)) + 36|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = HEAP32[$28>>2]|0;
   _genera_mux4($16,$353,$354,$116);
   $355 = HEAP32[199557]|0;
   $356 = ($355|0)!=(0);
   $357 = $356&1;
   HEAP32[$28>>2] = $357;
   $358 = ($355|0)==(0);
   if ($358) {
    $strlen77 = (_strlen($31)|0);
    $leninc78 = (($strlen77) + 1)|0;
    _memcpy(($116|0),($31|0),($leninc78|0))|0;
   } else {
    $strlen91 = (_strlen($33)|0);
    $leninc92 = (($strlen91) + 1)|0;
    _memcpy(($116|0),($33|0),($leninc92|0))|0;
   }
   $359 = ((($5)) + 72|0);
   $360 = ((($5)) + 76|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = HEAP32[$28>>2]|0;
   _genera_mux2($26,580,$361,$362,$116);
   $363 = ((($15)) + 64|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$363>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$363+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$340>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$340+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$31);
   $364 = ((($16)) + 64|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$364>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$364+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$351>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$351+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$31);
   $365 = ((($4)) + 64|0);
   $366 = ((($15)) + 48|0);
   $367 = ((($15)) + 52|0);
   $368 = HEAP32[$367>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$365>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$365+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$366>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$366+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$368,0,$31);
   $369 = ((($4)) + 80|0);
   $370 = ((($16)) + 24|0);
   $371 = ((($16)) + 28|0);
   $372 = HEAP32[$371>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$369>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$369+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$370>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$370+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$372,0,$31);
   $373 = HEAP32[19177]|0;
   switch ($373|0) {
   case 2: case 5: case 8:  {
    break;
   }
   default: {
    $374 = ((($4)) + 48|0);
    $375 = ((($15)) + 24|0);
    $376 = ((($15)) + 28|0);
    $377 = HEAP32[$376>>2]|0;
    ;HEAP32[$$byval_copy156>>2]=HEAP32[$374>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$374+4>>2]|0;
    ;HEAP32[$$byval_copy157>>2]=HEAP32[$375>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$375+4>>2]|0;
    _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$377,0,$31);
   }
   }
   $378 = ((($4)) + 96|0);
   $379 = ((($16)) + 48|0);
   $380 = ((($16)) + 52|0);
   $381 = HEAP32[$380>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$378>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$378+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$379>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$379+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$381,0,$31);
   $382 = ((($26)) + 24|0);
   $383 = ((($26)) + 28|0);
   $384 = HEAP32[$383>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$369>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$369+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$382>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$382+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$384,0,$31);
   $385 = ((($26)) + 48|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$385>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$385+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$359>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$359+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$31);
   $386 = HEAP32[19177]|0;
   switch ($386|0) {
   case 2: case 5: case 8:  {
    break L56;
    break;
   }
   default: {
   }
   }
   $387 = HEAP32[199555]|0;
   $388 = ($387|0)==(0);
   do {
    if ($388) {
     $389 = HEAP32[199551]|0;
     $390 = ($389|0)==(0);
     if ($390) {
      HEAP32[$28>>2] = 0;
      $strlen79 = (_strlen($31)|0);
      $leninc80 = (($strlen79) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc80|0))|0;
      break;
     } else {
      HEAP32[$28>>2] = 1;
      $strlen87 = (_strlen($32)|0);
      $leninc88 = (($strlen87) + 1)|0;
      _memcpy(($116|0),($32|0),($leninc88|0))|0;
      break;
     }
    } else {
     HEAP32[$28>>2] = 2;
     $strlen89 = (_strlen($33)|0);
     $leninc90 = (($strlen89) + 1)|0;
     _memcpy(($116|0),($33|0),($leninc90|0))|0;
    }
   } while(0);
   $391 = ((($11)) + 24|0);
   $392 = ((($11)) + 28|0);
   $393 = HEAP32[$392>>2]|0;
   $394 = HEAP32[$28>>2]|0;
   _genera_mux3($19,580,$393,$394,$116);
   $395 = ((($19)) + 24|0);
   $396 = ((($19)) + 28|0);
   $397 = HEAP32[$396>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$365>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$365+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$395>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$395+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$397,0,$31);
   $398 = ((($19)) + 56|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$398>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$398+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$391>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$391+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$31);
   $399 = HEAP32[199556]|0;
   $400 = ($399|0)==(0);
   do {
    if ($400) {
     $401 = HEAP32[199552]|0;
     $402 = ($401|0)==(0);
     if ($402) {
      HEAP32[$28>>2] = 0;
      $strlen81 = (_strlen($31)|0);
      $leninc82 = (($strlen81) + 1)|0;
      _memcpy(($116|0),($31|0),($leninc82|0))|0;
      break;
     } else {
      HEAP32[$28>>2] = 1;
      $strlen83 = (_strlen($32)|0);
      $leninc84 = (($strlen83) + 1)|0;
      _memcpy(($116|0),($32|0),($leninc84|0))|0;
      break;
     }
    } else {
     HEAP32[$28>>2] = 2;
     $strlen85 = (_strlen($33)|0);
     $leninc86 = (($strlen85) + 1)|0;
     _memcpy(($116|0),($33|0),($leninc86|0))|0;
    }
   } while(0);
   $403 = ((($11)) + 32|0);
   $404 = ((($11)) + 36|0);
   $405 = HEAP32[$404>>2]|0;
   $406 = HEAP32[$28>>2]|0;
   _genera_mux3($20,580,$405,$406,$116);
   $407 = ((($20)) + 24|0);
   $408 = ((($20)) + 28|0);
   $409 = HEAP32[$408>>2]|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$369>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$369+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$407>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$407+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,20,$409,0,$31);
   $410 = ((($20)) + 56|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$410>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$410+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$403>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$403+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$31);
  }
 } while(0);
 $411 = ((($8)) + 40|0);
 $412 = ((($5)) + 56|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$411>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$411+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$412>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$412+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$31);
 $413 = ((($4)) + 112|0);
 $414 = ((($5)) + 88|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$413>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$413+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$414>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$414+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$31);
 _genera_mem($13,790,225,11519,11529,11531);
 $415 = ((($5)) + 64|0);
 $416 = ((($13)) + 24|0);
 $417 = ((($13)) + 28|0);
 $418 = HEAP32[$417>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$416>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$416+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$418,0,$32);
 $419 = ((($5)) + 36|0);
 $420 = HEAP32[$419>>2]|0;
 $421 = ((($13)) + 4|0);
 $422 = HEAP32[$421>>2]|0;
 $423 = (($422) + -30)|0;
 $424 = ((($13)) + 40|0);
 $425 = ((($13)) + 44|0);
 $426 = HEAP32[$425>>2]|0;
 $427 = ((($5)) + 96|0);
 $428 = ((($5)) + 100|0);
 $429 = HEAP32[$428>>2]|0;
 _genera_latch6($6,910,$420,$423,$426,$429,0,0,11536,840456,11507,11543,11477,840456,840456);
 $430 = ((($6)) + 56|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$424>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$424+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$430>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$430+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$32);
 $431 = ((($6)) + 40|0);
 $432 = ((($6)) + 44|0);
 $433 = HEAP32[$432>>2]|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$431>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$431+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$433,0,$32);
 $434 = ((($6)) + 72|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$427>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$427+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$434>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$434+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$32);
 $435 = HEAP32[19178]|0;
 $436 = ($435|0)==(1);
 L107: do {
  if ($436) {
   $439 = HEAP32[199558]|0;
   $440 = ($439|0)!=(0);
   $441 = $440&1;
   HEAP32[$28>>2] = $441;
   if ($440) {
    $strlen71 = (_strlen($33)|0);
    $leninc72 = (($strlen71) + 1)|0;
    _memcpy(($116|0),($33|0),($leninc72|0))|0;
   } else {
    $strlen69 = (_strlen($32)|0);
    $leninc70 = (($strlen69) + 1)|0;
    _memcpy(($116|0),($32|0),($leninc70|0))|0;
   }
   $442 = ((($5)) + 76|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = (($443) + 5)|0;
   $445 = HEAP32[$28>>2]|0;
   _genera_mux2($27,750,$444,$445,$116);
   $446 = ((($27)) + 48|0);
   $447 = ((($13)) + 32|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$446>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$446+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$447>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$447+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$32);
   $448 = ((($5)) + 80|0);
   $449 = ((($27)) + 24|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$448>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$448+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$449>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$449+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$32);
   $450 = ((($15)) + 32|0);
   $451 = ((($5)) + 4|0);
   $452 = HEAP32[$451>>2]|0;
   $453 = (($452) + -40)|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$450>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$450+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$453,-20,$32);
   $454 = ((($16)) + 32|0);
   $455 = HEAP32[$451>>2]|0;
   $456 = (($455) + -40)|0;
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$454>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$454+4>>2]|0;
   _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$456,-20,$32);
   $457 = HEAP32[19177]|0;
   $458 = HEAP32[$451>>2]|0;
   $459 = (($458) + -40)|0;
   switch ($457|0) {
   case 2: case 5: case 8:  {
    $460 = ((($17)) + 24|0);
    ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
    ;HEAP32[$$byval_copy157>>2]=HEAP32[$460>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$460+4>>2]|0;
    _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$459,-10,$32);
    $461 = ((($18)) + 24|0);
    $462 = HEAP32[$451>>2]|0;
    $463 = (($462) + -40)|0;
    ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
    ;HEAP32[$$byval_copy157>>2]=HEAP32[$461>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$461+4>>2]|0;
    _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$463,-10,$32);
    break L107;
    break;
   }
   default: {
    $464 = ((($19)) + 32|0);
    ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
    ;HEAP32[$$byval_copy157>>2]=HEAP32[$464>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$464+4>>2]|0;
    _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$459,-20,$32);
    $465 = ((($20)) + 32|0);
    $466 = HEAP32[$451>>2]|0;
    $467 = (($466) + -40)|0;
    ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
    ;HEAP32[$$byval_copy157>>2]=HEAP32[$465>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$465+4>>2]|0;
    _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$467,-20,$32);
    break L107;
   }
   }
  } else {
   $437 = ((($5)) + 80|0);
   $438 = ((($13)) + 32|0);
   ;HEAP32[$$byval_copy156>>2]=HEAP32[$437>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$437+4>>2]|0;
   ;HEAP32[$$byval_copy157>>2]=HEAP32[$438>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$438+4>>2]|0;
   _conecta($$byval_copy156,$$byval_copy157,$32);
  }
 } while(0);
 $468 = HEAP32[19177]|0;
 switch ($468|0) {
 case 0: case 3: case 6:  {
  $469 = ((($5)) + 48|0);
  $470 = ((($21)) + 48|0);
  $471 = ((($5)) + 4|0);
  $472 = HEAP32[$471>>2]|0;
  $473 = (($472) + -30)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$469>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$469+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$470>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$470+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$473,0,$32);
  $474 = ((($21)) + 24|0);
  $475 = HEAP32[$471>>2]|0;
  $476 = (($475) + -40)|0;
  ;HEAP32[$$byval_copy156>>2]=HEAP32[$415>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$415+4>>2]|0;
  ;HEAP32[$$byval_copy157>>2]=HEAP32[$474>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$474+4>>2]|0;
  _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,30,$476,-10,$32);
  break;
 }
 default: {
 }
 }
 $477 = HEAP8[56104]|0;
 switch ($477<<24>>24) {
 case 11: case 13: case 10: case 12: case 14: case 64:  {
  $$sink63 = 1;
  break;
 }
 default: {
  $$sink63 = 0;
 }
 }
 HEAP32[$28>>2] = $$sink63;
 $478 = HEAP32[$425>>2]|0;
 $479 = (($478) + -15)|0;
 _genera_mux2($25,970,$479,$$sink63,$33);
 $480 = ((($6)) + 48|0);
 $481 = ((($25)) + 24|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$480>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$480+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$481>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$481+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$33);
 $482 = ((($6)) + 64|0);
 $483 = ((($25)) + 32|0);
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$482>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$482+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$483>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$483+4>>2]|0;
 _conecta($$byval_copy156,$$byval_copy157,$33);
 $484 = ((($6)) + 80|0);
 $485 = ((($14)) + 40|0);
 $486 = ((($22)) + 12|0);
 $487 = HEAP32[$486>>2]|0;
 $488 = (($487) + 10)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$484>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$484+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$485>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$485+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$488,-10,$33);
 $489 = ((($25)) + 48|0);
 $490 = ((($14)) + 48|0);
 $491 = HEAP32[$486>>2]|0;
 $492 = (($491) + 20)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$489>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$489+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$490>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$490+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$492,-20,$33);
 $493 = HEAP32[19178]|0;
 $494 = ($493|0)==(1);
 if (!($494)) {
  $514 = HEAP32[199583]|0;
  (_fwrite(11547,11,1,$514)|0);
  $515 = HEAP32[199583]|0;
  (_fwrite(11559,28,1,$515)|0);
  $516 = HEAP32[199583]|0;
  (_fwrite(11588,8,1,$516)|0);
  STACKTOP = sp;return;
 }
 $495 = ((($16)) + 40|0);
 $496 = HEAP32[$486>>2]|0;
 $497 = (($496) + 20)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$489>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$489+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$495>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$495+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$497,-10,$33);
 $498 = ((($15)) + 40|0);
 $499 = HEAP32[$486>>2]|0;
 $500 = (($499) + 20)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$489>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$489+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$498>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$498+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$500,-10,$33);
 $501 = ((($27)) + 32|0);
 $502 = HEAP32[$486>>2]|0;
 $503 = (($502) + 20)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$489>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$489+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$501>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$501+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$503,-10,$33);
 $504 = ((($26)) + 32|0);
 $505 = HEAP32[$486>>2]|0;
 $506 = (($505) + 20)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$489>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$489+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$504>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$504+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$506,-10,$33);
 $507 = HEAP32[19177]|0;
 switch ($507|0) {
 case 2: case 5: case 8:  {
  $514 = HEAP32[199583]|0;
  (_fwrite(11547,11,1,$514)|0);
  $515 = HEAP32[199583]|0;
  (_fwrite(11559,28,1,$515)|0);
  $516 = HEAP32[199583]|0;
  (_fwrite(11588,8,1,$516)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $508 = ((($19)) + 40|0);
 $509 = HEAP32[$486>>2]|0;
 $510 = (($509) + 20)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$489>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$489+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$508>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$508+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$510,-10,$33);
 $511 = ((($20)) + 40|0);
 $512 = HEAP32[$486>>2]|0;
 $513 = (($512) + 20)|0;
 ;HEAP32[$$byval_copy156>>2]=HEAP32[$489>>2]|0;HEAP32[$$byval_copy156+4>>2]=HEAP32[$489+4>>2]|0;
 ;HEAP32[$$byval_copy157>>2]=HEAP32[$511>>2]|0;HEAP32[$$byval_copy157+4>>2]=HEAP32[$511+4>>2]|0;
 _conecta_p1_dx1_y_dx2_p2($$byval_copy156,$$byval_copy157,10,$513,-10,$33);
 $514 = HEAP32[199583]|0;
 (_fwrite(11547,11,1,$514)|0);
 $515 = HEAP32[199583]|0;
 (_fwrite(11559,28,1,$515)|0);
 $516 = HEAP32[199583]|0;
 (_fwrite(11588,8,1,$516)|0);
 STACKTOP = sp;return;
}
function _escribe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $5 = HEAP32[199583]|0;
 (_fwrite(13761,15,1,$5)|0);
 $6 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 13881;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $4;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $2;
 (_fprintf($6,13777,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _genera_latch($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer21 = 0, $vararg_buffer29 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer = sp;
 HEAP32[$0>>2] = 50;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 190;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 80;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 290;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 30;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 100;
 $6 = ((($0)) + 24|0);
 HEAP32[$6>>2] = 50;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = 240;
 $8 = ((($0)) + 32|0);
 HEAP32[$8>>2] = 80;
 $9 = ((($0)) + 36|0);
 HEAP32[$9>>2] = 240;
 $10 = ((($0)) + 40|0);
 HEAP32[$vararg_buffer>>2] = 50;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 190;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 50;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 290;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 80;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = 290;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = 80;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = 190;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 50;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = 190;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = 11741;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = 11461;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAPF64[$vararg_ptr12>>3] = 1.5;
 (_sprintf($10,13618,$vararg_buffer)|0);
 HEAP32[$vararg_buffer13>>2] = $10;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = 65;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = 180;
 $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
 HEAP32[$vararg_ptr18>>2] = 11461;
 $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
 HEAP32[$vararg_ptr19>>2] = 11461;
 $vararg_ptr20 = ((($vararg_buffer13)) + 20|0);
 HEAP32[$vararg_ptr20>>2] = 840456;
 (_sprintf($10,12125,$vararg_buffer13)|0);
 $11 = HEAP32[$6>>2]|0;
 $12 = (($11) + 15)|0;
 $13 = HEAP32[$7>>2]|0;
 $14 = (($13) + -2)|0;
 HEAP32[$vararg_buffer21>>2] = $10;
 $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
 HEAP32[$vararg_ptr24>>2] = $12;
 $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
 HEAP32[$vararg_ptr25>>2] = $14;
 $vararg_ptr26 = ((($vararg_buffer21)) + 12|0);
 HEAP32[$vararg_ptr26>>2] = 11461;
 $vararg_ptr27 = ((($vararg_buffer21)) + 16|0);
 HEAP32[$vararg_ptr27>>2] = 11841;
 $vararg_ptr28 = ((($vararg_buffer21)) + 20|0);
 HEAP32[$vararg_ptr28>>2] = 13742;
 (_sprintf($10,13102,$vararg_buffer21)|0);
 $15 = HEAP32[199583]|0;
 (_fwrite(13745,15,1,$15)|0);
 $16 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer29>>2] = $10;
 (_fprintf($16,29392,$vararg_buffer29)|0);
 STACKTOP = sp;return;
}
function _genera_mem($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer21 = 0, $vararg_buffer29 = 0, $vararg_buffer37 = 0, $vararg_buffer45 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr3 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0;
 var $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer45 = sp + 152|0;
 $vararg_buffer37 = sp + 128|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer = sp;
 $6 = (($1) + 100)|0;
 $7 = (($2) + 100)|0;
 HEAP32[$0>>2] = $1;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = $6;
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = 100;
 $12 = ((($0)) + 20|0);
 HEAP32[$12>>2] = 100;
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = $1;
 $14 = (($2) + 25)|0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 32|0);
 HEAP32[$16>>2] = $1;
 $17 = (($2) + 75)|0;
 $18 = ((($0)) + 36|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($0)) + 40|0);
 HEAP32[$19>>2] = $6;
 $20 = (($2) + 50)|0;
 $21 = ((($0)) + 44|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($0)) + 48|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $6;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $7;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $6;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $2;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $1;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $2;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = 11741;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = 11461;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAPF64[$vararg_ptr12>>3] = 1.5;
 (_sprintf($22,13618,$vararg_buffer)|0);
 $23 = (($1) + 50)|0;
 $24 = (($2) + 37)|0;
 HEAP32[$vararg_buffer13>>2] = $22;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = $23;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = $24;
 $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
 HEAP32[$vararg_ptr18>>2] = 11461;
 $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
 HEAP32[$vararg_ptr19>>2] = 11841;
 $vararg_ptr20 = ((($vararg_buffer13)) + 20|0);
 HEAP32[$vararg_ptr20>>2] = $3;
 (_sprintf($22,12125,$vararg_buffer13)|0);
 $25 = HEAP32[$13>>2]|0;
 $26 = (($25) + 5)|0;
 $27 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer21>>2] = $22;
 $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
 HEAP32[$vararg_ptr24>>2] = $26;
 $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
 HEAP32[$vararg_ptr25>>2] = $27;
 $vararg_ptr26 = ((($vararg_buffer21)) + 12|0);
 HEAP32[$vararg_ptr26>>2] = 11461;
 $vararg_ptr27 = ((($vararg_buffer21)) + 16|0);
 HEAP32[$vararg_ptr27>>2] = 11841;
 $vararg_ptr28 = ((($vararg_buffer21)) + 20|0);
 HEAP32[$vararg_ptr28>>2] = 13724;
 (_sprintf($22,12257,$vararg_buffer21)|0);
 $28 = HEAP32[$16>>2]|0;
 $29 = (($28) + 5)|0;
 $30 = HEAP32[$18>>2]|0;
 HEAP32[$vararg_buffer29>>2] = $22;
 $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
 HEAP32[$vararg_ptr32>>2] = $29;
 $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
 HEAP32[$vararg_ptr33>>2] = $30;
 $vararg_ptr34 = ((($vararg_buffer29)) + 12|0);
 HEAP32[$vararg_ptr34>>2] = 11461;
 $vararg_ptr35 = ((($vararg_buffer29)) + 16|0);
 HEAP32[$vararg_ptr35>>2] = 11841;
 $vararg_ptr36 = ((($vararg_buffer29)) + 20|0);
 HEAP32[$vararg_ptr36>>2] = $4;
 (_sprintf($22,12257,$vararg_buffer29)|0);
 $31 = HEAP32[$19>>2]|0;
 $32 = (($31) + -5)|0;
 $33 = HEAP32[$21>>2]|0;
 HEAP32[$vararg_buffer37>>2] = $22;
 $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
 HEAP32[$vararg_ptr40>>2] = $32;
 $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
 HEAP32[$vararg_ptr41>>2] = $33;
 $vararg_ptr42 = ((($vararg_buffer37)) + 12|0);
 HEAP32[$vararg_ptr42>>2] = 11461;
 $vararg_ptr43 = ((($vararg_buffer37)) + 16|0);
 HEAP32[$vararg_ptr43>>2] = 11841;
 $vararg_ptr44 = ((($vararg_buffer37)) + 20|0);
 HEAP32[$vararg_ptr44>>2] = $5;
 (_sprintf($22,12378,$vararg_buffer37)|0);
 $34 = HEAP32[199583]|0;
 (_fwrite(13728,13,1,$34)|0);
 $35 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer45>>2] = $22;
 (_fprintf($35,29392,$vararg_buffer45)|0);
 STACKTOP = sp;return;
}
function _conecta($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) - ($3))|0;
 $6 = (($5|0) / 2)&-1;
 $7 = (($6) + ($3))|0;
 $8 = HEAP32[199583]|0;
 (_fwrite(13505,17,1,$8)|0);
 $9 = HEAP32[199583]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $12;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $7;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $14;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $15;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $14;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 11841;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $2;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAPF64[$vararg_ptr10>>3] = 1.5;
 (_fprintf($9,13523,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _genera_alu($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer19 = 0, $vararg_buffer27 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer = sp;
 $6 = (($3) + ($1))|0;
 $7 = (($4) + ($2))|0;
 HEAP32[$0>>2] = $1;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = $6;
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = $3;
 $12 = ((($0)) + 20|0);
 HEAP32[$12>>2] = $4;
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = $1;
 $14 = (($4|0) / 6)&-1;
 $15 = (($14) + ($2))|0;
 $16 = ((($0)) + 28|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($0)) + 32|0);
 HEAP32[$17>>2] = $1;
 $18 = (($7) - ($14))|0;
 $19 = ((($0)) + 36|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($0)) + 40|0);
 HEAP32[$20>>2] = $6;
 $21 = (($4|0) / 2)&-1;
 $22 = (($21) + ($2))|0;
 $23 = ((($0)) + 44|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($0)) + 48|0);
 $25 = ($4*3)|0;
 $26 = (($25|0) / 8)&-1;
 $27 = (($26) + ($2))|0;
 $28 = (($3|0) / 4)&-1;
 $29 = (($28) + ($1))|0;
 $30 = ($4*5)|0;
 $31 = (($30|0) / 8)&-1;
 $32 = (($31) + ($2))|0;
 $33 = (($4|0) / 4)&-1;
 $34 = (($7) - ($33))|0;
 $35 = (($33) + ($2))|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $27;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $29;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $22;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $1;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $32;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $1;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $7;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = $6;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = $34;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAP32[$vararg_ptr12>>2] = $6;
 $vararg_ptr13 = ((($vararg_buffer)) + 52|0);
 HEAP32[$vararg_ptr13>>2] = $35;
 $vararg_ptr14 = ((($vararg_buffer)) + 56|0);
 HEAP32[$vararg_ptr14>>2] = $1;
 $vararg_ptr15 = ((($vararg_buffer)) + 60|0);
 HEAP32[$vararg_ptr15>>2] = $2;
 $vararg_ptr16 = ((($vararg_buffer)) + 64|0);
 HEAP32[$vararg_ptr16>>2] = 11741;
 $vararg_ptr17 = ((($vararg_buffer)) + 68|0);
 HEAP32[$vararg_ptr17>>2] = 11461;
 $vararg_ptr18 = ((($vararg_buffer)) + 72|0);
 HEAPF64[$vararg_ptr18>>3] = 1.5;
 (_sprintf($24,13367,$vararg_buffer)|0);
 $36 = (($3|0) / 2)&-1;
 $37 = (($1) + 5)|0;
 $38 = (($37) + ($36))|0;
 HEAP32[$vararg_buffer19>>2] = $24;
 $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
 HEAP32[$vararg_ptr22>>2] = $38;
 $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
 HEAP32[$vararg_ptr23>>2] = $22;
 $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
 HEAP32[$vararg_ptr24>>2] = 11461;
 $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
 HEAP32[$vararg_ptr25>>2] = 11841;
 $vararg_ptr26 = ((($vararg_buffer19)) + 20|0);
 HEAP32[$vararg_ptr26>>2] = $5;
 (_sprintf($24,13102,$vararg_buffer19)|0);
 $39 = HEAP32[199583]|0;
 (_fwrite(13491,13,1,$39)|0);
 $40 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer27>>2] = $24;
 (_fprintf($40,29392,$vararg_buffer27)|0);
 STACKTOP = sp;return;
}
function _genera_mux3($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0108 = 0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer17 = 0, $vararg_buffer27 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer = sp;
 $5 = (($2) + -20)|0;
 $6 = (($1) + 20)|0;
 $7 = (($2) + 20)|0;
 HEAP32[$0>>2] = $1;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $5;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = $6;
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = 20;
 $12 = ((($0)) + 20|0);
 HEAP32[$12>>2] = 40;
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = $1;
 $14 = (($2) + -10)|0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 32|0);
 HEAP32[$16>>2] = $1;
 $17 = ((($0)) + 36|0);
 HEAP32[$17>>2] = $2;
 $18 = ((($0)) + 40|0);
 HEAP32[$18>>2] = $1;
 $19 = (($2) + 10)|0;
 $20 = ((($0)) + 44|0);
 HEAP32[$20>>2] = $19;
 $21 = (($1) + 10)|0;
 $22 = ((($0)) + 48|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($0)) + 52|0);
 HEAP32[$23>>2] = $5;
 $24 = ((($0)) + 56|0);
 HEAP32[$24>>2] = $6;
 $25 = ((($0)) + 60|0);
 HEAP32[$25>>2] = $2;
 switch ($3|0) {
 case 0:  {
  $$sink = $15;$$sink1 = $13;
  label = 4;
  break;
 }
 case 1:  {
  $$sink = $17;$$sink1 = $16;
  label = 4;
  break;
 }
 case 2:  {
  $$sink = $20;$$sink1 = $18;
  label = 4;
  break;
 }
 default: {
  $$0 = 0;$$0108 = 0;
 }
 }
 if ((label|0) == 4) {
  $26 = HEAP32[$$sink1>>2]|0;
  $27 = HEAP32[$$sink>>2]|0;
  $$0 = $27;$$0108 = $26;
 }
 $28 = ((($0)) + 64|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 10;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 10;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $6;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $14;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $6;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $19;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 10;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = 10;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = $1;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = $19;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAP32[$vararg_ptr12>>2] = $1;
 $vararg_ptr13 = ((($vararg_buffer)) + 52|0);
 HEAP32[$vararg_ptr13>>2] = $14;
 $vararg_ptr14 = ((($vararg_buffer)) + 56|0);
 HEAP32[$vararg_ptr14>>2] = 11741;
 $vararg_ptr15 = ((($vararg_buffer)) + 60|0);
 HEAP32[$vararg_ptr15>>2] = 11461;
 $vararg_ptr16 = ((($vararg_buffer)) + 64|0);
 HEAPF64[$vararg_ptr16>>3] = 1.5;
 (_sprintf($28,11597,$vararg_buffer)|0);
 $29 = HEAP32[$24>>2]|0;
 $30 = HEAP32[$25>>2]|0;
 HEAP32[$vararg_buffer17>>2] = $28;
 $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
 HEAP32[$vararg_ptr20>>2] = $$0108;
 $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
 HEAP32[$vararg_ptr21>>2] = $$0;
 $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
 HEAP32[$vararg_ptr22>>2] = $29;
 $vararg_ptr23 = ((($vararg_buffer17)) + 16|0);
 HEAP32[$vararg_ptr23>>2] = $30;
 $vararg_ptr24 = ((($vararg_buffer17)) + 20|0);
 HEAP32[$vararg_ptr24>>2] = 11841;
 $vararg_ptr25 = ((($vararg_buffer17)) + 24|0);
 HEAP32[$vararg_ptr25>>2] = $4;
 $vararg_ptr26 = ((($vararg_buffer17)) + 32|0);
 HEAPF64[$vararg_ptr26>>3] = 3.0;
 (_sprintf($28,11751,$vararg_buffer17)|0);
 $31 = HEAP32[199583]|0;
 (_fwrite(13352,14,1,$31)|0);
 $32 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer27>>2] = $28;
 (_fprintf($32,29392,$vararg_buffer27)|0);
 STACKTOP = sp;return;
}
function _conecta_p1_dx1_y_dx2_p2($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($2))|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + ($4))|0;
 $10 = HEAP32[199583]|0;
 (_fwrite(11861,33,1,$10)|0);
 $11 = HEAP32[199583]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $7;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $14;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $7;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $3;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $9;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $3;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $9;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $16;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = $17;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = $16;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAP32[$vararg_ptr12>>2] = 11841;
 $vararg_ptr13 = ((($vararg_buffer)) + 52|0);
 HEAP32[$vararg_ptr13>>2] = $5;
 $vararg_ptr14 = ((($vararg_buffer)) + 56|0);
 HEAPF64[$vararg_ptr14>>3] = 1.5;
 (_fprintf($11,13246,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _genera_latch6($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer29 = 0, $vararg_buffer37 = 0, $vararg_buffer45 = 0, $vararg_buffer53 = 0, $vararg_buffer61 = 0, $vararg_buffer69 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr3 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0;
 var $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr6 = 0, $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer69 = sp + 224|0;
 $vararg_buffer61 = sp + 200|0;
 $vararg_buffer53 = sp + 176|0;
 $vararg_buffer45 = sp + 152|0;
 $vararg_buffer37 = sp + 128|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer = sp;
 $15 = (($1) + 30)|0;
 HEAP32[$0>>2] = $1;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = 80;
 $17 = ((($0)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = ((($0)) + 12|0);
 HEAP32[$18>>2] = 480;
 $19 = ((($0)) + 16|0);
 HEAP32[$19>>2] = 30;
 $20 = ((($0)) + 20|0);
 HEAP32[$20>>2] = 400;
 $21 = ((($0)) + 24|0);
 HEAP32[$21>>2] = $1;
 $22 = ((($0)) + 28|0);
 HEAP32[$22>>2] = $2;
 $23 = ((($0)) + 32|0);
 HEAP32[$23>>2] = $15;
 $24 = ((($0)) + 36|0);
 HEAP32[$24>>2] = $2;
 $25 = ((($0)) + 40|0);
 HEAP32[$25>>2] = $1;
 $26 = ((($0)) + 44|0);
 HEAP32[$26>>2] = $3;
 $27 = ((($0)) + 48|0);
 HEAP32[$27>>2] = $15;
 $28 = ((($0)) + 52|0);
 HEAP32[$28>>2] = $3;
 $29 = ((($0)) + 56|0);
 HEAP32[$29>>2] = $1;
 $30 = ((($0)) + 60|0);
 HEAP32[$30>>2] = $4;
 $31 = ((($0)) + 64|0);
 HEAP32[$31>>2] = $15;
 $32 = ((($0)) + 68|0);
 HEAP32[$32>>2] = $4;
 $33 = ((($0)) + 72|0);
 HEAP32[$33>>2] = $1;
 $34 = ((($0)) + 76|0);
 HEAP32[$34>>2] = $5;
 $35 = ((($0)) + 80|0);
 HEAP32[$35>>2] = $15;
 $36 = ((($0)) + 84|0);
 HEAP32[$36>>2] = $5;
 $37 = ((($0)) + 88|0);
 HEAP32[$37>>2] = $1;
 $38 = ((($0)) + 92|0);
 HEAP32[$38>>2] = $6;
 $39 = ((($0)) + 96|0);
 HEAP32[$39>>2] = $15;
 $40 = ((($0)) + 100|0);
 HEAP32[$40>>2] = $6;
 $41 = ((($0)) + 104|0);
 HEAP32[$41>>2] = $1;
 $42 = ((($0)) + 108|0);
 HEAP32[$42>>2] = $7;
 $43 = ((($0)) + 112|0);
 HEAP32[$43>>2] = $15;
 $44 = ((($0)) + 116|0);
 HEAP32[$44>>2] = $7;
 $45 = ((($0)) + 120|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 80;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 480;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $15;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = 480;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $15;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = 80;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $1;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = 80;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = 11741;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = 13093;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAPF64[$vararg_ptr12>>3] = 1.5;
 (_sprintf($45,12989,$vararg_buffer)|0);
 $46 = (($1) + 15)|0;
 HEAP32[$vararg_buffer13>>2] = $45;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = $46;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = 70;
 $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
 HEAP32[$vararg_ptr18>>2] = 13093;
 $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
 HEAP32[$vararg_ptr19>>2] = 11841;
 $vararg_ptr20 = ((($vararg_buffer13)) + 20|0);
 HEAP32[$vararg_ptr20>>2] = $8;
 (_sprintf($45,12125,$vararg_buffer13)|0);
 $47 = HEAP32[$21>>2]|0;
 $48 = (($47) + 15)|0;
 $49 = HEAP32[$22>>2]|0;
 $50 = (($49) + -4)|0;
 HEAP32[$vararg_buffer21>>2] = $45;
 $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
 HEAP32[$vararg_ptr24>>2] = $48;
 $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
 HEAP32[$vararg_ptr25>>2] = $50;
 $vararg_ptr26 = ((($vararg_buffer21)) + 12|0);
 HEAP32[$vararg_ptr26>>2] = 13098;
 $vararg_ptr27 = ((($vararg_buffer21)) + 16|0);
 HEAP32[$vararg_ptr27>>2] = 11841;
 $vararg_ptr28 = ((($vararg_buffer21)) + 20|0);
 HEAP32[$vararg_ptr28>>2] = $9;
 (_sprintf($45,12125,$vararg_buffer21)|0);
 $51 = HEAP32[$25>>2]|0;
 $52 = (($51) + 15)|0;
 $53 = HEAP32[$26>>2]|0;
 $54 = (($53) + -4)|0;
 HEAP32[$vararg_buffer29>>2] = $45;
 $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
 HEAP32[$vararg_ptr32>>2] = $52;
 $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
 HEAP32[$vararg_ptr33>>2] = $54;
 $vararg_ptr34 = ((($vararg_buffer29)) + 12|0);
 HEAP32[$vararg_ptr34>>2] = 13098;
 $vararg_ptr35 = ((($vararg_buffer29)) + 16|0);
 HEAP32[$vararg_ptr35>>2] = 11841;
 $vararg_ptr36 = ((($vararg_buffer29)) + 20|0);
 HEAP32[$vararg_ptr36>>2] = $10;
 (_sprintf($45,12125,$vararg_buffer29)|0);
 $55 = HEAP32[$29>>2]|0;
 $56 = (($55) + 15)|0;
 $57 = HEAP32[$30>>2]|0;
 $58 = (($57) + -4)|0;
 HEAP32[$vararg_buffer37>>2] = $45;
 $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
 HEAP32[$vararg_ptr40>>2] = $56;
 $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
 HEAP32[$vararg_ptr41>>2] = $58;
 $vararg_ptr42 = ((($vararg_buffer37)) + 12|0);
 HEAP32[$vararg_ptr42>>2] = 13098;
 $vararg_ptr43 = ((($vararg_buffer37)) + 16|0);
 HEAP32[$vararg_ptr43>>2] = 11841;
 $vararg_ptr44 = ((($vararg_buffer37)) + 20|0);
 HEAP32[$vararg_ptr44>>2] = $11;
 (_sprintf($45,12125,$vararg_buffer37)|0);
 $59 = HEAP32[$33>>2]|0;
 $60 = (($59) + 15)|0;
 $61 = HEAP32[$34>>2]|0;
 $62 = (($61) + -4)|0;
 HEAP32[$vararg_buffer45>>2] = $45;
 $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
 HEAP32[$vararg_ptr48>>2] = $60;
 $vararg_ptr49 = ((($vararg_buffer45)) + 8|0);
 HEAP32[$vararg_ptr49>>2] = $62;
 $vararg_ptr50 = ((($vararg_buffer45)) + 12|0);
 HEAP32[$vararg_ptr50>>2] = 13098;
 $vararg_ptr51 = ((($vararg_buffer45)) + 16|0);
 HEAP32[$vararg_ptr51>>2] = 11841;
 $vararg_ptr52 = ((($vararg_buffer45)) + 20|0);
 HEAP32[$vararg_ptr52>>2] = $12;
 (_sprintf($45,12125,$vararg_buffer45)|0);
 $63 = HEAP32[$37>>2]|0;
 $64 = (($63) + 15)|0;
 $65 = HEAP32[$38>>2]|0;
 $66 = (($65) + -4)|0;
 HEAP32[$vararg_buffer53>>2] = $45;
 $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
 HEAP32[$vararg_ptr56>>2] = $64;
 $vararg_ptr57 = ((($vararg_buffer53)) + 8|0);
 HEAP32[$vararg_ptr57>>2] = $66;
 $vararg_ptr58 = ((($vararg_buffer53)) + 12|0);
 HEAP32[$vararg_ptr58>>2] = 13098;
 $vararg_ptr59 = ((($vararg_buffer53)) + 16|0);
 HEAP32[$vararg_ptr59>>2] = 11841;
 $vararg_ptr60 = ((($vararg_buffer53)) + 20|0);
 HEAP32[$vararg_ptr60>>2] = $13;
 (_sprintf($45,12125,$vararg_buffer53)|0);
 $67 = HEAP32[$41>>2]|0;
 $68 = (($67) + 15)|0;
 $69 = HEAP32[$42>>2]|0;
 $70 = (($69) + -2)|0;
 HEAP32[$vararg_buffer61>>2] = $45;
 $vararg_ptr64 = ((($vararg_buffer61)) + 4|0);
 HEAP32[$vararg_ptr64>>2] = $68;
 $vararg_ptr65 = ((($vararg_buffer61)) + 8|0);
 HEAP32[$vararg_ptr65>>2] = $70;
 $vararg_ptr66 = ((($vararg_buffer61)) + 12|0);
 HEAP32[$vararg_ptr66>>2] = 13098;
 $vararg_ptr67 = ((($vararg_buffer61)) + 16|0);
 HEAP32[$vararg_ptr67>>2] = 11841;
 $vararg_ptr68 = ((($vararg_buffer61)) + 20|0);
 HEAP32[$vararg_ptr68>>2] = $14;
 (_sprintf($45,13102,$vararg_buffer61)|0);
 $71 = HEAP32[199583]|0;
 (_fwrite(13229,16,1,$71)|0);
 $72 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer69>>2] = $45;
 (_fprintf($72,29392,$vararg_buffer69)|0);
 STACKTOP = sp;return;
}
function _genera_regs($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer29 = 0, $vararg_buffer37 = 0, $vararg_buffer45 = 0, $vararg_buffer53 = 0, $vararg_buffer61 = 0, $vararg_buffer69 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr3 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, $vararg_ptr40 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0;
 var $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr6 = 0, $vararg_ptr60 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr66 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $vararg_buffer69 = sp + 224|0;
 $vararg_buffer61 = sp + 200|0;
 $vararg_buffer53 = sp + 176|0;
 $vararg_buffer45 = sp + 152|0;
 $vararg_buffer37 = sp + 128|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer = sp;
 HEAP32[$0>>2] = 320;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = 190;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = 420;
 $11 = ((($0)) + 12|0);
 HEAP32[$11>>2] = 340;
 $12 = ((($0)) + 16|0);
 HEAP32[$12>>2] = 100;
 $13 = ((($0)) + 20|0);
 HEAP32[$13>>2] = 150;
 $14 = ((($0)) + 24|0);
 HEAP32[$14>>2] = 320;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 215;
 $16 = ((($0)) + 32|0);
 HEAP32[$16>>2] = 320;
 $17 = ((($0)) + 36|0);
 HEAP32[$17>>2] = 240;
 $18 = ((($0)) + 40|0);
 HEAP32[$18>>2] = 320;
 $19 = ((($0)) + 44|0);
 HEAP32[$19>>2] = 290;
 $20 = ((($0)) + 48|0);
 HEAP32[$20>>2] = 320;
 $21 = ((($0)) + 52|0);
 HEAP32[$21>>2] = 315;
 $22 = ((($0)) + 56|0);
 HEAP32[$22>>2] = 420;
 $23 = ((($0)) + 60|0);
 HEAP32[$23>>2] = 227;
 $24 = ((($0)) + 64|0);
 HEAP32[$24>>2] = 420;
 $25 = ((($0)) + 68|0);
 HEAP32[$25>>2] = 302;
 $26 = ((($0)) + 72|0);
 HEAP32[$vararg_buffer>>2] = 320;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 190;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 320;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 340;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 420;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = 340;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = 420;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = 190;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 320;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = 190;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = 11741;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = 11461;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAPF64[$vararg_ptr12>>3] = 1.5;
 (_sprintf($26,12502,$vararg_buffer)|0);
 HEAP32[$vararg_buffer13>>2] = $26;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = 370;
 $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
 HEAP32[$vararg_ptr17>>2] = 265;
 $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
 HEAP32[$vararg_ptr18>>2] = 11461;
 $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
 HEAP32[$vararg_ptr19>>2] = 11841;
 $vararg_ptr20 = ((($vararg_buffer13)) + 20|0);
 HEAP32[$vararg_ptr20>>2] = 12607;
 (_sprintf($26,12125,$vararg_buffer13)|0);
 $27 = HEAP32[$14>>2]|0;
 $28 = (($27) + 5)|0;
 $29 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer21>>2] = $26;
 $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
 HEAP32[$vararg_ptr24>>2] = $28;
 $vararg_ptr25 = ((($vararg_buffer21)) + 8|0);
 HEAP32[$vararg_ptr25>>2] = $29;
 $vararg_ptr26 = ((($vararg_buffer21)) + 12|0);
 HEAP32[$vararg_ptr26>>2] = $2;
 $vararg_ptr27 = ((($vararg_buffer21)) + 16|0);
 HEAP32[$vararg_ptr27>>2] = 11841;
 $vararg_ptr28 = ((($vararg_buffer21)) + 20|0);
 HEAP32[$vararg_ptr28>>2] = $1;
 (_sprintf($26,12612,$vararg_buffer21)|0);
 $30 = HEAP32[$16>>2]|0;
 $31 = (($30) + 5)|0;
 $32 = HEAP32[$17>>2]|0;
 HEAP32[$vararg_buffer29>>2] = $26;
 $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
 HEAP32[$vararg_ptr32>>2] = $31;
 $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
 HEAP32[$vararg_ptr33>>2] = $32;
 $vararg_ptr34 = ((($vararg_buffer29)) + 12|0);
 HEAP32[$vararg_ptr34>>2] = $4;
 $vararg_ptr35 = ((($vararg_buffer29)) + 16|0);
 HEAP32[$vararg_ptr35>>2] = 11841;
 $vararg_ptr36 = ((($vararg_buffer29)) + 20|0);
 HEAP32[$vararg_ptr36>>2] = $3;
 (_sprintf($26,12612,$vararg_buffer29)|0);
 $33 = HEAP32[$18>>2]|0;
 $34 = (($33) + 5)|0;
 $35 = HEAP32[$19>>2]|0;
 HEAP32[$vararg_buffer37>>2] = $26;
 $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
 HEAP32[$vararg_ptr40>>2] = $34;
 $vararg_ptr41 = ((($vararg_buffer37)) + 8|0);
 HEAP32[$vararg_ptr41>>2] = $35;
 $vararg_ptr42 = ((($vararg_buffer37)) + 12|0);
 HEAP32[$vararg_ptr42>>2] = $6;
 $vararg_ptr43 = ((($vararg_buffer37)) + 16|0);
 HEAP32[$vararg_ptr43>>2] = 11841;
 $vararg_ptr44 = ((($vararg_buffer37)) + 20|0);
 HEAP32[$vararg_ptr44>>2] = $5;
 (_sprintf($26,12612,$vararg_buffer37)|0);
 $36 = HEAP32[$20>>2]|0;
 $37 = (($36) + 5)|0;
 $38 = HEAP32[$21>>2]|0;
 HEAP32[$vararg_buffer45>>2] = $26;
 $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
 HEAP32[$vararg_ptr48>>2] = $37;
 $vararg_ptr49 = ((($vararg_buffer45)) + 8|0);
 HEAP32[$vararg_ptr49>>2] = $38;
 $vararg_ptr50 = ((($vararg_buffer45)) + 12|0);
 HEAP32[$vararg_ptr50>>2] = $8;
 $vararg_ptr51 = ((($vararg_buffer45)) + 16|0);
 HEAP32[$vararg_ptr51>>2] = 11841;
 $vararg_ptr52 = ((($vararg_buffer45)) + 20|0);
 HEAP32[$vararg_ptr52>>2] = $7;
 (_sprintf($26,12734,$vararg_buffer45)|0);
 $39 = HEAP32[$22>>2]|0;
 $40 = (($39) + -5)|0;
 $41 = HEAP32[$23>>2]|0;
 HEAP32[$vararg_buffer53>>2] = $26;
 $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
 HEAP32[$vararg_ptr56>>2] = $40;
 $vararg_ptr57 = ((($vararg_buffer53)) + 8|0);
 HEAP32[$vararg_ptr57>>2] = $41;
 $vararg_ptr58 = ((($vararg_buffer53)) + 12|0);
 HEAP32[$vararg_ptr58>>2] = 11461;
 $vararg_ptr59 = ((($vararg_buffer53)) + 16|0);
 HEAP32[$vararg_ptr59>>2] = 11841;
 $vararg_ptr60 = ((($vararg_buffer53)) + 20|0);
 HEAP32[$vararg_ptr60>>2] = 11486;
 (_sprintf($26,12855,$vararg_buffer53)|0);
 $42 = HEAP32[$22>>2]|0;
 $43 = (($42) + -5)|0;
 $44 = HEAP32[$25>>2]|0;
 HEAP32[$vararg_buffer61>>2] = $26;
 $vararg_ptr64 = ((($vararg_buffer61)) + 4|0);
 HEAP32[$vararg_ptr64>>2] = $43;
 $vararg_ptr65 = ((($vararg_buffer61)) + 8|0);
 HEAP32[$vararg_ptr65>>2] = $44;
 $vararg_ptr66 = ((($vararg_buffer61)) + 12|0);
 HEAP32[$vararg_ptr66>>2] = 11461;
 $vararg_ptr67 = ((($vararg_buffer61)) + 16|0);
 HEAP32[$vararg_ptr67>>2] = 11841;
 $vararg_ptr68 = ((($vararg_buffer61)) + 20|0);
 HEAP32[$vararg_ptr68>>2] = 11488;
 (_sprintf($26,12378,$vararg_buffer61)|0);
 $45 = HEAP32[199583]|0;
 (_fwrite(12974,14,1,$45)|0);
 $46 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer69>>2] = $26;
 (_fprintf($46,29392,$vararg_buffer69)|0);
 STACKTOP = sp;return;
}
function _genera_elipse($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer23 = 0, $vararg_buffer31 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr3 = 0, $vararg_ptr30 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer = sp;
 HEAP32[$0>>2] = 320;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 360;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 390;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 440;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 70;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 80;
 $6 = ((($0)) + 24|0);
 HEAP32[$6>>2] = 320;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = 400;
 $8 = ((($0)) + 32|0);
 HEAP32[$8>>2] = 390;
 $9 = ((($0)) + 36|0);
 HEAP32[$9>>2] = 400;
 $10 = ((($0)) + 40|0);
 HEAP32[$vararg_buffer>>2] = 355;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 400;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 35;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 40;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 11741;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = 11461;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAPF64[$vararg_ptr6>>3] = 1.5;
 (_sprintf($10,12028,$vararg_buffer)|0);
 HEAP32[$vararg_buffer7>>2] = $10;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = 355;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = 400;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = 11461;
 $vararg_ptr13 = ((($vararg_buffer7)) + 16|0);
 HEAP32[$vararg_ptr13>>2] = 11841;
 $vararg_ptr14 = ((($vararg_buffer7)) + 20|0);
 HEAP32[$vararg_ptr14>>2] = 12247;
 (_sprintf($10,12125,$vararg_buffer7)|0);
 $11 = HEAP32[$6>>2]|0;
 $12 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer15>>2] = $10;
 $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
 HEAP32[$vararg_ptr18>>2] = $11;
 $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
 HEAP32[$vararg_ptr19>>2] = $12;
 $vararg_ptr20 = ((($vararg_buffer15)) + 12|0);
 HEAP32[$vararg_ptr20>>2] = 11461;
 $vararg_ptr21 = ((($vararg_buffer15)) + 16|0);
 HEAP32[$vararg_ptr21>>2] = 11841;
 $vararg_ptr22 = ((($vararg_buffer15)) + 20|0);
 HEAP32[$vararg_ptr22>>2] = 840456;
 (_sprintf($10,12257,$vararg_buffer15)|0);
 $13 = HEAP32[$8>>2]|0;
 $14 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer23>>2] = $10;
 $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
 HEAP32[$vararg_ptr26>>2] = $13;
 $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
 HEAP32[$vararg_ptr27>>2] = $14;
 $vararg_ptr28 = ((($vararg_buffer23)) + 12|0);
 HEAP32[$vararg_ptr28>>2] = 11461;
 $vararg_ptr29 = ((($vararg_buffer23)) + 16|0);
 HEAP32[$vararg_ptr29>>2] = 11841;
 $vararg_ptr30 = ((($vararg_buffer23)) + 20|0);
 HEAP32[$vararg_ptr30>>2] = 840456;
 (_sprintf($10,12378,$vararg_buffer23)|0);
 $15 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer31>>2] = $10;
 (_fprintf($15,29392,$vararg_buffer31)|0);
 STACKTOP = sp;return;
}
function _genera_mux2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$096 = 0, $$val = 0, $$val2 = 0, $$val3 = 0, $$val4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer17 = 0, $vararg_buffer27 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer = sp;
 $5 = (($2) + -15)|0;
 $6 = (($1) + 20)|0;
 $7 = (($2) + 15)|0;
 HEAP32[$0>>2] = $1;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $5;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = $6;
 $10 = ((($0)) + 12|0);
 HEAP32[$10>>2] = $7;
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = 20;
 $12 = ((($0)) + 20|0);
 HEAP32[$12>>2] = 30;
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = $1;
 $14 = (($2) + -5)|0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 32|0);
 HEAP32[$16>>2] = $1;
 $17 = (($2) + 5)|0;
 $18 = ((($0)) + 36|0);
 HEAP32[$18>>2] = $17;
 $19 = (($1) + 10)|0;
 $20 = ((($0)) + 40|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($0)) + 44|0);
 HEAP32[$21>>2] = $5;
 $22 = ((($0)) + 48|0);
 HEAP32[$22>>2] = $6;
 $23 = ((($0)) + 52|0);
 HEAP32[$23>>2] = $2;
 $24 = ($3|0)==(0);
 $$val = HEAP32[$15>>2]|0;
 $$val2 = HEAP32[$18>>2]|0;
 $$0 = $24 ? $$val : $$val2;
 $$val3 = HEAP32[$13>>2]|0;
 $$val4 = HEAP32[$16>>2]|0;
 $$096 = $24 ? $$val3 : $$val4;
 $25 = ((($0)) + 56|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 10;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 10;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $6;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $14;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $6;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $17;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 10;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = 10;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = $1;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = $17;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAP32[$vararg_ptr12>>2] = $1;
 $vararg_ptr13 = ((($vararg_buffer)) + 52|0);
 HEAP32[$vararg_ptr13>>2] = $14;
 $vararg_ptr14 = ((($vararg_buffer)) + 56|0);
 HEAP32[$vararg_ptr14>>2] = 11741;
 $vararg_ptr15 = ((($vararg_buffer)) + 60|0);
 HEAP32[$vararg_ptr15>>2] = 11461;
 $vararg_ptr16 = ((($vararg_buffer)) + 64|0);
 HEAPF64[$vararg_ptr16>>3] = 1.5;
 (_sprintf($25,11597,$vararg_buffer)|0);
 $26 = HEAP32[$22>>2]|0;
 $27 = HEAP32[$23>>2]|0;
 HEAP32[$vararg_buffer17>>2] = $25;
 $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
 HEAP32[$vararg_ptr20>>2] = $$096;
 $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
 HEAP32[$vararg_ptr21>>2] = $$0;
 $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
 HEAP32[$vararg_ptr22>>2] = $26;
 $vararg_ptr23 = ((($vararg_buffer17)) + 16|0);
 HEAP32[$vararg_ptr23>>2] = $27;
 $vararg_ptr24 = ((($vararg_buffer17)) + 20|0);
 HEAP32[$vararg_ptr24>>2] = 11841;
 $vararg_ptr25 = ((($vararg_buffer17)) + 24|0);
 HEAP32[$vararg_ptr25>>2] = $4;
 $vararg_ptr26 = ((($vararg_buffer17)) + 32|0);
 HEAPF64[$vararg_ptr26>>3] = 3.0;
 (_sprintf($25,11751,$vararg_buffer17)|0);
 $28 = HEAP32[199583]|0;
 (_fwrite(12013,14,1,$28)|0);
 $29 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer27>>2] = $25;
 (_fprintf($29,29392,$vararg_buffer27)|0);
 STACKTOP = sp;return;
}
function _conecta_p1_dx1_y1_dx2_y2_dx3_p2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 10)|0;
 $7 = (($5) + -50)|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + -20)|0;
 $10 = HEAP32[199583]|0;
 (_fwrite(11861,33,1,$10)|0);
 $11 = HEAP32[199583]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $14;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $6;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $2;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $7;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $2;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = $7;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = $3;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = $9;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = $3;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAP32[$vararg_ptr12>>2] = $9;
 $vararg_ptr13 = ((($vararg_buffer)) + 52|0);
 HEAP32[$vararg_ptr13>>2] = $16;
 $vararg_ptr14 = ((($vararg_buffer)) + 56|0);
 HEAP32[$vararg_ptr14>>2] = $17;
 $vararg_ptr15 = ((($vararg_buffer)) + 60|0);
 HEAP32[$vararg_ptr15>>2] = $16;
 $vararg_ptr16 = ((($vararg_buffer)) + 64|0);
 HEAP32[$vararg_ptr16>>2] = 11841;
 $vararg_ptr17 = ((($vararg_buffer)) + 68|0);
 HEAP32[$vararg_ptr17>>2] = $4;
 $vararg_ptr18 = ((($vararg_buffer)) + 72|0);
 HEAPF64[$vararg_ptr18>>3] = 1.5;
 (_fprintf($11,11895,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _genera_mux4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$in = 0, $$0115 = 0, $$0115$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer17 = 0, $vararg_buffer27 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer = sp;
 $4 = (($1) + -25)|0;
 $5 = (($1) + 25)|0;
 HEAP32[$0>>2] = 580;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = 600;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $5;
 $9 = ((($0)) + 16|0);
 HEAP32[$9>>2] = 20;
 $10 = ((($0)) + 20|0);
 HEAP32[$10>>2] = 50;
 $11 = ((($0)) + 24|0);
 HEAP32[$11>>2] = 580;
 $12 = (($1) + -15)|0;
 $13 = ((($0)) + 28|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 32|0);
 HEAP32[$14>>2] = 580;
 $15 = (($1) + -5)|0;
 $16 = ((($0)) + 36|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($0)) + 40|0);
 HEAP32[$17>>2] = 580;
 $18 = (($1) + 5)|0;
 $19 = ((($0)) + 44|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($0)) + 48|0);
 HEAP32[$20>>2] = 580;
 $21 = (($1) + 15)|0;
 $22 = ((($0)) + 52|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($0)) + 56|0);
 HEAP32[$23>>2] = 590;
 $24 = ((($0)) + 60|0);
 HEAP32[$24>>2] = $4;
 $25 = ((($0)) + 64|0);
 HEAP32[$25>>2] = 600;
 $26 = ((($0)) + 68|0);
 HEAP32[$26>>2] = $1;
 switch ($2|0) {
 case 0:  {
  $$0$in = $13;$$0115$in = $11;
  break;
 }
 case 1:  {
  $$0$in = $16;$$0115$in = $14;
  break;
 }
 case 2:  {
  $$0$in = $19;$$0115$in = $17;
  break;
 }
 default: {
  $$0$in = $22;$$0115$in = $20;
 }
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $$0115 = HEAP32[$$0115$in>>2]|0;
 $27 = ((($0)) + 72|0);
 HEAP32[$vararg_buffer>>2] = 580;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 10;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 10;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = 600;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $12;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = 600;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $21;
 $vararg_ptr8 = ((($vararg_buffer)) + 32|0);
 HEAP32[$vararg_ptr8>>2] = 10;
 $vararg_ptr9 = ((($vararg_buffer)) + 36|0);
 HEAP32[$vararg_ptr9>>2] = 10;
 $vararg_ptr10 = ((($vararg_buffer)) + 40|0);
 HEAP32[$vararg_ptr10>>2] = 580;
 $vararg_ptr11 = ((($vararg_buffer)) + 44|0);
 HEAP32[$vararg_ptr11>>2] = $21;
 $vararg_ptr12 = ((($vararg_buffer)) + 48|0);
 HEAP32[$vararg_ptr12>>2] = 580;
 $vararg_ptr13 = ((($vararg_buffer)) + 52|0);
 HEAP32[$vararg_ptr13>>2] = $12;
 $vararg_ptr14 = ((($vararg_buffer)) + 56|0);
 HEAP32[$vararg_ptr14>>2] = 11741;
 $vararg_ptr15 = ((($vararg_buffer)) + 60|0);
 HEAP32[$vararg_ptr15>>2] = 11461;
 $vararg_ptr16 = ((($vararg_buffer)) + 64|0);
 HEAPF64[$vararg_ptr16>>3] = 1.5;
 (_sprintf($27,11597,$vararg_buffer)|0);
 $28 = HEAP32[$25>>2]|0;
 $29 = HEAP32[$26>>2]|0;
 HEAP32[$vararg_buffer17>>2] = $27;
 $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
 HEAP32[$vararg_ptr20>>2] = $$0115;
 $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
 HEAP32[$vararg_ptr21>>2] = $$0;
 $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
 HEAP32[$vararg_ptr22>>2] = $28;
 $vararg_ptr23 = ((($vararg_buffer17)) + 16|0);
 HEAP32[$vararg_ptr23>>2] = $29;
 $vararg_ptr24 = ((($vararg_buffer17)) + 20|0);
 HEAP32[$vararg_ptr24>>2] = 11841;
 $vararg_ptr25 = ((($vararg_buffer17)) + 24|0);
 HEAP32[$vararg_ptr25>>2] = $3;
 $vararg_ptr26 = ((($vararg_buffer17)) + 32|0);
 HEAPF64[$vararg_ptr26>>3] = 3.0;
 (_sprintf($27,11751,$vararg_buffer17)|0);
 $30 = HEAP32[199583]|0;
 (_fwrite(11846,14,1,$30)|0);
 $31 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer27>>2] = $27;
 (_fprintf($31,29392,$vararg_buffer27)|0);
 STACKTOP = sp;return;
}
function _te_inserta($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03538 = 0, $$037 = 0, $$039 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $$byval_copy = sp + 288|0;
 $4 = sp + 144|0;
 $5 = sp;
 $6 = HEAP16[399586]|0;
 $7 = ($6<<16>>16)>(0);
 L1: do {
  if ($7) {
   $8 = HEAP16[399586]|0;
   $9 = $8 << 16 >> 16;
   $$039 = 0;
   while(1) {
    $10 = (32520 + (($$039*80)|0)|0);
    $11 = (_strcmp($10,$0)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     break;
    }
    $57 = (($$039) + 1)|0;
    $58 = ($57|0)<($9|0);
    if ($58) {
     $$039 = $57;
    } else {
     $$037 = $57;
     break L1;
    }
   }
   $13 = (((32520 + (($$039*80)|0)|0)) + 76|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    (_yyerror(13886)|0);
    // unreachable;
   }
   $16 = (((32520 + (($$039*80)|0)|0)) + 64|0);
   $17 = $16;
   $18 = $17;
   HEAP32[$18>>2] = $1;
   $19 = (($17) + 4)|0;
   $20 = $19;
   HEAP32[$20>>2] = $2;
   $21 = (((32520 + (($$039*80)|0)|0)) + 72|0);
   HEAP32[$21>>2] = $3;
   $22 = $1&65535;
   $23 = ((($4)) + 12|0);
   $24 = (_i64Add(($1|0),($2|0),65532,0)|0);
   $25 = tempRet0;
   $26 = ((($4)) + 12|0);
   $$03538 = $14;
   L10: while(1) {
    $27 = ((($$03538)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==($3|0);
    if (!($29)) {
     label = 8;
     break;
    }
    $32 = $$03538;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    _lee_mem_instruc($5,$34,$37);
    _memcpy(($4|0),($5|0),144)|0;
    $38 = HEAP32[$27>>2]|0;
    switch ($38|0) {
    case 1:  {
     HEAP16[$23>>1] = $22;
     break;
    }
    case 2:  {
     $39 = $$03538;
     $40 = $39;
     $41 = HEAP32[$40>>2]|0;
     $42 = (($39) + 4)|0;
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (_i64Subtract(($24|0),($25|0),($41|0),($44|0))|0);
     $46 = tempRet0;
     $47 = $45&65535;
     HEAP16[$26>>1] = $47;
     break;
    }
    default: {
     label = 12;
     break L10;
    }
    }
    $48 = $$03538;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $51 = (($48) + 4)|0;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    _memcpy(($$byval_copy|0),($4|0),144)|0;
    _escribe_mem_instruc($50,$53,$$byval_copy);
    $54 = ((($$03538)) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    _free($$03538);
    $56 = ($55|0)==(0|0);
    if ($56) {
     label = 14;
     break;
    } else {
     $$03538 = $55;
    }
   }
   if ((label|0) == 8) {
    $30 = ((($$03538)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    HEAP32[83] = $31;
    (_yyerror(13916)|0);
    // unreachable;
   }
   else if ((label|0) == 12) {
    (_yyerror(28627)|0);
    // unreachable;
   }
   else if ((label|0) == 14) {
    HEAP32[$13>>2] = 0;
    $$037 = $$039;
    break;
   }
  } else {
   $$037 = 0;
  }
 } while(0);
 $59 = HEAP16[399586]|0;
 $60 = $59 << 16 >> 16;
 $61 = ($$037|0)==($60|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = ($$037|0)==(64);
 if ($62) {
  (_yyerror(13946)|0);
  // unreachable;
 }
 $63 = (32520 + (($$037*80)|0)|0);
 (_strcpy($63,$0)|0);
 $64 = (((32520 + (($$037*80)|0)|0)) + 64|0);
 $65 = $64;
 $66 = $65;
 HEAP32[$66>>2] = $1;
 $67 = (($65) + 4)|0;
 $68 = $67;
 HEAP32[$68>>2] = $2;
 $69 = (((32520 + (($$037*80)|0)|0)) + 72|0);
 HEAP32[$69>>2] = $3;
 $70 = (((32520 + (($$037*80)|0)|0)) + 76|0);
 HEAP32[$70>>2] = 0;
 $71 = HEAP16[399586]|0;
 $72 = (($71) + 1)<<16>>16;
 HEAP16[399586] = $72;
 STACKTOP = sp;return;
}
function _te_resuelve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$03638 = 0, $$03639 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP16[399586]|0;
 $6 = ($5<<16>>16)>(0);
 L1: do {
  if ($6) {
   $7 = HEAP16[399586]|0;
   $8 = $7 << 16 >> 16;
   $$03639 = 0;
   while(1) {
    $9 = (32520 + (($$03639*80)|0)|0);
    $10 = (_strcmp($9,$0)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    }
    $32 = (($$03639) + 1)|0;
    $33 = ($32|0)<($8|0);
    if ($33) {
     $$03639 = $32;
    } else {
     $$03638 = $32;
     break L1;
    }
   }
   $12 = (((32520 + (($$03639*80)|0)|0)) + 76|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = (((32520 + (($$03639*80)|0)|0)) + 64|0);
    $16 = $15;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $$0 = $18;
    return ($$0|0);
   }
   $22 = (_malloc(24)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    (_yyerror(14008)|0);
    // unreachable;
   } else {
    $24 = $22;
    $25 = $24;
    HEAP32[$25>>2] = $2;
    $26 = (($24) + 4)|0;
    $27 = $26;
    HEAP32[$27>>2] = $3;
    $28 = ((($22)) + 8|0);
    HEAP32[$28>>2] = $1;
    $29 = ((($22)) + 12|0);
    HEAP32[$29>>2] = $4;
    $30 = HEAP32[$12>>2]|0;
    $31 = ((($22)) + 16|0);
    HEAP32[$31>>2] = $30;
    HEAP32[$12>>2] = $22;
    $$03638 = $$03639;
    break;
   }
  } else {
   $$03638 = 0;
  }
 } while(0);
 $34 = HEAP16[399586]|0;
 $35 = $34 << 16 >> 16;
 $36 = ($$03638|0)==($35|0);
 if (!($36)) {
  $$0 = 0;
  return ($$0|0);
 }
 $37 = ($$03638|0)==(64);
 if ($37) {
  (_yyerror(13946)|0);
  // unreachable;
 }
 $38 = (32520 + (($$03638*80)|0)|0);
 (_strcpy($38,$0)|0);
 $39 = (((32520 + (($$03638*80)|0)|0)) + 64|0);
 $40 = $39;
 $41 = $40;
 HEAP32[$41>>2] = 0;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = 0;
 $44 = (_malloc(24)|0);
 $45 = ($44|0)==(0|0);
 if ($45) {
  (_yyerror(14008)|0);
  // unreachable;
 }
 $46 = $44;
 $47 = $46;
 HEAP32[$47>>2] = $2;
 $48 = (($46) + 4)|0;
 $49 = $48;
 HEAP32[$49>>2] = $3;
 $50 = ((($44)) + 8|0);
 HEAP32[$50>>2] = $1;
 $51 = ((($44)) + 12|0);
 HEAP32[$51>>2] = $4;
 $52 = ((($44)) + 16|0);
 HEAP32[$52>>2] = 0;
 $53 = (((32520 + (($$03638*80)|0)|0)) + 76|0);
 HEAP32[$53>>2] = $44;
 $54 = HEAP16[399586]|0;
 $55 = (($54) + 1)<<16>>16;
 HEAP16[399586] = $55;
 $$0 = 0;
 return ($$0|0);
}
function _te_confirma() {
 var $$05 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 $1 = HEAP16[399586]|0;
 $2 = ($1<<16>>16)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $$05 = 0;
 while(1) {
  $3 = (((32520 + (($$05*80)|0)|0)) + 76|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   label = 4;
   break;
  }
  $7 = (($$05) + 1)|0;
  $8 = HEAP16[399586]|0;
  $9 = $8 << 16 >> 16;
  $10 = ($7|0)<($9|0);
  if ($10) {
   $$05 = $7;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $6 = (32520 + (($$05*80)|0)|0);
  HEAP32[$vararg_buffer>>2] = $6;
  (_sprintf($0,14022,$vararg_buffer)|0);
  (_yyerror($0)|0);
  // unreachable;
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
}
function _te_etiqueta($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$048 = 0, $$$2 = 0, $$04865 = 0, $$050$$055 = 0, $$05064 = 0, $$055$$050$$055 = 0, $$05563 = 0, $$149 = 0, $$151 = 0, $$156$$252 = 0, $$15659 = 0, $$25260 = 0, $$261 = 0, $$3 = 0, $$353 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0;
 var $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond57 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 switch ($3|0) {
 case 2:  {
  $5 = HEAP32[(76772)>>2]|0;
  $6 = ($5|0)<(0);
  $7 = $6 << 31 >> 31;
  $11 = $7;$12 = $5;
  break;
 }
 case 1:  {
  $8 = HEAP32[(76764)>>2]|0;
  $9 = ($8|0)<(0);
  $10 = $9 << 31 >> 31;
  $11 = $10;$12 = $8;
  break;
 }
 default: {
  $11 = 0;$12 = 0;
 }
 }
 $13 = (+($12>>>0)) + (4294967296.0*(+($11|0)));
 $14 = (+_log10($13));
 $15 = (+Math_ceil((+$14)));
 $16 = (~~(($15)));
 $17 = HEAP32[199548]|0;
 $18 = ($17|0)==(0);
 $19 = HEAP16[399586]|0;
 $20 = ($19<<16>>16)>(0);
 if ($18) {
  if ($20) {
   $23 = HEAP16[399586]|0;
   $24 = $23 << 16 >> 16;
   $$15659 = 0;$$25260 = -1;$$261 = 0;
   while(1) {
    $77 = (((32520 + (($$15659*80)|0)|0)) + 64|0);
    $78 = $77;
    $79 = $78;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($78) + 4)|0;
    $82 = $81;
    $83 = HEAP32[$82>>2]|0;
    $84 = ($80|0)==($1|0);
    $85 = ($83|0)==($2|0);
    $86 = $84 & $85;
    if ($86) {
     $87 = (((32520 + (($$15659*80)|0)|0)) + 72|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($88|0)==($3|0);
     $$156$$252 = $89 ? $$15659 : $$25260;
     $$$2 = $89 ? 1 : $$261;
     $$3 = $$$2;$$353 = $$156$$252;
    } else {
     $$3 = $$261;$$353 = $$25260;
    }
    $90 = (($$15659) + 1)|0;
    $91 = ($90|0)<($24|0);
    if ($91) {
     $$15659 = $90;$$25260 = $$353;$$261 = $$3;
    } else {
     break;
    }
   }
   $92 = ($$3|0)==(0);
   if (!($92)) {
    $93 = (32520 + (($$353*80)|0)|0);
    (_strcpy($0,$93)|0);
    STACKTOP = sp;return;
   }
  }
  $94 = $vararg_buffer8;
  $95 = $94;
  HEAP32[$95>>2] = $1;
  $96 = (($94) + 4)|0;
  $97 = $96;
  HEAP32[$97>>2] = $2;
  (_sprintf($0,29196,$vararg_buffer8)|0);
  STACKTOP = sp;return;
 }
 if ($20) {
  $21 = HEAP16[399586]|0;
  $22 = $21 << 16 >> 16;
  $$04865 = 0;$$05064 = -1;$$05563 = 0;$40 = 0;$42 = 0;
  while(1) {
   $25 = (((32520 + (($$05563*80)|0)|0)) + 72|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==($3|0);
   if ($27) {
    $28 = (((32520 + (($$05563*80)|0)|0)) + 64|0);
    $29 = $28;
    $30 = $29;
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 4)|0;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = ($31|0)==($1|0);
    $36 = ($34|0)==($2|0);
    $37 = $35 & $36;
    $38 = ($$04865|0)!=(0);
    $39 = ($34|0)<($40|0);
    $41 = ($31>>>0)<($42>>>0);
    $43 = ($34|0)==($40|0);
    $44 = $43 & $41;
    $45 = $39 | $44;
    $or$cond = $38 | $45;
    $46 = ($34|0)>($2|0);
    $47 = ($31>>>0)>($1>>>0);
    $48 = ($34|0)==($2|0);
    $49 = $48 & $47;
    $50 = $46 | $49;
    $or$cond57 = $50 | $or$cond;
    $$050$$055 = $or$cond57 ? $$05064 : $$05563;
    $$055$$050$$055 = $37 ? $$05563 : $$050$$055;
    $$$048 = $37 ? 1 : $$04865;
    $51 = $37 | $or$cond57;
    $52 = $51 ? $42 : $31;
    $53 = $51 ? $40 : $34;
    $$149 = $$$048;$$151 = $$055$$050$$055;$98 = $52;$99 = $53;
   } else {
    $$149 = $$04865;$$151 = $$05064;$98 = $42;$99 = $40;
   }
   $54 = (($$05563) + 1)|0;
   $55 = ($54|0)<($22|0);
   if ($55) {
    $$04865 = $$149;$$05064 = $$151;$$05563 = $54;$40 = $99;$42 = $98;
   } else {
    break;
   }
  }
  $56 = ($$149|0)==(0);
  if (!($56)) {
   $57 = (32520 + (($$151*80)|0)|0);
   (_strcpy($0,$57)|0);
   STACKTOP = sp;return;
  }
  $58 = ($$151|0)>(-1);
  if ($58) {
   HEAP32[$vararg_buffer>>2] = $16;
   (_sprintf($4,14058,$vararg_buffer)|0);
   $59 = (32520 + (($$151*80)|0)|0);
   $60 = (((32520 + (($$151*80)|0)|0)) + 64|0);
   $61 = $60;
   $62 = $61;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($61) + 4)|0;
   $65 = $64;
   $66 = HEAP32[$65>>2]|0;
   $67 = (_i64Subtract(($1|0),($2|0),($63|0),($66|0))|0);
   $68 = tempRet0;
   HEAP32[$vararg_buffer1>>2] = $59;
   $vararg_ptr4 = ((($vararg_buffer1)) + 8|0);
   $69 = $vararg_ptr4;
   $70 = $69;
   HEAP32[$70>>2] = $67;
   $71 = (($69) + 4)|0;
   $72 = $71;
   HEAP32[$72>>2] = $68;
   (_sprintf($0,$4,$vararg_buffer1)|0);
   STACKTOP = sp;return;
  }
 }
 $73 = $vararg_buffer5;
 $74 = $73;
 HEAP32[$74>>2] = $1;
 $75 = (($73) + 4)|0;
 $76 = $75;
 HEAP32[$76>>2] = $2;
 (_sprintf($0,29196,$vararg_buffer5)|0);
 STACKTOP = sp;return;
}
function _te_borra() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[399586]|0;
 $1 = ($0<<16>>16)>(0);
 if (!($1)) {
  return;
 }
 $2 = HEAP16[399586]|0;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)>(1);
 $smax = $4 ? $3 : 1;
 $5 = ($smax*80)|0;
 _memset((32520|0),0,($5|0))|0;
 return;
}
function _libmips_main($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0135$lcssa = 0, $$0140 = 0, $$0141 = 0, $$2 = 0, $$3 = 0, $$3138 = 0, $$lcssa = 0, $$lcssa176 = 0, $$lcssa177 = 0, $$lcssa178 = 0, $$sink = 0, $$sink2 = 0, $$sink4 = 0, $$sink6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigit144 = 0, $isdigit146 = 0, $isdigit148 = 0, $isdigittmp = 0, $isdigittmp143 = 0, $isdigittmp145 = 0, $isdigittmp147 = 0, $leninc150 = 0, $lhsc = 0, $strlen149 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0;
 var $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_ptr13 = 0, $vararg_ptr20 = 0, $vararg_ptr36 = 0, $vararg_ptr46 = 0, $vararg_ptr56 = 0, $vararg_ptr66 = 0, $vararg_ptr73 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer80 = sp + 200|0;
 $vararg_buffer77 = sp + 192|0;
 $vararg_buffer74 = sp + 184|0;
 $vararg_buffer70 = sp + 176|0;
 $vararg_buffer67 = sp + 168|0;
 $vararg_buffer63 = sp + 160|0;
 $vararg_buffer60 = sp + 152|0;
 $vararg_buffer57 = sp + 144|0;
 $vararg_buffer53 = sp + 136|0;
 $vararg_buffer50 = sp + 128|0;
 $vararg_buffer47 = sp + 120|0;
 $vararg_buffer43 = sp + 112|0;
 $vararg_buffer40 = sp + 104|0;
 $vararg_buffer37 = sp + 96|0;
 $vararg_buffer33 = sp + 88|0;
 $vararg_buffer30 = sp + 80|0;
 $vararg_buffer27 = sp + 72|0;
 $vararg_buffer24 = sp + 64|0;
 $vararg_buffer21 = sp + 56|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = ($1|0)==(0);
 L1: do {
  if ($9) {
   L3: do {
    switch ($2|0) {
    case 0:  {
     switch ($3|0) {
     case 1:  {
      $$sink = 2;
      break;
     }
     case 2:  {
      $$sink = 1;
      break;
     }
     case 3:  {
      $$sink = 0;
      break;
     }
     default: {
      break L3;
     }
     }
     HEAP32[19177] = $$sink;
     break;
    }
    case 1:  {
     switch ($3|0) {
     case 1:  {
      $$sink2 = 5;
      break;
     }
     case 2:  {
      $$sink2 = 4;
      break;
     }
     case 3:  {
      $$sink2 = 3;
      break;
     }
     default: {
      break L3;
     }
     }
     HEAP32[19177] = $$sink2;
     break;
    }
    case 2:  {
     switch ($3|0) {
     case 1:  {
      $$sink4 = 8;
      break;
     }
     case 2:  {
      $$sink4 = 7;
      break;
     }
     case 3:  {
      $$sink4 = 6;
      break;
     }
     default: {
      break L3;
     }
     }
     HEAP32[19177] = $$sink4;
     break;
    }
    default: {
    }
    }
   } while(0);
   switch ($4|0) {
   case 0:  {
    $$sink6 = 2;
    label = 18;
    break;
   }
   case 1:  {
    $$sink6 = 0;
    label = 18;
    break;
   }
   case 2:  {
    $$sink6 = 1;
    label = 18;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 18) {
    HEAP32[19178] = $$sink6;
   }
   $10 = ($5|0)<(10);
   $11 = $10 ? $5 : 10;
   HEAP32[18] = $11;
   $12 = ($6|0)<(10);
   $13 = $12 ? $6 : 10;
   HEAP32[20] = $13;
   $14 = ($7|0)<(10);
   $15 = $14 ? $7 : 10;
   HEAP32[21] = $15;
   $16 = ($8|0)<(10);
   $17 = $16 ? $8 : 10;
   HEAP32[19] = $17;
   $$2 = $0;$$3 = 0;$$3138 = 0;$160 = 0;
  } else {
   $$0140 = $0;
   L26: while(1) {
    $18 = HEAP8[$$0140>>0]|0;
    switch ($18<<24>>24) {
    case 10: case 0:  {
     $$2 = $0;$$3 = 0;$$3138 = 0;$160 = 0;
     break L1;
     break;
    }
    case 59:  {
     break L26;
     break;
    }
    default: {
    }
    }
    $19 = ((($$0140)) + 1|0);
    $$0140 = $19;
   }
   $20 = ((($$0140)) + 1|0);
   $$0141 = $20;
   L30: while(1) {
    $21 = HEAP8[$$0141>>0]|0;
    switch ($21<<24>>24) {
    case 0:  {
     $$2 = $0;$$3 = 0;$$3138 = 0;$160 = 0;
     break L1;
     break;
    }
    case 10:  {
     break L30;
     break;
    }
    default: {
    }
    }
    $22 = ((($$0141)) + 1|0);
    $$0141 = $22;
   }
   HEAP8[$$0141>>0] = 0;
   $23 = ((($$0141)) + 1|0);
   $24 = (_malloc(4)|0);
   HEAP32[$24>>2] = 14073;
   $25 = (_strtok($20,14078)|0);
   $26 = ($25|0)==(0|0);
   $27 = (_realloc($24,8)|0);
   $28 = ((($27)) + 4|0);
   if ($26) {
    $$0135$lcssa = 1;$$lcssa176 = $28;$$lcssa177 = $27;$$lcssa178 = $27;
   } else {
    $29 = $25;$30 = $28;$34 = 2;$36 = $27;
    while(1) {
     HEAP32[$30>>2] = $29;
     $31 = (_strtok(0,14078)|0);
     $32 = ($31|0)==(0|0);
     $33 = (($34) + 1)|0;
     $35 = $33 << 2;
     $37 = (_realloc($36,$35)|0);
     $38 = (($37) + ($34<<2)|0);
     if ($32) {
      $$0135$lcssa = $34;$$lcssa176 = $38;$$lcssa177 = $37;$$lcssa178 = $37;
      break;
     } else {
      $29 = $31;$30 = $38;$34 = $33;$36 = $37;
     }
    }
   }
   HEAP32[$$lcssa176>>2] = 0;
   $$2 = $23;$$3 = $$lcssa177;$$3138 = $$0135$lcssa;$160 = $$lcssa178;
  }
 } while(0);
 $39 = (_fopen(14081,15451)|0);
 (_fputs($$2,$39)|0);
 (_fclose($39)|0);
 $40 = ($$3138|0)>(0);
 L39: do {
  if ($40) {
   HEAP32[19178] = 1;
   HEAP32[19177] = 3;
   HEAP32[19179] = 0;
   $41 = HEAP32[388]|0;
   HEAPF64[$vararg_buffer>>3] = 2.2999999999999998;
   (_fprintf($41,14091,$vararg_buffer)|0);
   L41: while(1) {
    HEAP32[$vararg_buffer>>2] = 0;
    $42 = (_getopt_long($$3138,$$3,14143,88,$vararg_buffer)|0);
    L43: do {
     switch ($42|0) {
     case -1:  {
      label = 102;
      break L41;
      break;
     }
     case 63:  {
      label = 31;
      break L41;
      break;
     }
     case 0:  {
      $45 = HEAP32[$vararg_buffer>>2]|0;
      $46 = (((88 + ($45<<4)|0)) + 8|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       $49 = (88 + ($45<<4)|0);
       $50 = HEAP32[$49>>2]|0;
       HEAP32[$vararg_buffer4>>2] = $50;
       (_printf(14848,$vararg_buffer4)|0);
       $51 = HEAP32[199786]|0;
       $52 = ($51|0)==(0|0);
       if (!($52)) {
        HEAP32[$vararg_buffer7>>2] = $51;
        (_printf(14858,$vararg_buffer7)|0);
       }
       (_putchar(10)|0);
      }
      break;
     }
     case 99:  {
      $53 = HEAP32[199786]|0;
      $54 = (_strncmp($53,14871,4)|0);
      $55 = ($54|0)==(0);
      if ($55) {
       HEAP32[19177] = 0;
       break L43;
      }
      $56 = (_strncmp($53,14873,4)|0);
      $57 = ($56|0)==(0);
      if ($57) {
       HEAP32[19177] = 0;
       break L43;
      }
      $58 = (_strncmp($53,14876,4)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       HEAP32[19177] = 1;
       break L43;
      }
      $60 = (_strncmp($53,14879,4)|0);
      $61 = ($60|0)==(0);
      if ($61) {
       HEAP32[19177] = 2;
       break L43;
      }
      $62 = (_strncmp($53,14882,4)|0);
      $63 = ($62|0)==(0);
      if ($63) {
       HEAP32[19177] = 3;
       break L43;
      }
      $64 = (_strncmp($53,14884,4)|0);
      $65 = ($64|0)==(0);
      if ($65) {
       HEAP32[19177] = 3;
       break L43;
      }
      $66 = (_strncmp($53,14889,4)|0);
      $67 = ($66|0)==(0);
      if ($67) {
       HEAP32[19177] = 4;
       break L43;
      }
      $68 = (_strncmp($53,14894,4)|0);
      $69 = ($68|0)==(0);
      if ($69) {
       HEAP32[19177] = 5;
       break L43;
      }
      $70 = (_strncmp($53,14899,4)|0);
      $71 = ($70|0)==(0);
      if ($71) {
       HEAP32[19177] = 6;
       break L43;
      }
      $72 = (_strncmp($53,14903,4)|0);
      $73 = ($72|0)==(0);
      if ($73) {
       HEAP32[19177] = 7;
       break L43;
      }
      $74 = (_strncmp($53,14907,4)|0);
      $75 = ($74|0)==(0);
      if (!($75)) {
       label = 58;
       break L41;
      }
      HEAP32[19177] = 8;
      break;
     }
     case 100:  {
      $78 = HEAP32[199786]|0;
      $lhsc = HEAP8[$78>>0]|0;
      switch ($lhsc<<24>>24) {
      case 110:  {
       HEAP32[19178] = 2;
       break L43;
       break;
      }
      case 112:  {
       HEAP32[19178] = 0;
       break L43;
       break;
      }
      case 99:  {
       HEAP32[19178] = 1;
       break L43;
       break;
      }
      default: {
       label = 63;
       break L41;
      }
      }
      break;
     }
     case 102:  {
      $81 = HEAP32[199786]|0;
      $82 = (_fopen($81,29135)|0);
      $83 = HEAP32[199786]|0;
      $strlen149 = (_strlen($83)|0);
      $leninc150 = (($strlen149) + 1)|0;
      _memcpy((840457|0),($83|0),($leninc150|0))|0;
      $84 = ($82|0)==(0|0);
      if ($84) {
       label = 65;
       break L41;
      }
      break;
     }
     case 97:  {
      $87 = HEAP32[199786]|0;
      $88 = HEAP8[$87>>0]|0;
      $89 = $88 << 24 >> 24;
      $isdigittmp147 = (($89) + -48)|0;
      $isdigit148 = ($isdigittmp147>>>0)<(10);
      if (!($isdigit148)) {
       label = 71;
       break L41;
      }
      $90 = (_atoi($87)|0);
      $91 = ($90|0)>(1);
      if (!($91)) {
       label = 71;
       break L41;
      }
      $92 = ($90|0)>(9);
      if ($92) {
       label = 69;
       break L41;
      }
      HEAP32[18] = $90;
      break;
     }
     case 107:  {
      $97 = HEAP32[199786]|0;
      $98 = HEAP8[$97>>0]|0;
      $99 = $98 << 24 >> 24;
      $isdigittmp145 = (($99) + -48)|0;
      $isdigit146 = ($isdigittmp145>>>0)<(10);
      if (!($isdigit146)) {
       label = 77;
       break L41;
      }
      $100 = (_atoi($97)|0);
      $101 = ($100|0)>(1);
      if (!($101)) {
       label = 77;
       break L41;
      }
      $102 = ($100|0)>(9);
      if ($102) {
       label = 75;
       break L41;
      }
      HEAP32[20] = $100;
      break;
     }
     case 108:  {
      $107 = HEAP32[199786]|0;
      $108 = HEAP8[$107>>0]|0;
      $109 = $108 << 24 >> 24;
      $isdigittmp143 = (($109) + -48)|0;
      $isdigit144 = ($isdigittmp143>>>0)<(10);
      if (!($isdigit144)) {
       label = 83;
       break L41;
      }
      $110 = (_atoi($107)|0);
      $111 = ($110|0)>(1);
      if (!($111)) {
       label = 83;
       break L41;
      }
      $112 = ($110|0)>(9);
      if ($112) {
       label = 81;
       break L41;
      }
      HEAP32[21] = $110;
      break;
     }
     case 109:  {
      $117 = HEAP32[199786]|0;
      $118 = HEAP8[$117>>0]|0;
      $119 = $118 << 24 >> 24;
      $isdigittmp = (($119) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if (!($isdigit)) {
       label = 89;
       break L41;
      }
      $120 = (_atoi($117)|0);
      $121 = ($120|0)>(1);
      if (!($121)) {
       label = 89;
       break L41;
      }
      $122 = ($120|0)>(9);
      if ($122) {
       label = 87;
       break L41;
      }
      HEAP32[19] = $120;
      break;
     }
     case 115:  {
      $127 = HEAP32[199786]|0;
      $128 = (_strncmp($127,15058,6)|0);
      $129 = ($128|0)==(0);
      if ($129) {
       HEAP32[19179] = 2;
       break L43;
      }
      $130 = (_strncmp($127,15065,5)|0);
      $131 = ($130|0)==(0);
      if ($131) {
       HEAP32[19179] = 3;
       break L43;
      }
      $132 = (_strncmp($127,15071,10)|0);
      $133 = ($132|0)==(0);
      if ($133) {
       HEAP32[19179] = 0;
       break L43;
      }
      $134 = (_strncmp($127,15076,10)|0);
      $135 = ($134|0)==(0);
      if (!($135)) {
       label = 98;
       break L41;
      }
      HEAP32[19179] = 1;
      break;
     }
     case 110:  {
      break;
     }
     case 106:  {
      HEAP32[19180] = 1;
      break;
     }
     default: {
      label = 100;
      break L41;
     }
     }
    } while(0);
   }
   switch (label|0) {
    case 31: {
     $43 = HEAP32[482]|0;
     $44 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $44;
     (_fprintf($43,14163,$vararg_buffer1)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 58: {
     $76 = HEAP32[482]|0;
     HEAP32[$vararg_buffer10>>2] = 14937;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $53;
     (_fprintf($76,14911,$vararg_buffer10)|0);
     $77 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer14>>2] = $77;
     (_fprintf($76,14163,$vararg_buffer14)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 63: {
     $79 = HEAP32[482]|0;
     HEAP32[$vararg_buffer17>>2] = 14967;
     $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
     HEAP32[$vararg_ptr20>>2] = $78;
     (_fprintf($79,14940,$vararg_buffer17)|0);
     $80 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer21>>2] = $80;
     (_fprintf($79,14163,$vararg_buffer21)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 65: {
     $85 = HEAP32[482]|0;
     HEAP32[$vararg_buffer24>>2] = 840457;
     (_fprintf($85,14970,$vararg_buffer24)|0);
     $86 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer27>>2] = $86;
     (_fprintf($85,14163,$vararg_buffer27)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 69: {
     $93 = HEAP32[482]|0;
     HEAP32[$vararg_buffer30>>2] = 9;
     (_fprintf($93,14998,$vararg_buffer30)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 71: {
     $94 = HEAP32[482]|0;
     $95 = HEAP32[199786]|0;
     HEAP32[$vararg_buffer33>>2] = 15046;
     $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
     HEAP32[$vararg_ptr36>>2] = $95;
     (_fprintf($94,14940,$vararg_buffer33)|0);
     $96 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer37>>2] = $96;
     (_fprintf($94,14163,$vararg_buffer37)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 75: {
     $103 = HEAP32[482]|0;
     HEAP32[$vararg_buffer40>>2] = 9;
     (_fprintf($103,14998,$vararg_buffer40)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 77: {
     $104 = HEAP32[482]|0;
     $105 = HEAP32[199786]|0;
     HEAP32[$vararg_buffer43>>2] = 15049;
     $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
     HEAP32[$vararg_ptr46>>2] = $105;
     (_fprintf($104,14940,$vararg_buffer43)|0);
     $106 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer47>>2] = $106;
     (_fprintf($104,14163,$vararg_buffer47)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 81: {
     $113 = HEAP32[482]|0;
     HEAP32[$vararg_buffer50>>2] = 9;
     (_fprintf($113,14998,$vararg_buffer50)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 83: {
     $114 = HEAP32[482]|0;
     $115 = HEAP32[199786]|0;
     HEAP32[$vararg_buffer53>>2] = 15052;
     $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
     HEAP32[$vararg_ptr56>>2] = $115;
     (_fprintf($114,14940,$vararg_buffer53)|0);
     $116 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer57>>2] = $116;
     (_fprintf($114,14163,$vararg_buffer57)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 87: {
     $123 = HEAP32[482]|0;
     HEAP32[$vararg_buffer60>>2] = 9;
     (_fprintf($123,14998,$vararg_buffer60)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 89: {
     $124 = HEAP32[482]|0;
     $125 = HEAP32[199786]|0;
     HEAP32[$vararg_buffer63>>2] = 15055;
     $vararg_ptr66 = ((($vararg_buffer63)) + 4|0);
     HEAP32[$vararg_ptr66>>2] = $125;
     (_fprintf($124,14940,$vararg_buffer63)|0);
     $126 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer67>>2] = $126;
     (_fprintf($124,14163,$vararg_buffer67)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 98: {
     $136 = HEAP32[482]|0;
     HEAP32[$vararg_buffer70>>2] = 15087;
     $vararg_ptr73 = ((($vararg_buffer70)) + 4|0);
     HEAP32[$vararg_ptr73>>2] = $127;
     (_fprintf($136,14940,$vararg_buffer70)|0);
     $137 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer74>>2] = $137;
     (_fprintf($136,14163,$vararg_buffer74)|0);
     _exit(1);
     // unreachable;
     break;
    }
    case 100: {
     _abort();
     // unreachable;
     break;
    }
    case 102: {
     $138 = HEAP32[597]|0;
     $139 = ($138|0)<($$3138|0);
     if (!($139)) {
      break L39;
     }
     $140 = HEAP32[597]|0;
     $141 = ($140|0)<($$3138|0);
     $142 = HEAP32[482]|0;
     if (!($141)) {
      $$lcssa = $142;
      $151 = HEAP32[$$3>>2]|0;
      HEAP32[$vararg_buffer80>>2] = $151;
      (_fprintf($$lcssa,14163,$vararg_buffer80)|0);
      _exit(1);
      // unreachable;
     }
     $143 = HEAP32[482]|0;
     $145 = $140;$148 = $142;
     while(1) {
      $144 = (($145) + 1)|0;
      HEAP32[597] = $144;
      $146 = (($$3) + ($145<<2)|0);
      $147 = HEAP32[$146>>2]|0;
      HEAP32[$vararg_buffer77>>2] = $147;
      (_fprintf($148,15090,$vararg_buffer77)|0);
      $149 = HEAP32[597]|0;
      $150 = ($149|0)<($$3138|0);
      if ($150) {
       $145 = $149;$148 = $143;
      } else {
       $$lcssa = $143;
       break;
      }
     }
     $151 = HEAP32[$$3>>2]|0;
     HEAP32[$vararg_buffer80>>2] = $151;
     (_fprintf($$lcssa,14163,$vararg_buffer80)|0);
     _exit(1);
     // unreachable;
     break;
    }
   }
  }
 } while(0);
 dest=840457; src=14081; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 (_fopen(840457,29135)|0);
 HEAP32[19179] = 0;
 HEAP32[19180] = 1;
 $152 = (_file_exists()|0);
 $153 = ($152|0)==(0);
 if (!($153)) {
  $154 = (_fopen(15114,29135)|0);
  (_fgets(840585,128,$154)|0);
  HEAP32[19176] = 1;
  (_fclose($154)|0);
 }
 _inicializa_mips();
 _ensamblador(840457);
 _ejecutar_codigo();
 $155 = (_fopen(15128,29135)|0);
 (_fseek($155,0,2)|0);
 $156 = (_ftell($155)|0);
 _rewind($155);
 $157 = (($156) + 1)|0;
 $158 = (_malloc($157)|0);
 (_fread($158,$156,1,$155)|0);
 $159 = (($158) + ($156)|0);
 HEAP8[$159>>0] = 0;
 (_fclose($155)|0);
 if (!($40)) {
  STACKTOP = sp;return ($158|0);
 }
 _free($160);
 STACKTOP = sp;return ($158|0);
}
function _file_exists() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = sp;
 $1 = (_stat(15114,$0)|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _inicializa_mips() {
 var $$161 = 0, $$260 = 0, $$359 = 0, $$557 = 0, $$654 = 0, $$752 = 0, $$850 = 0, $$949 = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond63 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $$byval_copy1 = sp + 8|0;
 $0 = sp + 152|0;
 $1 = sp;
 $2 = 54832;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 _memset((54032|0),0,264)|0;
 $$161 = 0;
 while(1) {
  $6 = (54296 + ($$161<<4)|0);
  HEAPF64[$6>>3] = 0.0;
  $7 = (((54296 + ($$161<<4)|0)) + 8|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$161) + 1)|0;
  $exitcond63 = ($8|0)==(33);
  if ($exitcond63) {
   break;
  } else {
   $$161 = $8;
  }
 }
 $9 = $1;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $$260 = 0;
 while(1) {
  $13 = ($$260|0)<(0);
  $14 = $13 << 31 >> 31;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
  _escribe_mem_datos($$260,$14,$$byval_copy1,2,0);
  $15 = (($$260) + 1)|0;
  $exitcond = ($15|0)==(16384);
  if ($exitcond) {
   break;
  } else {
   $$260 = $15;
  }
 }
 HEAP8[$0>>0] = 0;
 $16 = ((($0)) + 4|0);
 $17 = ((($0)) + 12|0);
 HEAP16[$17>>1] = 0;
 ;HEAP32[$16>>2]=0|0;HEAP16[$16+4>>1]=0|0;HEAP8[$16+6>>0]=0|0;
 $$359 = 0;
 while(1) {
  $18 = ($$359|0)<(0);
  $19 = $18 << 31 >> 31;
  _memcpy(($$byval_copy1|0),($0|0),144)|0;
  _escribe_mem_instruc($$359,$19,$$byval_copy1);
  $20 = (($$359) + 8)|0;
  $21 = ($20|0)<(4096);
  if ($21) {
   $$359 = $20;
  } else {
   break;
  }
 }
 _memset((797672|0),0,132)|0;
 $$557 = 0;
 while(1) {
  $22 = (666600 + ($$557<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = (($$557) + 8)|0;
  $24 = ($23|0)<(16384);
  if ($24) {
   $$557 = $23;
  } else {
   break;
  }
 }
 _memcpy((55008|0),($0|0),144)|0;
 $25 = (55152);
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = (55160);
 $30 = $29;
 HEAP32[$30>>2] = -1;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = -1;
 HEAP32[(55168)>>2] = 0;
 _memcpy((55368|0),($0|0),144)|0;
 ;HEAP32[(55512)>>2]=0|0;HEAP32[(55512)+4>>2]=0|0;HEAP32[(55512)+8>>2]=0|0;HEAP32[(55512)+12>>2]=0|0;HEAP32[(55512)+16>>2]=0|0;HEAP32[(55512)+20>>2]=0|0;HEAP32[(55512)+24>>2]=0|0;HEAP32[(55512)+28>>2]=0|0;
 $33 = (55544);
 $34 = $33;
 HEAP32[$34>>2] = -1;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = -1;
 HEAP32[(55552)>>2] = -1;
 _memcpy((55744|0),($0|0),144)|0;
 ;HEAP32[(55888)>>2]=0|0;HEAP32[(55888)+4>>2]=0|0;HEAP32[(55888)+8>>2]=0|0;HEAP32[(55888)+12>>2]=0|0;HEAP32[(55888)+16>>2]=0|0;
 $37 = (55912);
 $38 = $37;
 HEAP32[$38>>2] = -1;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = -1;
 HEAP32[(55920)>>2] = -1;
 _memcpy((56104|0),($0|0),144)|0;
 ;HEAP32[(56248)>>2]=0|0;HEAP32[(56248)+4>>2]=0|0;HEAP32[(56248)+8>>2]=0|0;HEAP32[(56248)+12>>2]=0|0;
 $41 = (56264);
 $42 = $41;
 HEAP32[$42>>2] = -1;
 $43 = (($41) + 4)|0;
 $44 = $43;
 HEAP32[$44>>2] = -1;
 HEAP32[(56272)>>2] = -1;
 HEAP32[199574] = 0;
 HEAP32[199575] = 0;
 _memcpy((56632|0),($0|0),144)|0;
 dest=(56784); stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $45 = (56824);
 $46 = $45;
 HEAP32[$46>>2] = -1;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = -1;
 HEAP32[(56832)>>2] = -1;
 _memcpy((57256|0),($0|0),144)|0;
 dest=(57408); stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $49 = (57448);
 $50 = $49;
 HEAP32[$50>>2] = -1;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = -1;
 HEAP32[(57456)>>2] = -1;
 _memcpy((58088|0),($0|0),144)|0;
 dest=(58240); stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $53 = (58280);
 $54 = $53;
 HEAP32[$54>>2] = -1;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = -1;
 HEAP32[(58288)>>2] = -1;
 _memcpy((57672|0),($0|0),144)|0;
 dest=(57824); stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $57 = (57864);
 $58 = $57;
 HEAP32[$58>>2] = -1;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = -1;
 HEAP32[(57872)>>2] = -1;
 $61 = HEAP32[18]|0;
 $62 = ($61|0)<(1);
 if (!($62)) {
  $63 = HEAP32[18]|0;
  $$654 = 1;
  while(1) {
   $67 = (((62296 + (($$654*200)|0)|0)) + 152|0);
   HEAPF64[$67>>3] = 0.0;
   $68 = (62296 + (($$654*200)|0)|0);
   _memcpy(($68|0),($0|0),144)|0;
   $69 = (((62296 + (($$654*200)|0)|0)) + 184|0);
   $70 = $69;
   $71 = $70;
   HEAP32[$71>>2] = -1;
   $72 = (($70) + 4)|0;
   $73 = $72;
   HEAP32[$73>>2] = -1;
   $74 = (((62296 + (($$654*200)|0)|0)) + 192|0);
   HEAP32[$74>>2] = -1;
   $75 = (($$654) + 1)|0;
   $76 = ($$654|0)<($63|0);
   if ($76) {
    $$654 = $75;
   } else {
    break;
   }
  }
 }
 $64 = HEAP32[20]|0;
 $65 = ($64|0)<(1);
 if (!($65)) {
  $66 = HEAP32[20]|0;
  $$752 = 1;
  while(1) {
   $80 = (((70296 + (($$752*200)|0)|0)) + 144|0);
   $81 = $80;
   $82 = $81;
   HEAP32[$82>>2] = 0;
   $83 = (($81) + 4)|0;
   $84 = $83;
   HEAP32[$84>>2] = 0;
   $85 = (70296 + (($$752*200)|0)|0);
   _memcpy(($85|0),($0|0),144)|0;
   $86 = (((70296 + (($$752*200)|0)|0)) + 184|0);
   $87 = $86;
   $88 = $87;
   HEAP32[$88>>2] = -1;
   $89 = (($87) + 4)|0;
   $90 = $89;
   HEAP32[$90>>2] = -1;
   $91 = (((70296 + (($$752*200)|0)|0)) + 192|0);
   HEAP32[$91>>2] = -1;
   $92 = (($$752) + 1)|0;
   $93 = ($$752|0)<($66|0);
   if ($93) {
    $$752 = $92;
   } else {
    break;
   }
  }
 }
 $77 = HEAP32[21]|0;
 $78 = ($77|0)<(1);
 if (!($78)) {
  $79 = HEAP32[21]|0;
  $$850 = 1;
  while(1) {
   $97 = (((58296 + (($$850*200)|0)|0)) + 152|0);
   HEAPF64[$97>>3] = 0.0;
   $98 = (58296 + (($$850*200)|0)|0);
   _memcpy(($98|0),($0|0),144)|0;
   $99 = (((58296 + (($$850*200)|0)|0)) + 184|0);
   $100 = $99;
   $101 = $100;
   HEAP32[$101>>2] = -1;
   $102 = (($100) + 4)|0;
   $103 = $102;
   HEAP32[$103>>2] = -1;
   $104 = (((58296 + (($$850*200)|0)|0)) + 192|0);
   HEAP32[$104>>2] = -1;
   $105 = (($$850) + 1)|0;
   $106 = ($$850|0)<($79|0);
   if ($106) {
    $$850 = $105;
   } else {
    break;
   }
  }
 }
 $94 = HEAP32[19]|0;
 $95 = ($94|0)<(1);
 if ($95) {
  _memcpy((74464|0),($0|0),144)|0;
  HEAPF64[(74608)>>3] = 0.0;
  $117 = (74616);
  $118 = $117;
  HEAP32[$118>>2] = -1;
  $119 = (($117) + 4)|0;
  $120 = $119;
  HEAP32[$120>>2] = -1;
  HEAP32[(74624)>>2] = -1;
  _memcpy((74800|0),($0|0),144)|0;
  HEAPF64[(74944)>>3] = 0.0;
  $121 = (74952);
  $122 = $121;
  HEAP32[$122>>2] = -1;
  $123 = (($121) + 4)|0;
  $124 = $123;
  HEAP32[$124>>2] = -1;
  HEAP32[(74960)>>2] = -1;
  _memcpy((56456|0),($0|0),144)|0;
  $125 = (56600);
  $126 = $125;
  HEAP32[$126>>2] = 0;
  $127 = (($125) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = 0;
  $129 = (56616);
  $130 = $129;
  HEAP32[$130>>2] = -1;
  $131 = (($129) + 4)|0;
  $132 = $131;
  HEAP32[$132>>2] = -1;
  HEAP32[(56624)>>2] = -1;
  _memcpy((75136|0),($0|0),144)|0;
  HEAPF64[(75280)>>3] = 0.0;
  $133 = (75288);
  $134 = $133;
  HEAP32[$134>>2] = -1;
  $135 = (($133) + 4)|0;
  $136 = $135;
  HEAP32[$136>>2] = -1;
  HEAP32[(75296)>>2] = -1;
  _memcpy((75808|0),($0|0),144)|0;
  HEAPF64[(75952)>>3] = 0.0;
  $137 = (75960);
  $138 = $137;
  HEAP32[$138>>2] = -1;
  $139 = (($137) + 4)|0;
  $140 = $139;
  HEAP32[$140>>2] = -1;
  HEAP32[(75968)>>2] = -1;
  _memcpy((75472|0),($0|0),144)|0;
  HEAPF64[(75616)>>3] = 0.0;
  $141 = (75624);
  $142 = $141;
  HEAP32[$142>>2] = -1;
  $143 = (($141) + 4)|0;
  $144 = $143;
  HEAP32[$144>>2] = -1;
  HEAP32[(75632)>>2] = -1;
  STACKTOP = sp;return;
 }
 $96 = HEAP32[19]|0;
 $$949 = 1;
 while(1) {
  $107 = (((66296 + (($$949*200)|0)|0)) + 152|0);
  HEAPF64[$107>>3] = 0.0;
  $108 = (66296 + (($$949*200)|0)|0);
  _memcpy(($108|0),($0|0),144)|0;
  $109 = (((66296 + (($$949*200)|0)|0)) + 184|0);
  $110 = $109;
  $111 = $110;
  HEAP32[$111>>2] = -1;
  $112 = (($110) + 4)|0;
  $113 = $112;
  HEAP32[$113>>2] = -1;
  $114 = (((66296 + (($$949*200)|0)|0)) + 192|0);
  HEAP32[$114>>2] = -1;
  $115 = (($$949) + 1)|0;
  $116 = ($$949|0)<($96|0);
  if ($116) {
   $$949 = $115;
  } else {
   break;
  }
 }
 _memcpy((74464|0),($0|0),144)|0;
 HEAPF64[(74608)>>3] = 0.0;
 $117 = (74616);
 $118 = $117;
 HEAP32[$118>>2] = -1;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = -1;
 HEAP32[(74624)>>2] = -1;
 _memcpy((74800|0),($0|0),144)|0;
 HEAPF64[(74944)>>3] = 0.0;
 $121 = (74952);
 $122 = $121;
 HEAP32[$122>>2] = -1;
 $123 = (($121) + 4)|0;
 $124 = $123;
 HEAP32[$124>>2] = -1;
 HEAP32[(74960)>>2] = -1;
 _memcpy((56456|0),($0|0),144)|0;
 $125 = (56600);
 $126 = $125;
 HEAP32[$126>>2] = 0;
 $127 = (($125) + 4)|0;
 $128 = $127;
 HEAP32[$128>>2] = 0;
 $129 = (56616);
 $130 = $129;
 HEAP32[$130>>2] = -1;
 $131 = (($129) + 4)|0;
 $132 = $131;
 HEAP32[$132>>2] = -1;
 HEAP32[(56624)>>2] = -1;
 _memcpy((75136|0),($0|0),144)|0;
 HEAPF64[(75280)>>3] = 0.0;
 $133 = (75288);
 $134 = $133;
 HEAP32[$134>>2] = -1;
 $135 = (($133) + 4)|0;
 $136 = $135;
 HEAP32[$136>>2] = -1;
 HEAP32[(75296)>>2] = -1;
 _memcpy((75808|0),($0|0),144)|0;
 HEAPF64[(75952)>>3] = 0.0;
 $137 = (75960);
 $138 = $137;
 HEAP32[$138>>2] = -1;
 $139 = (($137) + 4)|0;
 $140 = $139;
 HEAP32[$140>>2] = -1;
 HEAP32[(75968)>>2] = -1;
 _memcpy((75472|0),($0|0),144)|0;
 HEAPF64[(75616)>>3] = 0.0;
 $141 = (75624);
 $142 = $141;
 HEAP32[$142>>2] = -1;
 $143 = (($141) + 4)|0;
 $144 = $143;
 HEAP32[$144>>2] = -1;
 HEAP32[(75632)>>2] = -1;
 STACKTOP = sp;return;
}
function _ejecutar_codigo() {
 var $$021 = 0, $$0368 = 0, $$1 = 0, $$135 = 0, $$1379 = 0, $$213 = 0, $$317 = 0, $$off = 0, $$pr = 0, $$pr7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $notrhs = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[19182] = 0;
 ;HEAP32[76732>>2]=0|0;HEAP32[76732+4>>2]=0|0;HEAP32[76732+8>>2]=0|0;HEAP32[76732+12>>2]=0|0;HEAP32[76732+16>>2]=0|0;
 HEAP32[19181] = 1;
 $0 = HEAP32[19169]|0;
 $1 = HEAP32[19168]|0;
 $2 = $1 | $0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[19175] = 1;
 }
 _init_presentacion();
 $4 = HEAP32[19179]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[17]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   _imprime_inicio();
  } else {
   _imprime_inicio_css();
  }
  $$pr = HEAP32[19179]|0;
  $8 = $$pr;
 } else {
  $8 = $4;
 }
 $9 = ($8|0)==(1);
 do {
  if ($9) {
   $10 = HEAP32[17]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    _imprime_inicio();
    break;
   } else {
    _imprime_inicio_css();
    break;
   }
  }
 } while(0);
 $12 = HEAP32[19179]|0;
 $13 = HEAP32[388]|0;
 $14 = HEAP32[482]|0;
 $$021 = 0;$15 = $12;
 while(1) {
  $$off = (($15) + -1)|0;
  $switch = ($$off>>>0)<(3);
  if ($switch) {
   $16 = HEAP32[19182]|0;
   $17 = ($16|0)>(0);
   $18 = (($16|0) % 2000)&-1;
   $19 = ($18|0)==(0);
   $or$cond = $17 & $19;
   if ($or$cond) {
    (_putchar(46)|0);
    (_fflush($13)|0);
   }
   $20 = HEAP32[19182]|0;
   $21 = ($20|0)>(0);
   $22 = (($20|0) % 10000)&-1;
   $23 = ($22|0)==(0);
   $or$cond4 = $21 & $23;
   if ($or$cond4) {
    $24 = (($20>>>0) / 1000)&-1;
    HEAP32[$vararg_buffer>>2] = $24;
    (_printf(15138,$vararg_buffer)|0);
    (_fflush($13)|0);
   }
   $25 = HEAP32[19182]|0;
   $26 = ($25|0)>(0);
   $27 = (($25|0) % 50000)&-1;
   $28 = ($27|0)==(0);
   $or$cond6 = $26 & $28;
   if ($or$cond6) {
    (_putchar(10)|0);
   }
  }
  $29 = (_fase_escritura()|0);
  _fase_memoria();
  _fase_ejecucion();
  _fase_escritura_FP();
  _fase_escritura_FPSR();
  $30 = HEAP32[21]|0;
  $31 = ($30|0)>(0);
  if ($31) {
   $$0368 = $30;
   while(1) {
    $32 = $$0368&65535;
    _fase_LS($32);
    $33 = (($$0368) + -1)|0;
    $34 = ($$0368|0)>(1);
    if ($34) {
     $$0368 = $33;
    } else {
     break;
    }
   }
  }
  $35 = HEAP32[18]|0;
  $36 = ($35|0)>(0);
  if ($36) {
   $$1379 = $35;
   while(1) {
    $37 = $$1379&65535;
    _fase_A($37);
    $38 = (($$1379) + -1)|0;
    $39 = ($$1379|0)>(1);
    if ($39) {
     $$1379 = $38;
    } else {
     break;
    }
   }
  }
  $40 = HEAP32[20]|0;
  $41 = ($40|0)>(0);
  if ($41) {
   $$213 = $40;
   while(1) {
    $42 = $$213&65535;
    _fase_C($42);
    $43 = (($$213) + -1)|0;
    $44 = ($$213|0)>(1);
    if ($44) {
     $$213 = $43;
    } else {
     break;
    }
   }
  }
  $45 = HEAP32[19]|0;
  $46 = ($45|0)>(0);
  if ($46) {
   $$317 = $45;
   while(1) {
    $47 = $$317&65535;
    _fase_M($47);
    $48 = (($$317) + -1)|0;
    $49 = ($$317|0)>(1);
    if ($49) {
     $$317 = $48;
    } else {
     break;
    }
   }
  }
  (_fase_decodificacion()|0);
  _fase_busqueda();
  $50 = HEAP32[19182]|0;
  $51 = (($50) + 1)|0;
  HEAP32[19182] = $51;
  $52 = HEAP32[19183]|0;
  $53 = (($52) + 1)|0;
  HEAP32[19183] = $53;
  $54 = ($50|0)>(99999998);
  if ($54) {
   HEAP32[$vararg_buffer1>>2] = 100000000;
   (_fprintf($14,15144,$vararg_buffer1)|0);
   $$135 = 1;
  } else {
   $$135 = $29;
  }
  $55 = HEAP32[19179]|0;
  $56 = HEAP32[19182]|0;
  $notrhs = ($56|0)<(1000);
  $57 = $55 | $$021;
  $58 = ($57|0)!=(0);
  $59 = $58 | $notrhs;
  if ($59) {
   $$1 = $$021;
  } else {
   HEAP32[$vararg_buffer4>>2] = 1000;
   (_fprintf($14,15209,$vararg_buffer4)|0);
   $$1 = 1;
  }
  $60 = HEAP32[19179]|0;
  $61 = $60 | $$1;
  $62 = ($61|0)==(0);
  do {
   if ($62) {
    _actualiza_crono();
    $63 = HEAP32[17]|0;
    $64 = ($63|0)==(0);
    if ($64) {
     _imprime_estado();
     _imprime_crono();
     break;
    } else {
     _imprime_css();
     break;
    }
   }
  } while(0);
  _impulso_reloj();
  $65 = ($$135|0)==(0);
  $66 = HEAP32[19179]|0;
  if ($65) {
   $$021 = $$1;$15 = $66;
  } else {
   break;
  }
 }
 $67 = ($66|0)==(2);
 if ($67) {
  _imprime_final_txt();
 }
 $68 = HEAP32[19179]|0;
 $69 = ($68|0)==(3);
 if ($69) {
  _imprime_inicio_txt();
  _imprime_final_txt();
  _imprime_reg_txt();
  _imprime_memdatos_txt();
  $$pr7 = HEAP32[19179]|0;
  $70 = $$pr7;
 } else {
  $70 = $68;
 }
 $71 = ($70|0)==(0);
 do {
  if ($71) {
   _imprime_final_txt();
   $72 = HEAP32[17]|0;
   $73 = ($72|0)==(0);
   if ($73) {
    _imprime_final();
    break;
   } else {
    _imprime_final_css();
    break;
   }
  }
 } while(0);
 $74 = HEAP32[19179]|0;
 $75 = ($74|0)==(1);
 if (!($75)) {
  STACKTOP = sp;return;
 }
 _imprime_final_txt();
 $76 = HEAP32[17]|0;
 $77 = ($76|0)==(0);
 if ($77) {
  _imprime_final();
  STACKTOP = sp;return;
 } else {
  _imprime_final_css();
  STACKTOP = sp;return;
 }
}
function _init_presentacion() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19175]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 HEAP32[78] = 16;
 HEAP32[79] = 16;
 HEAP32[80] = 24;
 HEAP16[399587] = 16;
 return;
}
function _init_instruc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $leninc = 0, $leninc8 = 0, $strlen = 0, $strlen7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $2 = sp + 128|0;
 $3 = sp;
 $4 = HEAP32[81]|0;
 $5 = HEAP32[78]|0;
 $6 = (($5) + ($4))|0;
 $7 = ($6|0)==($1|0);
 if ($7) {
  _desplazamiento_vertical();
 }
 $8 = HEAP32[81]|0;
 $9 = (($1) - ($8))|0;
 $10 = ($0|0)<(0);
 $11 = $10 << 31 >> 31;
 _te_etiqueta($3,$0,$11,2);
 _imprime_instruccion_color($2,$0,$11,1);
 $12 = (799176 + (($9*2064)|0)|0);
 $strlen = (_strlen($3)|0);
 $leninc = (($strlen) + 1)|0;
 _memcpy(($12|0),($3|0),($leninc|0))|0;
 $13 = (((799176 + (($9*2064)|0)|0)) + 16|0);
 $strlen7 = (_strlen($2)|0);
 $leninc8 = (($strlen7) + 1)|0;
 _memcpy(($13|0),($2|0),($leninc8|0))|0;
 STACKTOP = sp;return;
}
function _desplazamiento_vertical() {
 var $$$0 = 0, $$0$lcssa = 0, $$03238 = 0, $$03446 = 0, $$050 = 0, $$13342 = 0, $$237 = 0, $$lcssa = 0, $$lcssa35 = 0, $$lcssa36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[80]|0;
 $1 = ($0|0)>(0);
 L1: do {
  if ($1) {
   $2 = HEAP32[80]|0;
   $$050 = 0;$4 = 0;
   while(1) {
    $3 = (801384 + ($4<<6)|0);
    $5 = (_strlen($3)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     $$0$lcssa = $$050;$$lcssa36 = $4;
     break L1;
    }
    $7 = (($$050) + 1)<<16>>16;
    $8 = $7 << 16 >> 16;
    $9 = ($8|0)<($2|0);
    if ($9) {
     $$050 = $7;$4 = $8;
    } else {
     $$0$lcssa = $7;$$lcssa36 = $8;
     break;
    }
   }
  } else {
   $$0$lcssa = 0;$$lcssa36 = 0;
  }
 } while(0);
 $10 = HEAP32[80]|0;
 $11 = ($$lcssa36|0)==($10|0);
 $$$0 = $11 ? 1 : $$0$lcssa;
 $12 = HEAP32[78]|0;
 $13 = (($12) + -1)|0;
 $14 = ($12|0)>(1);
 if ($14) {
  $15 = $$$0 << 16 >> 16;
  $$03446 = 0;$17 = 0;
  while(1) {
   $16 = (((799176 + (($17*2064)|0)|0)) + 16|0);
   $18 = (($17) + 1)|0;
   $19 = (((799176 + (($18*2064)|0)|0)) + 16|0);
   (_strcpy($16,$19)|0);
   $20 = (799176 + (($17*2064)|0)|0);
   $21 = (799176 + (($18*2064)|0)|0);
   (_strcpy($20,$21)|0);
   $22 = HEAP32[80]|0;
   $23 = (($22) - ($15))|0;
   $24 = ($23|0)>(0);
   if ($24) {
    $$03238 = 0;$26 = 0;
    while(1) {
     $25 = ((((799176 + (($17*2064)|0)|0)) + 144|0) + ($26<<6)|0);
     $27 = (($26) + ($15))|0;
     $28 = ((((799176 + (($18*2064)|0)|0)) + 144|0) + ($27<<6)|0);
     (_strcpy($25,$28)|0);
     $29 = (($$03238) + 1)<<16>>16;
     $30 = $29 << 16 >> 16;
     $31 = HEAP32[80]|0;
     $32 = (($31) - ($15))|0;
     $33 = ($30|0)<($32|0);
     if ($33) {
      $$03238 = $29;$26 = $30;
     } else {
      $$lcssa = $32;
      break;
     }
    }
   } else {
    $$lcssa = $23;
   }
   $sext = $$lcssa << 16;
   $34 = $sext >> 16;
   $35 = HEAP32[80]|0;
   $36 = ($34|0)<($35|0);
   if ($36) {
    $37 = $$lcssa&65535;
    $38 = HEAP32[80]|0;
    $$13342 = $37;$40 = $34;
    while(1) {
     $39 = ((((799176 + (($17*2064)|0)|0)) + 144|0) + ($40<<6)|0);
     HEAP8[$39>>0] = 0;
     $41 = (($$13342) + 1)<<16>>16;
     $42 = $41 << 16 >> 16;
     $43 = ($42|0)<($38|0);
     if ($43) {
      $$13342 = $41;$40 = $42;
     } else {
      break;
     }
    }
   }
   $44 = (($$03446) + 1)<<16>>16;
   $45 = $44 << 16 >> 16;
   $46 = HEAP32[78]|0;
   $47 = (($46) + -1)|0;
   $48 = ($45|0)<($47|0);
   if ($48) {
    $$03446 = $44;$17 = $45;
   } else {
    $$lcssa35 = $47;
    break;
   }
  }
 } else {
  $$lcssa35 = $13;
 }
 $49 = (((799176 + (($$lcssa35*2064)|0)|0)) + 16|0);
 HEAP8[$49>>0] = 0;
 $50 = (799176 + (($$lcssa35*2064)|0)|0);
 HEAP8[$50>>0] = 0;
 $51 = HEAP32[80]|0;
 $52 = ($51|0)>(0);
 if (!($52)) {
  $59 = $$$0 << 16 >> 16;
  $60 = HEAP32[82]|0;
  $61 = (($60) + ($59))|0;
  HEAP32[82] = $61;
  $62 = HEAP32[81]|0;
  $63 = (($62) + 1)|0;
  HEAP32[81] = $63;
  $64 = HEAP16[399587]|0;
  $65 = $64&65535;
  $66 = (($65) - ($59))|0;
  $67 = $66&65535;
  HEAP16[399587] = $67;
  return;
 }
 $53 = HEAP32[80]|0;
 $$237 = 0;$55 = 0;
 while(1) {
  $54 = ((((799176 + (($$lcssa35*2064)|0)|0)) + 144|0) + ($55<<6)|0);
  HEAP8[$54>>0] = 0;
  $56 = (($$237) + 1)<<16>>16;
  $57 = $56 << 16 >> 16;
  $58 = ($57|0)<($53|0);
  if ($58) {
   $$237 = $56;$55 = $57;
  } else {
   break;
  }
 }
 $59 = $$$0 << 16 >> 16;
 $60 = HEAP32[82]|0;
 $61 = (($60) + ($59))|0;
 HEAP32[82] = $61;
 $62 = HEAP32[81]|0;
 $63 = (($62) + 1)|0;
 HEAP32[81] = $63;
 $64 = HEAP16[399587]|0;
 $65 = $64&65535;
 $66 = (($65) - ($59))|0;
 $67 = $66&65535;
 HEAP16[399587] = $67;
 return;
}
function _actualiza_crono() {
 var $$045 = 0, $$142 = 0, $$239 = 0, $$338 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $leninc24 = 0, $leninc26 = 0, $leninc30 = 0, $leninc32 = 0, $strlen23 = 0, $strlen25 = 0, $strlen29 = 0, $strlen31 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 160|0;
 $1 = sp + 32|0;
 ;HEAP8[$1>>0]=HEAP8[15394>>0]|0;HEAP8[$1+1>>0]=HEAP8[15394+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[15394+2>>0]|0;
 $2 = HEAP32[199574]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  ;HEAP8[$1>>0]=HEAP8[15397>>0]|0;HEAP8[$1+1>>0]=HEAP8[15397+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[15397+2>>0]|0;
 }
 $4 = HEAP32[199577]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $strlen29 = (_strlen($1)|0);
  $leninc30 = (($strlen29) + 1)|0;
  _memcpy(($0|0),($1|0),($leninc30|0))|0;
  $strlen31 = (_strlen($0)|0);
  $leninc32 = (($strlen31) + 1)|0;
  _memcpy(($1|0),($0|0),($leninc32|0))|0;
 }
 $6 = HEAP32[19181]|0;
 _muestra_fase($1,$6);
 $7 = HEAP32[(55168)>>2]|0;
 $8 = ($7|0)==(-1);
 if (!($8)) {
  ;HEAP8[$1>>0]=HEAP8[27528>>0]|0;HEAP8[$1+1>>0]=HEAP8[27528+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[27528+2>>0]|0;
  $9 = HEAP32[199575]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   ;HEAP8[$1>>0]=HEAP8[15400>>0]|0;HEAP8[$1+1>>0]=HEAP8[15400+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[15400+2>>0]|0;
  }
  $11 = HEAP32[199578]|0;
  $12 = ($11|0)==(0);
  if (!($12)) {
   $strlen23 = (_strlen($1)|0);
   $leninc24 = (($strlen23) + 1)|0;
   _memcpy(($0|0),($1|0),($leninc24|0))|0;
   $strlen25 = (_strlen($0)|0);
   $leninc26 = (($strlen25) + 1)|0;
   _memcpy(($1|0),($0|0),($leninc26|0))|0;
  }
  $13 = HEAP32[(55168)>>2]|0;
  _muestra_fase($1,$13);
 }
 $14 = HEAP32[(55552)>>2]|0;
 $15 = ($14|0)==(-1);
 if (!($15)) {
  _muestra_fase(27320,$14);
 }
 $16 = HEAP32[(55920)>>2]|0;
 $17 = ($16|0)==(-1);
 if (!($17)) {
  _muestra_fase(15403,$16);
 }
 $18 = HEAP32[(56272)>>2]|0;
 $19 = ($18|0)==(-1);
 if (!($19)) {
  _muestra_fase(27344,$18);
 }
 $20 = HEAP32[(56832)>>2]|0;
 $21 = ($20|0)==(-1);
 if (!($21)) {
  _muestra_fase(15406,$20);
 }
 $22 = HEAP32[21]|0;
 $23 = ($22|0)<(2);
 if (!($23)) {
  $$045 = 2;
  while(1) {
   $24 = (((58296 + (($$045*200)|0)|0)) + 192|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(-1);
   if (!($26)) {
    HEAP32[$vararg_buffer>>2] = $$045;
    (_sprintf($0,15409,$vararg_buffer)|0);
    $27 = HEAP32[$24>>2]|0;
    _muestra_fase($0,$27);
   }
   $28 = (($$045) + 1)|0;
   $29 = HEAP32[21]|0;
   $30 = ($$045|0)<($29|0);
   if ($30) {
    $$045 = $28;
   } else {
    break;
   }
  }
 }
 $31 = HEAP32[(57456)>>2]|0;
 $32 = ($31|0)==(-1);
 if (!($32)) {
  _muestra_fase(15413,$31);
 }
 $33 = HEAP32[18]|0;
 $34 = ($33|0)<(2);
 if (!($34)) {
  $$142 = 2;
  while(1) {
   $35 = (((62296 + (($$142*200)|0)|0)) + 192|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(-1);
   if (!($37)) {
    HEAP32[$vararg_buffer1>>2] = $$142;
    (_sprintf($0,15416,$vararg_buffer1)|0);
    $38 = HEAP32[$35>>2]|0;
    _muestra_fase($0,$38);
   }
   $39 = (($$142) + 1)|0;
   $40 = HEAP32[18]|0;
   $41 = ($$142|0)<($40|0);
   if ($41) {
    $$142 = $39;
   } else {
    break;
   }
  }
 }
 $42 = HEAP32[(58288)>>2]|0;
 $43 = ($42|0)==(-1);
 if (!($43)) {
  _muestra_fase(15420,$42);
 }
 $44 = HEAP32[20]|0;
 $45 = ($44|0)<(2);
 if (!($45)) {
  $$239 = 2;
  while(1) {
   $46 = (((70296 + (($$239*200)|0)|0)) + 192|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(-1);
   if (!($48)) {
    HEAP32[$vararg_buffer4>>2] = $$239;
    (_sprintf($0,15423,$vararg_buffer4)|0);
    $49 = HEAP32[$46>>2]|0;
    _muestra_fase($0,$49);
   }
   $50 = (($$239) + 1)|0;
   $51 = HEAP32[20]|0;
   $52 = ($$239|0)<($51|0);
   if ($52) {
    $$239 = $50;
   } else {
    break;
   }
  }
 }
 $53 = HEAP32[(57872)>>2]|0;
 $54 = ($53|0)==(-1);
 if (!($54)) {
  _muestra_fase(15427,$53);
 }
 $55 = HEAP32[19]|0;
 $56 = ($55|0)<(2);
 if (!($56)) {
  $$338 = 2;
  while(1) {
   $57 = (((66296 + (($$338*200)|0)|0)) + 192|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(-1);
   if (!($59)) {
    HEAP32[$vararg_buffer7>>2] = $$338;
    (_sprintf($0,15430,$vararg_buffer7)|0);
    $60 = HEAP32[$57>>2]|0;
    _muestra_fase($0,$60);
   }
   $61 = (($$338) + 1)|0;
   $62 = HEAP32[19]|0;
   $63 = ($$338|0)<($62|0);
   if ($63) {
    $$338 = $61;
   } else {
    break;
   }
  }
 }
 $64 = HEAP32[(75632)>>2]|0;
 $65 = ($64|0)==(-1);
 if (!($65)) {
  _muestra_fase(27344,$64);
 }
 $66 = HEAP32[(56624)>>2]|0;
 $67 = ($66|0)==(-1);
 if ($67) {
  STACKTOP = sp;return;
 }
 _muestra_fase(27344,$66);
 STACKTOP = sp;return;
}
function _muestra_fase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[19182]|0;
 $3 = HEAP32[82]|0;
 $4 = HEAP32[80]|0;
 $5 = (($4) + ($3))|0;
 $6 = ($2|0)<($5|0);
 if (!($6)) {
  _desplazamiento_horizontal();
 }
 $7 = HEAP32[81]|0;
 $8 = (($1) - ($7))|0;
 $9 = HEAP32[19182]|0;
 $10 = HEAP32[82]|0;
 $11 = (($9) - ($10))|0;
 $12 = $11 | $8;
 $13 = ($12|0)>(-1);
 if (!($13)) {
  return;
 }
 $14 = ((((799176 + (($8*2064)|0)|0)) + 144|0) + ($11<<6)|0);
 (_strcpy($14,$0)|0);
 $15 = HEAP16[399587]|0;
 $16 = $15 << 16 >> 16;
 $17 = ($11|0)<($16|0);
 if ($17) {
  return;
 }
 $18 = (($11) + 1)|0;
 $19 = $18&65535;
 HEAP16[399587] = $19;
 return;
}
function _desplazamiento_horizontal() {
 var $$01113 = 0, $$012 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[78]|0;
 $1 = ($0|0)>(0);
 if ($1) {
  $$01113 = 0;$5 = 0;
 } else {
  $20 = HEAP32[82]|0;
  $21 = (($20) + 1)|0;
  HEAP32[82] = $21;
  return;
 }
 while(1) {
  $2 = HEAP32[80]|0;
  $3 = ($2|0)>(1);
  $4 = (((799176 + (($5*2064)|0)|0)) + 144|0);
  if ($3) {
   $$012 = 0;$7 = 0;$9 = $4;
   while(1) {
    $6 = (($7) + 1)|0;
    $8 = ((((799176 + (($5*2064)|0)|0)) + 144|0) + ($6<<6)|0);
    (_strcpy($9,$8)|0);
    $10 = (($$012) + 1)<<16>>16;
    $11 = $10 << 16 >> 16;
    $12 = HEAP32[80]|0;
    $13 = (($12) + -1)|0;
    $14 = ($11|0)<($13|0);
    $15 = ((((799176 + (($5*2064)|0)|0)) + 144|0) + ($11<<6)|0);
    if ($14) {
     $$012 = $10;$7 = $11;$9 = $15;
    } else {
     $$lcssa = $15;
     break;
    }
   }
  } else {
   $$lcssa = $4;
  }
  HEAP8[$$lcssa>>0] = 0;
  $16 = (($$01113) + 1)<<16>>16;
  $17 = $16 << 16 >> 16;
  $18 = HEAP32[78]|0;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $$01113 = $16;$5 = $17;
  } else {
   break;
  }
 }
 $20 = HEAP32[82]|0;
 $21 = (($20) + 1)|0;
 HEAP32[82] = $21;
 return;
}
function _imprime_estado() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf($0,15434,$vararg_buffer)|0);
 $2 = (_fopen($0,15451)|0);
 HEAP32[199583] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[482]|0;
  HEAP32[$vararg_buffer1>>2] = $0;
  (_fprintf($4,15453,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  _imprime_intro(15471);
  _imprime_nav2(15478);
  $5 = HEAP32[199583]|0;
  (_fwrite(15485,9,1,$5)|0);
  _imprime_etapas();
  $6 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$6)|0);
  _imprime_senyales();
  $7 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$7)|0);
  _imprime_int_regs();
  $8 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$8)|0);
  _imprime_fp_regs();
  $9 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$9)|0);
  _imprime_Dmem();
  $10 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$10)|0);
  _imprime_footer();
  $11 = HEAP32[199583]|0;
  (_fwrite(15501,15,1,$11)|0);
  $12 = HEAP32[199583]|0;
  (_fclose($12)|0);
  STACKTOP = sp;return;
 }
}
function _imprime_intro($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[199583]|0;
 (_fwrite(18498,16,1,$1)|0);
 $2 = HEAP32[199583]|0;
 $3 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 840457;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 (_fprintf($2,18515,$vararg_buffer)|0);
 $4 = HEAP32[199583]|0;
 (_fwrite(18575,68,1,$4)|0);
 $5 = HEAP32[199583]|0;
 (_fwrite(18644,32,1,$5)|0);
 STACKTOP = sp;return;
}
function _imprime_nav2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer23 = sp + 56|0;
 $vararg_buffer20 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[199583]|0;
 (_fwrite(18099,29,1,$1)|0);
 $2 = HEAP32[199583]|0;
 (_fwrite(18129,38,1,$2)|0);
 $3 = HEAP32[199583]|0;
 (_fwrite(18168,37,1,$3)|0);
 $4 = HEAP32[19182]|0;
 $5 = ($4|0)>(5);
 $6 = HEAP32[199583]|0;
 if ($5) {
  $7 = (($4) + -5)|0;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  (_fprintf($6,18206,$vararg_buffer)|0);
 } else {
  (_fwrite(18245,11,1,$6)|0);
 }
 $8 = HEAP32[19182]|0;
 $9 = ($8|0)>(1);
 $10 = HEAP32[199583]|0;
 if ($9) {
  $11 = (($8) + -1)|0;
  HEAP32[$vararg_buffer2>>2] = $0;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $11;
  (_fprintf($10,18257,$vararg_buffer2)|0);
 } else {
  (_fwrite(18296,5,1,$10)|0);
 }
 $12 = HEAP32[199583]|0;
 $13 = HEAP32[19182]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$vararg_buffer6>>2] = $0;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $14;
 (_fprintf($12,18302,$vararg_buffer6)|0);
 $15 = HEAP32[199583]|0;
 $16 = HEAP32[19182]|0;
 $17 = (($16) + 5)|0;
 HEAP32[$vararg_buffer10>>2] = $0;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = $17;
 (_fprintf($15,18335,$vararg_buffer10)|0);
 $18 = HEAP32[199583]|0;
 (_fwrite(18368,19,1,$18)|0);
 $19 = HEAP32[199583]|0;
 $20 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer14>>2] = $20;
 (_fprintf($19,18388,$vararg_buffer14)|0);
 $21 = HEAP32[199583]|0;
 (_fwrite(18368,19,1,$21)|0);
 $22 = HEAP32[199583]|0;
 $23 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer17>>2] = $23;
 (_fprintf($22,18427,$vararg_buffer17)|0);
 $24 = HEAP32[199583]|0;
 (_fwrite(18368,19,1,$24)|0);
 $25 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer20>>2] = 840457;
 (_fprintf($25,18464,$vararg_buffer20)|0);
 $26 = HEAP32[199583]|0;
 (_fwrite(18368,19,1,$26)|0);
 $27 = HEAP32[199583]|0;
 $28 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer23>>2] = $28;
 (_fprintf($27,18478,$vararg_buffer23)|0);
 STACKTOP = sp;return;
}
function _imprime_etapas() {
 var $$055 = 0, $$151 = 0, $$246 = 0, $$342 = 0, $$437 = 0, $$533 = 0, $$629 = 0, $$728 = 0, $$lcssa = 0, $$lcssa25 = 0, $$lcssa26 = 0, $$lcssa27 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer102 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer121 = 0, $vararg_buffer124 = 0, $vararg_buffer127 = 0, $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer137 = 0, $vararg_buffer140 = 0, $vararg_buffer143 = 0;
 var $vararg_buffer146 = 0, $vararg_buffer149 = 0, $vararg_buffer152 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer62 = 0;
 var $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer87 = 0, $vararg_buffer90 = 0, $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0, $vararg_ptr111 = 0, $vararg_ptr136 = 0, $vararg_ptr61 = 0, $vararg_ptr86 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0;
 $vararg_buffer152 = sp + 400|0;
 $vararg_buffer149 = sp + 392|0;
 $vararg_buffer146 = sp + 384|0;
 $vararg_buffer143 = sp + 376|0;
 $vararg_buffer140 = sp + 368|0;
 $vararg_buffer137 = sp + 360|0;
 $vararg_buffer133 = sp + 352|0;
 $vararg_buffer130 = sp + 344|0;
 $vararg_buffer127 = sp + 336|0;
 $vararg_buffer124 = sp + 328|0;
 $vararg_buffer121 = sp + 320|0;
 $vararg_buffer118 = sp + 312|0;
 $vararg_buffer115 = sp + 304|0;
 $vararg_buffer112 = sp + 296|0;
 $vararg_buffer108 = sp + 288|0;
 $vararg_buffer105 = sp + 280|0;
 $vararg_buffer102 = sp + 272|0;
 $vararg_buffer99 = sp + 264|0;
 $vararg_buffer96 = sp + 256|0;
 $vararg_buffer93 = sp + 248|0;
 $vararg_buffer90 = sp + 240|0;
 $vararg_buffer87 = sp + 232|0;
 $vararg_buffer83 = sp + 224|0;
 $vararg_buffer80 = sp + 216|0;
 $vararg_buffer77 = sp + 208|0;
 $vararg_buffer74 = sp + 200|0;
 $vararg_buffer71 = sp + 192|0;
 $vararg_buffer68 = sp + 184|0;
 $vararg_buffer65 = sp + 176|0;
 $vararg_buffer62 = sp + 168|0;
 $vararg_buffer58 = sp + 160|0;
 $vararg_buffer55 = sp + 152|0;
 $vararg_buffer52 = sp + 144|0;
 $vararg_buffer49 = sp + 136|0;
 $vararg_buffer46 = sp + 128|0;
 $vararg_buffer43 = sp + 120|0;
 $vararg_buffer40 = sp + 112|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 408|0;
 $1 = HEAP32[199583]|0;
 (_fwrite(17258,16,1,$1)|0);
 $2 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$2)|0);
 $3 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15926;
 (_fprintf($3,15762,$vararg_buffer)|0);
 $4 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 80;
 (_fprintf($4,17275,$vararg_buffer1)|0);
 $5 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 90;
 (_fprintf($5,17317,$vararg_buffer4)|0);
 $6 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer7>>2] = 90;
 (_fprintf($6,17355,$vararg_buffer7)|0);
 $7 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer10>>2] = 90;
 (_fprintf($7,17393,$vararg_buffer10)|0);
 $8 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer13>>2] = 90;
 (_fprintf($8,17431,$vararg_buffer13)|0);
 $9 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer16>>2] = 90;
 (_fprintf($9,17470,$vararg_buffer16)|0);
 $10 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$10)|0);
 $11 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer19>>2] = 15958;
 (_fprintf($11,15762,$vararg_buffer19)|0);
 $12 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer22>>2] = 15781;
 (_fprintf($12,17509,$vararg_buffer22)|0);
 $13 = 54832;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 _imprime_instruccion_color($0,$15,$18,1);
 $19 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer25>>2] = $0;
 (_fprintf($19,17541,$vararg_buffer25)|0);
 $20 = (55160);
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 _imprime_instruccion_color($0,$22,$25,1);
 $26 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer28>>2] = $0;
 (_fprintf($26,17541,$vararg_buffer28)|0);
 $27 = (55544);
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + 4)|0;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 _imprime_instruccion_color($0,$29,$32,1);
 $33 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer31>>2] = $0;
 (_fprintf($33,17541,$vararg_buffer31)|0);
 $34 = (55912);
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 _imprime_instruccion_color($0,$36,$39,1);
 $40 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer34>>2] = $0;
 (_fprintf($40,17541,$vararg_buffer34)|0);
 $41 = (56264);
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 _imprime_instruccion_color($0,$43,$46,1);
 $47 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer37>>2] = $0;
 (_fprintf($47,17541,$vararg_buffer37)|0);
 $48 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$48)|0);
 $49 = HEAP32[199583]|0;
 (_fwrite(17554,18,1,$49)|0);
 $50 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer40>>2] = 15926;
 (_fprintf($50,15762,$vararg_buffer40)|0);
 $51 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$51)|0);
 $52 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$52)|0);
 $53 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$53)|0);
 $54 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer43>>2] = 90;
 (_fprintf($54,17606,$vararg_buffer43)|0);
 $55 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$55)|0);
 $56 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer46>>2] = 15958;
 (_fprintf($56,15941,$vararg_buffer46)|0);
 $57 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer49>>2] = 15781;
 (_fprintf($57,17644,$vararg_buffer49)|0);
 $58 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$58)|0);
 $59 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$59)|0);
 $60 = (75960);
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 _imprime_instruccion_color($0,$62,$65,1);
 $66 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer52>>2] = $0;
 (_fprintf($66,17541,$vararg_buffer52)|0);
 $67 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$67)|0);
 $68 = HEAP32[199583]|0;
 (_fwrite(17677,20,1,$68)|0);
 $69 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer55>>2] = 15926;
 (_fprintf($69,15762,$vararg_buffer55)|0);
 $70 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$70)|0);
 $71 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$71)|0);
 $72 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$72)|0);
 $73 = HEAP32[21]|0;
 $74 = ($73|0)<(1);
 $75 = HEAP32[199583]|0;
 if ($74) {
  $$lcssa27 = $75;
 } else {
  $$055 = 1;$76 = 1;$77 = $75;
  while(1) {
   HEAP32[$vararg_buffer58>>2] = 90;
   $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
   HEAP32[$vararg_ptr61>>2] = $76;
   (_fprintf($77,17698,$vararg_buffer58)|0);
   $78 = (($$055) + 1)<<16>>16;
   $79 = $78 << 16 >> 16;
   $80 = HEAP32[21]|0;
   $81 = ($79|0)>($80|0);
   $82 = HEAP32[199583]|0;
   if ($81) {
    $$lcssa27 = $82;
    break;
   } else {
    $$055 = $78;$76 = $79;$77 = $82;
   }
  }
 }
 HEAP32[$vararg_buffer62>>2] = 90;
 (_fprintf($$lcssa27,17736,$vararg_buffer62)|0);
 $83 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$83)|0);
 $84 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer65>>2] = 15958;
 (_fprintf($84,15941,$vararg_buffer65)|0);
 $85 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer68>>2] = 15781;
 (_fprintf($85,17774,$vararg_buffer68)|0);
 $86 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$86)|0);
 $87 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$87)|0);
 $88 = (56824);
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 _imprime_instruccion_color($0,$90,$93,1);
 $94 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer71>>2] = $0;
 (_fprintf($94,17541,$vararg_buffer71)|0);
 $95 = HEAP32[21]|0;
 $96 = ($95|0)<(2);
 if (!($96)) {
  $$151 = 2;$98 = 2;
  while(1) {
   $97 = (((58296 + (($98*200)|0)|0)) + 184|0);
   $99 = $97;
   $100 = $99;
   $101 = HEAP32[$100>>2]|0;
   $102 = (($99) + 4)|0;
   $103 = $102;
   $104 = HEAP32[$103>>2]|0;
   _imprime_instruccion_color($0,$101,$104,1);
   $105 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer74>>2] = $0;
   (_fprintf($105,17541,$vararg_buffer74)|0);
   $106 = (($$151) + 1)<<16>>16;
   $107 = $106 << 16 >> 16;
   $108 = HEAP32[21]|0;
   $109 = ($107|0)>($108|0);
   if ($109) {
    break;
   } else {
    $$151 = $106;$98 = $107;
   }
  }
 }
 $110 = (74616);
 $111 = $110;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($110) + 4)|0;
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 _imprime_instruccion_color($0,$112,$115,1);
 $116 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer77>>2] = $0;
 (_fprintf($116,17541,$vararg_buffer77)|0);
 $117 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$117)|0);
 $118 = HEAP32[199583]|0;
 (_fwrite(17806,15,1,$118)|0);
 $119 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer80>>2] = 15926;
 (_fprintf($119,15762,$vararg_buffer80)|0);
 $120 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$120)|0);
 $121 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$121)|0);
 $122 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$122)|0);
 $123 = HEAP32[18]|0;
 $124 = ($123|0)<(1);
 $125 = HEAP32[199583]|0;
 if ($124) {
  $$lcssa26 = $125;
 } else {
  $$246 = 1;$126 = 1;$127 = $125;
  while(1) {
   HEAP32[$vararg_buffer83>>2] = 90;
   $vararg_ptr86 = ((($vararg_buffer83)) + 4|0);
   HEAP32[$vararg_ptr86>>2] = $126;
   (_fprintf($127,17822,$vararg_buffer83)|0);
   $128 = (($$246) + 1)<<16>>16;
   $129 = $128 << 16 >> 16;
   $130 = HEAP32[18]|0;
   $131 = ($129|0)>($130|0);
   $132 = HEAP32[199583]|0;
   if ($131) {
    $$lcssa26 = $132;
    break;
   } else {
    $$246 = $128;$126 = $129;$127 = $132;
   }
  }
 }
 HEAP32[$vararg_buffer87>>2] = 90;
 (_fprintf($$lcssa26,17736,$vararg_buffer87)|0);
 $133 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$133)|0);
 $134 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer90>>2] = 15958;
 (_fprintf($134,15941,$vararg_buffer90)|0);
 $135 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer93>>2] = 15781;
 (_fprintf($135,17858,$vararg_buffer93)|0);
 $136 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$136)|0);
 $137 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$137)|0);
 $138 = (57448);
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = (($138) + 4)|0;
 $142 = $141;
 $143 = HEAP32[$142>>2]|0;
 _imprime_instruccion_color($0,$140,$143,1);
 $144 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer96>>2] = $0;
 (_fprintf($144,17541,$vararg_buffer96)|0);
 $145 = HEAP32[18]|0;
 $146 = ($145|0)<(2);
 if (!($146)) {
  $$342 = 2;$148 = 2;
  while(1) {
   $147 = (((62296 + (($148*200)|0)|0)) + 184|0);
   $149 = $147;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $152 = (($149) + 4)|0;
   $153 = $152;
   $154 = HEAP32[$153>>2]|0;
   _imprime_instruccion_color($0,$151,$154,1);
   $155 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer99>>2] = $0;
   (_fprintf($155,17541,$vararg_buffer99)|0);
   $156 = (($$342) + 1)<<16>>16;
   $157 = $156 << 16 >> 16;
   $158 = HEAP32[18]|0;
   $159 = ($157|0)>($158|0);
   if ($159) {
    break;
   } else {
    $$342 = $156;$148 = $157;
   }
  }
 }
 $160 = (74952);
 $161 = $160;
 $162 = HEAP32[$161>>2]|0;
 $163 = (($160) + 4)|0;
 $164 = $163;
 $165 = HEAP32[$164>>2]|0;
 _imprime_instruccion_color($0,$162,$165,1);
 $166 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer102>>2] = $0;
 (_fprintf($166,17541,$vararg_buffer102)|0);
 $167 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$167)|0);
 $168 = HEAP32[199583]|0;
 (_fwrite(17890,16,1,$168)|0);
 $169 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer105>>2] = 15926;
 (_fprintf($169,15762,$vararg_buffer105)|0);
 $170 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$170)|0);
 $171 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$171)|0);
 $172 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$172)|0);
 $173 = HEAP32[20]|0;
 $174 = ($173|0)<(1);
 $175 = HEAP32[199583]|0;
 if ($174) {
  $$lcssa25 = $175;
 } else {
  $$437 = 1;$176 = 1;$177 = $175;
  while(1) {
   HEAP32[$vararg_buffer108>>2] = 90;
   $vararg_ptr111 = ((($vararg_buffer108)) + 4|0);
   HEAP32[$vararg_ptr111>>2] = $176;
   (_fprintf($177,17907,$vararg_buffer108)|0);
   $178 = (($$437) + 1)<<16>>16;
   $179 = $178 << 16 >> 16;
   $180 = HEAP32[20]|0;
   $181 = ($179|0)>($180|0);
   $182 = HEAP32[199583]|0;
   if ($181) {
    $$lcssa25 = $182;
    break;
   } else {
    $$437 = $178;$176 = $179;$177 = $182;
   }
  }
 }
 HEAP32[$vararg_buffer112>>2] = 90;
 (_fprintf($$lcssa25,17943,$vararg_buffer112)|0);
 $183 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$183)|0);
 $184 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer115>>2] = 15958;
 (_fprintf($184,15941,$vararg_buffer115)|0);
 $185 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer118>>2] = 15781;
 (_fprintf($185,17982,$vararg_buffer118)|0);
 $186 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$186)|0);
 $187 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$187)|0);
 $188 = (58280);
 $189 = $188;
 $190 = HEAP32[$189>>2]|0;
 $191 = (($188) + 4)|0;
 $192 = $191;
 $193 = HEAP32[$192>>2]|0;
 _imprime_instruccion_color($0,$190,$193,1);
 $194 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer121>>2] = $0;
 (_fprintf($194,17541,$vararg_buffer121)|0);
 $195 = HEAP32[20]|0;
 $196 = ($195|0)<(2);
 if (!($196)) {
  $$533 = 2;$198 = 2;
  while(1) {
   $197 = (((70296 + (($198*200)|0)|0)) + 184|0);
   $199 = $197;
   $200 = $199;
   $201 = HEAP32[$200>>2]|0;
   $202 = (($199) + 4)|0;
   $203 = $202;
   $204 = HEAP32[$203>>2]|0;
   _imprime_instruccion_color($0,$201,$204,1);
   $205 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer124>>2] = $0;
   (_fprintf($205,17541,$vararg_buffer124)|0);
   $206 = (($$533) + 1)<<16>>16;
   $207 = $206 << 16 >> 16;
   $208 = HEAP32[20]|0;
   $209 = ($207|0)>($208|0);
   if ($209) {
    break;
   } else {
    $$533 = $206;$198 = $207;
   }
  }
 }
 $210 = (56616);
 $211 = $210;
 $212 = HEAP32[$211>>2]|0;
 $213 = (($210) + 4)|0;
 $214 = $213;
 $215 = HEAP32[$214>>2]|0;
 _imprime_instruccion_color($0,$212,$215,1);
 $216 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer127>>2] = $0;
 (_fprintf($216,17541,$vararg_buffer127)|0);
 $217 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$217)|0);
 $218 = HEAP32[199583]|0;
 (_fwrite(18014,16,1,$218)|0);
 $219 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer130>>2] = 15926;
 (_fprintf($219,15762,$vararg_buffer130)|0);
 $220 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$220)|0);
 $221 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$221)|0);
 $222 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$222)|0);
 $223 = HEAP32[19]|0;
 $224 = ($223|0)<(1);
 $225 = HEAP32[199583]|0;
 if ($224) {
  $$lcssa = $225;
 } else {
  $$629 = 1;$226 = 1;$227 = $225;
  while(1) {
   HEAP32[$vararg_buffer133>>2] = 90;
   $vararg_ptr136 = ((($vararg_buffer133)) + 4|0);
   HEAP32[$vararg_ptr136>>2] = $226;
   (_fprintf($227,18031,$vararg_buffer133)|0);
   $228 = (($$629) + 1)<<16>>16;
   $229 = $228 << 16 >> 16;
   $230 = HEAP32[19]|0;
   $231 = ($229|0)>($230|0);
   $232 = HEAP32[199583]|0;
   if ($231) {
    $$lcssa = $232;
    break;
   } else {
    $$629 = $228;$226 = $229;$227 = $232;
   }
  }
 }
 HEAP32[$vararg_buffer137>>2] = 90;
 (_fprintf($$lcssa,17736,$vararg_buffer137)|0);
 $233 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$233)|0);
 $234 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer140>>2] = 15958;
 (_fprintf($234,15941,$vararg_buffer140)|0);
 $235 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer143>>2] = 15781;
 (_fprintf($235,18067,$vararg_buffer143)|0);
 $236 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$236)|0);
 $237 = HEAP32[199583]|0;
 (_fwrite(17573,32,1,$237)|0);
 $238 = (57864);
 $239 = $238;
 $240 = HEAP32[$239>>2]|0;
 $241 = (($238) + 4)|0;
 $242 = $241;
 $243 = HEAP32[$242>>2]|0;
 _imprime_instruccion_color($0,$240,$243,1);
 $244 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer146>>2] = $0;
 (_fprintf($244,17541,$vararg_buffer146)|0);
 $245 = HEAP32[19]|0;
 $246 = ($245|0)<(2);
 if ($246) {
  $260 = (75288);
  $261 = $260;
  $262 = HEAP32[$261>>2]|0;
  $263 = (($260) + 4)|0;
  $264 = $263;
  $265 = HEAP32[$264>>2]|0;
  _imprime_instruccion_color($0,$262,$265,1);
  $266 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer152>>2] = $0;
  (_fprintf($266,17541,$vararg_buffer152)|0);
  $267 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$267)|0);
  $268 = HEAP32[199583]|0;
  (_fwrite(16689,10,1,$268)|0);
  $269 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$269)|0);
  STACKTOP = sp;return;
 } else {
  $$728 = 2;$248 = 2;
 }
 while(1) {
  $247 = (((66296 + (($248*200)|0)|0)) + 184|0);
  $249 = $247;
  $250 = $249;
  $251 = HEAP32[$250>>2]|0;
  $252 = (($249) + 4)|0;
  $253 = $252;
  $254 = HEAP32[$253>>2]|0;
  _imprime_instruccion_color($0,$251,$254,1);
  $255 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer149>>2] = $0;
  (_fprintf($255,17541,$vararg_buffer149)|0);
  $256 = (($$728) + 1)<<16>>16;
  $257 = $256 << 16 >> 16;
  $258 = HEAP32[19]|0;
  $259 = ($257|0)>($258|0);
  if ($259) {
   break;
  } else {
   $$728 = $256;$248 = $257;
  }
 }
 $260 = (75288);
 $261 = $260;
 $262 = HEAP32[$261>>2]|0;
 $263 = (($260) + 4)|0;
 $264 = $263;
 $265 = HEAP32[$264>>2]|0;
 _imprime_instruccion_color($0,$262,$265,1);
 $266 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer152>>2] = $0;
 (_fprintf($266,17541,$vararg_buffer152)|0);
 $267 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$267)|0);
 $268 = HEAP32[199583]|0;
 (_fwrite(16689,10,1,$268)|0);
 $269 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$269)|0);
 STACKTOP = sp;return;
}
function _imprime_senyales() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer14 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[199583]|0;
 (_fwrite(16952,26,1,$0)|0);
 $1 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$1)|0);
 $2 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15958;
 (_fprintf($2,15762,$vararg_buffer)|0);
 $3 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 80;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = 15781;
 (_fprintf($3,16979,$vararg_buffer1)|0);
 $4 = HEAP32[199574]|0;
 _muestra_senyal($4,17020);
 $5 = HEAP32[199575]|0;
 _muestra_senyal($5,17028);
 $6 = HEAP32[199571]|0;
 _muestra_senyal($6,17036);
 $7 = HEAP32[199572]|0;
 _muestra_senyal($7,17040);
 $8 = HEAP32[199573]|0;
 _muestra_senyal($8,17044);
 _muestra_senyal(0,17055);
 $9 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$9)|0);
 $10 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer5>>2] = 15958;
 (_fprintf($10,15941,$vararg_buffer5)|0);
 $11 = HEAP32[199583]|0;
 (_fwrite(17057,34,1,$11)|0);
 $12 = HEAP32[199577]|0;
 _muestra_senyal($12,17092);
 $13 = HEAP32[199578]|0;
 _muestra_senyal($13,17098);
 $14 = HEAP32[199579]|0;
 _muestra_senyal($14,17104);
 _muestra_senyal(0,17055);
 _muestra_senyal(0,17055);
 _muestra_senyal(0,17055);
 $15 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$15)|0);
 $16 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer8>>2] = 15958;
 (_fprintf($16,15941,$vararg_buffer8)|0);
 $17 = HEAP32[199583]|0;
 (_fwrite(17057,34,1,$17)|0);
 $18 = HEAP32[199560]|0;
 $19 = HEAP32[199559]|0;
 $20 = $19 | $18;
 $21 = ($20|0)!=(0);
 $22 = $21&1;
 _muestra_senyal($22,17110);
 $23 = HEAP32[199550]|0;
 $24 = HEAP32[199549]|0;
 $25 = $24 | $23;
 $26 = ($25|0)!=(0);
 $27 = $26&1;
 _muestra_senyal($27,17121);
 $28 = HEAP32[199552]|0;
 $29 = HEAP32[199551]|0;
 $30 = $29 | $28;
 $31 = ($30|0)!=(0);
 $32 = $31&1;
 _muestra_senyal($32,17128);
 $33 = HEAP32[199561]|0;
 _muestra_senyal($33,17140);
 _muestra_senyal(0,17055);
 _muestra_senyal(0,17055);
 $34 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$34)|0);
 $35 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer11>>2] = 15958;
 (_fprintf($35,15941,$vararg_buffer11)|0);
 $36 = HEAP32[199583]|0;
 (_fwrite(17057,34,1,$36)|0);
 _muestra_senyal(0,17055);
 $37 = HEAP32[199554]|0;
 $38 = HEAP32[199553]|0;
 $39 = $38 | $37;
 $40 = ($39|0)!=(0);
 $41 = $40&1;
 _muestra_senyal($41,17148);
 $42 = HEAP32[199556]|0;
 $43 = HEAP32[199555]|0;
 $44 = $43 | $42;
 $45 = ($44|0)!=(0);
 $46 = $45&1;
 _muestra_senyal($46,17154);
 $47 = HEAP32[199557]|0;
 _muestra_senyal($47,17165);
 $48 = HEAP32[199558]|0;
 _muestra_senyal($48,17175);
 $49 = HEAP32[199562]|0;
 _muestra_senyal($49,17183);
 $50 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$50)|0);
 $51 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer14>>2] = 15958;
 (_fprintf($51,15941,$vararg_buffer14)|0);
 $52 = HEAP32[199583]|0;
 (_fwrite(17057,34,1,$52)|0);
 $53 = HEAP32[199567]|0;
 _muestra_senyal($53,17190);
 $54 = HEAP32[199564]|0;
 $55 = HEAP32[199563]|0;
 $56 = $55 | $54;
 $57 = ($56|0)!=(0);
 $58 = $57&1;
 _muestra_senyal($58,17197);
 $59 = HEAP32[199566]|0;
 $60 = HEAP32[199565]|0;
 $61 = $60 | $59;
 $62 = ($61|0)!=(0);
 $63 = $62&1;
 _muestra_senyal($63,17204);
 $64 = HEAP32[199569]|0;
 $65 = HEAP32[199568]|0;
 $66 = $65 | $64;
 $67 = ($66|0)!=(0);
 $68 = $67&1;
 _muestra_senyal($68,17211);
 $69 = HEAP32[199570]|0;
 _muestra_senyal($69,17218);
 _muestra_senyal(0,17055);
 $70 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$70)|0);
 $71 = HEAP32[199583]|0;
 (_fwrite(16689,10,1,$71)|0);
 STACKTOP = sp;return;
}
function _imprime_int_regs() {
 var $$ = 0, $$03336 = 0, $$138 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr30 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 116|0;
 $1 = sp + 96|0;
 $2 = (55160);
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 _color_instruccion($0,$4,$7);
 $8 = (56264);
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 _color_instruccion($1,$10,$13);
 $14 = HEAP32[199583]|0;
 (_fwrite(16700,27,1,$14)|0);
 $15 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$15)|0);
 $16 = HEAP32[199583]|0;
 $17 = $16;$20 = 0;
 while(1) {
  (_fwrite(16232,5,1,$17)|0);
  $18 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer>>2] = 60;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 15781;
  (_fprintf($18,16728,$vararg_buffer)|0);
  $19 = (32 - ($20))|0;
  $21 = ($19|0)<(16);
  $$ = $21 ? $19 : 16;
  $22 = ($19|0)>(0);
  $23 = HEAP32[199583]|0;
  if ($22) {
   $$03336 = 0;$25 = 0;$26 = $23;
   while(1) {
    $24 = (($25) + ($20))|0;
    HEAP32[$vararg_buffer2>>2] = 15926;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $24;
    (_fprintf($26,16765,$vararg_buffer2)|0);
    $27 = (($$03336) + 1)<<16>>16;
    $28 = $27 << 16 >> 16;
    $29 = ($28|0)<($$|0);
    $30 = HEAP32[199583]|0;
    if ($29) {
     $$03336 = $27;$25 = $28;$26 = $30;
    } else {
     $$lcssa = $30;
     break;
    }
   }
  } else {
   $$lcssa = $23;
  }
  (_fwrite(15934,6,1,$$lcssa)|0);
  $31 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer6>>2] = 15958;
  (_fprintf($31,15762,$vararg_buffer6)|0);
  $32 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer9>>2] = 16343;
  (_fprintf($32,16314,$vararg_buffer9)|0);
  $33 = ($19|0)>(0);
  if ($33) {
   $$138 = 0;$39 = 0;
   while(1) {
    $34 = (_hay_destino_WB()|0);
    $35 = ($34|0)==(0);
    L10: do {
     if ($35) {
      label = 13;
     } else {
      $36 = HEAP8[(56114)>>0]|0;
      $37 = $36&255;
      $38 = (($39) + ($20))|0;
      $40 = ($37|0)==($38|0);
      if ($40) {
       $41 = (_hay_fuente1_ID()|0);
       $42 = ($41|0)==(0);
       if ($42) {
        label = 9;
       } else {
        $43 = HEAP8[(55016)>>0]|0;
        $44 = $43&255;
        $45 = ($44|0)==($38|0);
        if (!($45)) {
         label = 9;
        }
       }
       do {
        if ((label|0) == 9) {
         label = 0;
         $46 = (_hay_fuente2_ID()|0);
         $47 = ($46|0)==(0);
         if (!($47)) {
          $48 = HEAP8[(55017)>>0]|0;
          $49 = $48&255;
          $50 = ($49|0)==($38|0);
          if ($50) {
           break;
          }
         }
         $63 = HEAP32[199583]|0;
         $64 = (54032 + ($38<<3)|0);
         $65 = $64;
         $66 = $65;
         $67 = HEAP32[$66>>2]|0;
         $68 = (($65) + 4)|0;
         $69 = $68;
         $70 = HEAP32[$69>>2]|0;
         HEAP32[$vararg_buffer17>>2] = 60;
         $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
         HEAP32[$vararg_ptr20>>2] = $1;
         $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
         $71 = $vararg_ptr21;
         $72 = $71;
         HEAP32[$72>>2] = $67;
         $73 = (($71) + 4)|0;
         $74 = $73;
         HEAP32[$74>>2] = $70;
         (_fprintf($63,16863,$vararg_buffer17)|0);
         break L10;
        }
       } while(0);
       $51 = HEAP32[199583]|0;
       $52 = (54032 + ($38<<3)|0);
       $53 = $52;
       $54 = $53;
       $55 = HEAP32[$54>>2]|0;
       $56 = (($53) + 4)|0;
       $57 = $56;
       $58 = HEAP32[$57>>2]|0;
       HEAP32[$vararg_buffer12>>2] = 60;
       $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
       HEAP32[$vararg_ptr15>>2] = 16409;
       $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
       $59 = $vararg_ptr16;
       $60 = $59;
       HEAP32[$60>>2] = $55;
       $61 = (($59) + 4)|0;
       $62 = $61;
       HEAP32[$62>>2] = $58;
       (_fprintf($51,16805,$vararg_buffer12)|0);
      } else {
       label = 13;
      }
     }
    } while(0);
    L21: do {
     if ((label|0) == 13) {
      label = 0;
      $75 = (_hay_fuente1_ID()|0);
      $76 = ($75|0)==(0);
      if ($76) {
       label = 15;
      } else {
       $77 = HEAP8[(55016)>>0]|0;
       $78 = $77&255;
       $79 = (($39) + ($20))|0;
       $80 = ($78|0)==($79|0);
       if (!($80)) {
        label = 15;
       }
      }
      do {
       if ((label|0) == 15) {
        label = 0;
        $81 = (_hay_fuente2_ID()|0);
        $82 = ($81|0)==(0);
        $83 = (($39) + ($20))|0;
        if (!($82)) {
         $84 = HEAP8[(55017)>>0]|0;
         $85 = $84&255;
         $86 = ($85|0)==($83|0);
         if ($86) {
          break;
         }
        }
        $100 = HEAP32[199583]|0;
        $101 = (54032 + ($83<<3)|0);
        $102 = $101;
        $103 = $102;
        $104 = HEAP32[$103>>2]|0;
        $105 = (($102) + 4)|0;
        $106 = $105;
        $107 = HEAP32[$106>>2]|0;
        HEAP32[$vararg_buffer27>>2] = 60;
        $vararg_ptr30 = ((($vararg_buffer27)) + 8|0);
        $108 = $vararg_ptr30;
        $109 = $108;
        HEAP32[$109>>2] = $104;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $107;
        (_fprintf($100,16914,$vararg_buffer27)|0);
        break L21;
       }
      } while(0);
      $87 = HEAP32[199583]|0;
      $88 = (($39) + ($20))|0;
      $89 = (54032 + ($88<<3)|0);
      $90 = $89;
      $91 = $90;
      $92 = HEAP32[$91>>2]|0;
      $93 = (($90) + 4)|0;
      $94 = $93;
      $95 = HEAP32[$94>>2]|0;
      HEAP32[$vararg_buffer22>>2] = 60;
      $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
      HEAP32[$vararg_ptr25>>2] = $0;
      $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
      $96 = $vararg_ptr26;
      $97 = $96;
      HEAP32[$97>>2] = $92;
      $98 = (($96) + 4)|0;
      $99 = $98;
      HEAP32[$99>>2] = $95;
      (_fprintf($87,16863,$vararg_buffer22)|0);
     }
    } while(0);
    $112 = (($$138) + 1)<<16>>16;
    $113 = $112 << 16 >> 16;
    $114 = ($113|0)<($$|0);
    if ($114) {
     $$138 = $112;$39 = $113;
    } else {
     break;
    }
   }
  }
  $115 = $20 << 16;
  $sext = (($115) + 1048576)|0;
  $116 = $sext >> 16;
  $117 = ($sext|0)<(2097152);
  $118 = HEAP32[199583]|0;
  if ($117) {
   $17 = $118;$20 = $116;
  } else {
   break;
  }
 }
 (_fwrite(15934,6,1,$118)|0);
 $119 = HEAP32[199583]|0;
 (_fwrite(16689,10,1,$119)|0);
 STACKTOP = sp;return;
}
function _imprime_fp_regs() {
 var $$ = 0, $$03339 = 0, $$141 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $switch = 0, $switch37 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer53 = 0, $vararg_buffer57 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr37 = 0, $vararg_ptr44 = 0, $vararg_ptr48 = 0;
 var $vararg_ptr5 = 0, $vararg_ptr52 = 0, $vararg_ptr56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $vararg_buffer57 = sp + 176|0;
 $vararg_buffer53 = sp + 160|0;
 $vararg_buffer49 = sp + 144|0;
 $vararg_buffer45 = sp + 128|0;
 $vararg_buffer41 = sp + 120|0;
 $vararg_buffer38 = sp + 112|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer31 = sp + 96|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 224|0;
 $1 = sp + 204|0;
 $2 = sp + 184|0;
 $3 = (55160);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 _color_instruccion($0,$5,$8);
 $9 = (75624);
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 _color_instruccion($1,$11,$14);
 $15 = (56616);
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 _color_instruccion($2,$17,$20);
 $21 = HEAP32[199583]|0;
 (_fwrite(16209,22,1,$21)|0);
 $22 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$22)|0);
 $23 = HEAP32[199583]|0;
 $24 = $23;$27 = 0;
 while(1) {
  (_fwrite(16232,5,1,$24)|0);
  $25 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer>>2] = 60;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 15781;
  (_fprintf($25,16238,$vararg_buffer)|0);
  $26 = (32 - ($27))|0;
  $28 = ($26|0)<(16);
  $$ = $28 ? $26 : 16;
  $29 = ($26|0)>(0);
  $30 = HEAP32[199583]|0;
  if ($29) {
   $$03339 = 0;$32 = 0;$33 = $30;
   while(1) {
    $31 = (($32) + ($27))|0;
    HEAP32[$vararg_buffer2>>2] = 15926;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $31;
    (_fprintf($33,16274,$vararg_buffer2)|0);
    $34 = (($$03339) + 1)<<16>>16;
    $35 = $34 << 16 >> 16;
    $36 = ($35|0)<($$|0);
    $37 = HEAP32[199583]|0;
    if ($36) {
     $$03339 = $34;$32 = $35;$33 = $37;
    } else {
     $$lcssa = $37;
     break;
    }
   }
  } else {
   $$lcssa = $30;
  }
  (_fwrite(15934,6,1,$$lcssa)|0);
  $38 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer6>>2] = 15958;
  (_fprintf($38,15762,$vararg_buffer6)|0);
  $39 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer9>>2] = 16343;
  (_fprintf($39,16314,$vararg_buffer9)|0);
  $40 = ($26|0)>(0);
  if ($40) {
   $$141 = 0;$46 = 0;
   while(1) {
    $41 = (_hay_destino_FP_WB()|0);
    $42 = ($41|0)==(0);
    L10: do {
     if ($42) {
      label = 13;
     } else {
      $43 = HEAP8[(75482)>>0]|0;
      $44 = $43&255;
      $45 = (($46) + ($27))|0;
      $47 = ($44|0)==($45|0);
      if ($47) {
       $48 = (_hay_fuente1_FP_ID()|0);
       $49 = ($48|0)==(0);
       if ($49) {
        label = 9;
       } else {
        $50 = HEAP8[(55016)>>0]|0;
        $51 = $50&255;
        $52 = ($51|0)==($45|0);
        if (!($52)) {
         label = 9;
        }
       }
       do {
        if ((label|0) == 9) {
         label = 0;
         $53 = (_hay_fuente2_FP_ID()|0);
         $54 = ($53|0)==(0);
         if (!($54)) {
          $55 = HEAP8[(55017)>>0]|0;
          $56 = $55&255;
          $57 = ($56|0)==($45|0);
          if ($57) {
           break;
          }
         }
         $61 = HEAP32[199583]|0;
         $62 = (54296 + ($45<<4)|0);
         $63 = +HEAPF64[$62>>3];
         HEAP32[$vararg_buffer17>>2] = 60;
         $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
         HEAP32[$vararg_ptr20>>2] = $1;
         $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
         HEAPF64[$vararg_ptr21>>3] = $63;
         (_fprintf($61,16416,$vararg_buffer17)|0);
         break L10;
        }
       } while(0);
       $58 = HEAP32[199583]|0;
       $59 = (54296 + ($45<<4)|0);
       $60 = +HEAPF64[$59>>3];
       HEAP32[$vararg_buffer12>>2] = 60;
       $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
       HEAP32[$vararg_ptr15>>2] = 16409;
       $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
       HEAPF64[$vararg_ptr16>>3] = $60;
       (_fprintf($58,16349,$vararg_buffer12)|0);
      } else {
       label = 13;
      }
     }
    } while(0);
    L21: do {
     if ((label|0) == 13) {
      label = 0;
      $64 = (_hay_fuente1_FP_ID()|0);
      $65 = ($64|0)==(0);
      if ($65) {
       label = 15;
      } else {
       $66 = HEAP8[(55016)>>0]|0;
       $67 = $66&255;
       $68 = (($46) + ($27))|0;
       $69 = ($67|0)==($68|0);
       if (!($69)) {
        label = 15;
       }
      }
      do {
       if ((label|0) == 15) {
        label = 0;
        $70 = (_hay_fuente2_FP_ID()|0);
        $71 = ($70|0)==(0);
        $72 = (($46) + ($27))|0;
        if (!($71)) {
         $73 = HEAP8[(55017)>>0]|0;
         $74 = $73&255;
         $75 = ($74|0)==($72|0);
         if ($75) {
          break;
         }
        }
        $80 = HEAP32[199583]|0;
        $81 = (54296 + ($72<<4)|0);
        $82 = +HEAPF64[$81>>3];
        HEAP32[$vararg_buffer27>>2] = 60;
        $vararg_ptr30 = ((($vararg_buffer27)) + 8|0);
        HEAPF64[$vararg_ptr30>>3] = $82;
        (_fprintf($80,16469,$vararg_buffer27)|0);
        break L21;
       }
      } while(0);
      $76 = HEAP32[199583]|0;
      $77 = (($46) + ($27))|0;
      $78 = (54296 + ($77<<4)|0);
      $79 = +HEAPF64[$78>>3];
      HEAP32[$vararg_buffer22>>2] = 60;
      $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
      HEAP32[$vararg_ptr25>>2] = $0;
      $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
      HEAPF64[$vararg_ptr26>>3] = $79;
      (_fprintf($76,16416,$vararg_buffer22)|0);
     }
    } while(0);
    $83 = (($$141) + 1)<<16>>16;
    $84 = $83 << 16 >> 16;
    $85 = ($84|0)<($$|0);
    if ($85) {
     $$141 = $83;$46 = $84;
    } else {
     break;
    }
   }
  }
  $86 = $27 << 16;
  $sext = (($86) + 1048576)|0;
  $87 = $sext >> 16;
  $88 = ($sext|0)<(2097152);
  $89 = HEAP32[199583]|0;
  if ($88) {
   $24 = $89;$27 = $87;
  } else {
   break;
  }
 }
 HEAP32[$vararg_buffer31>>2] = 15926;
 (_fprintf($89,15762,$vararg_buffer31)|0);
 $90 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer34>>2] = 60;
 $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
 HEAP32[$vararg_ptr37>>2] = 15781;
 (_fprintf($90,16238,$vararg_buffer34)|0);
 $91 = HEAP32[199583]|0;
 (_fwrite(16509,27,1,$91)|0);
 $92 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$92)|0);
 $93 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer38>>2] = 15958;
 (_fprintf($93,15941,$vararg_buffer38)|0);
 $94 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer41>>2] = 60;
 $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
 HEAP32[$vararg_ptr44>>2] = 16343;
 (_fprintf($94,16537,$vararg_buffer41)|0);
 $95 = HEAP8[(56466)>>0]|0;
 $96 = ($95<<24>>24)==(32);
 $97 = HEAP8[55008]|0;
 $98 = (54288);
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($98) + 4)|0;
 $102 = $101;
 $103 = HEAP32[$102>>2]|0;
 if ($96) {
  $104 = $97 & -2;
  $switch = ($104<<24>>24)==(104);
  $105 = HEAP32[199583]|0;
  if ($switch) {
   HEAP32[$vararg_buffer45>>2] = 16409;
   $vararg_ptr48 = ((($vararg_buffer45)) + 8|0);
   $106 = $vararg_ptr48;
   $107 = $106;
   HEAP32[$107>>2] = $100;
   $108 = (($106) + 4)|0;
   $109 = $108;
   HEAP32[$109>>2] = $103;
   (_fprintf($105,16575,$vararg_buffer45)|0);
   $124 = HEAP32[199583]|0;
   (_fwrite(15934,6,1,$124)|0);
   $125 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$125)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer49>>2] = $2;
   $vararg_ptr52 = ((($vararg_buffer49)) + 8|0);
   $110 = $vararg_ptr52;
   $111 = $110;
   HEAP32[$111>>2] = $100;
   $112 = (($110) + 4)|0;
   $113 = $112;
   HEAP32[$113>>2] = $103;
   (_fprintf($105,16622,$vararg_buffer49)|0);
   $124 = HEAP32[199583]|0;
   (_fwrite(15934,6,1,$124)|0);
   $125 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$125)|0);
   STACKTOP = sp;return;
  }
 } else {
  $114 = HEAP32[199583]|0;
  $115 = $97 & -2;
  $switch37 = ($115<<24>>24)==(104);
  if ($switch37) {
   HEAP32[$vararg_buffer53>>2] = $0;
   $vararg_ptr56 = ((($vararg_buffer53)) + 8|0);
   $116 = $vararg_ptr56;
   $117 = $116;
   HEAP32[$117>>2] = $100;
   $118 = (($116) + 4)|0;
   $119 = $118;
   HEAP32[$119>>2] = $103;
   (_fprintf($114,16622,$vararg_buffer53)|0);
   $124 = HEAP32[199583]|0;
   (_fwrite(15934,6,1,$124)|0);
   $125 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$125)|0);
   STACKTOP = sp;return;
  } else {
   $120 = $vararg_buffer57;
   $121 = $120;
   HEAP32[$121>>2] = $100;
   $122 = (($120) + 4)|0;
   $123 = $122;
   HEAP32[$123>>2] = $103;
   (_fprintf($114,16662,$vararg_buffer57)|0);
   $124 = HEAP32[199583]|0;
   (_fwrite(15934,6,1,$124)|0);
   $125 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$125)|0);
   STACKTOP = sp;return;
  }
 }
}
function _imprime_Dmem() {
 var $$126 = 0, $$330 = 0, $$lcssa24 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0;
 var $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer111 = 0, $vararg_buffer115 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer58 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer69 = 0, $vararg_buffer73 = 0;
 var $vararg_buffer77 = 0, $vararg_buffer81 = 0, $vararg_buffer85 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer93 = 0, $vararg_buffer97 = 0, $vararg_ptr103 = 0, $vararg_ptr110 = 0, $vararg_ptr114 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0;
 var $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr50 = 0, $vararg_ptr57 = 0, $vararg_ptr61 = 0, $vararg_ptr68 = 0, $vararg_ptr7 = 0, $vararg_ptr72 = 0, $vararg_ptr76 = 0, $vararg_ptr8 = 0, $vararg_ptr80 = 0, $vararg_ptr84 = 0, $vararg_ptr88 = 0, $vararg_ptr92 = 0, $vararg_ptr96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $vararg_buffer115 = sp + 296|0;
 $vararg_buffer111 = sp + 288|0;
 $vararg_buffer107 = sp + 280|0;
 $vararg_buffer104 = sp + 272|0;
 $vararg_buffer100 = sp + 264|0;
 $vararg_buffer97 = sp + 256|0;
 $vararg_buffer93 = sp + 248|0;
 $vararg_buffer89 = sp + 240|0;
 $vararg_buffer85 = sp + 232|0;
 $vararg_buffer81 = sp + 224|0;
 $vararg_buffer77 = sp + 216|0;
 $vararg_buffer73 = sp + 208|0;
 $vararg_buffer69 = sp + 200|0;
 $vararg_buffer65 = sp + 192|0;
 $vararg_buffer62 = sp + 184|0;
 $vararg_buffer58 = sp + 176|0;
 $vararg_buffer54 = sp + 168|0;
 $vararg_buffer51 = sp + 160|0;
 $vararg_buffer47 = sp + 152|0;
 $vararg_buffer44 = sp + 144|0;
 $vararg_buffer39 = sp + 128|0;
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 344|0;
 $1 = sp + 320|0;
 $2 = sp + 300|0;
 $3 = (55912);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 _color_instruccion($1,$5,$8);
 $9 = HEAP32[21]|0;
 $10 = (((58296 + (($9*200)|0)|0)) + 184|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 _color_instruccion($2,$13,$16);
 $17 = HEAP32[199583]|0;
 (_fwrite(15733,19,1,$17)|0);
 $18 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$18)|0);
 $19 = HEAP32[19168]|0;
 $20 = ($19|0)==(0);
 $21 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15781;
 (_fprintf($21,15762,$vararg_buffer)|0);
 $22 = HEAP32[199583]|0;
 (_fwrite(15789,53,1,$22)|0);
 $23 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 15781;
 (_fprintf($23,15762,$vararg_buffer1)|0);
 $24 = HEAP32[199583]|0;
 if ($20) {
  (_fwrite(15843,30,1,$24)|0);
  $25 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer4>>2] = 50;
  $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = 15926;
  $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = 0;
  (_fprintf($25,15874,$vararg_buffer4)|0);
  $26 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer9>>2] = 50;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 15926;
  $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
  HEAP32[$vararg_ptr13>>2] = 8;
  (_fprintf($26,15874,$vararg_buffer9)|0);
  $27 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer14>>2] = 50;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = 15926;
  $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
  HEAP32[$vararg_ptr18>>2] = 16;
  (_fprintf($27,15874,$vararg_buffer14)|0);
  $28 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer19>>2] = 50;
  $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
  HEAP32[$vararg_ptr22>>2] = 15926;
  $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
  HEAP32[$vararg_ptr23>>2] = 24;
  (_fprintf($28,15874,$vararg_buffer19)|0);
  $29 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer24>>2] = 50;
  $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
  HEAP32[$vararg_ptr27>>2] = 15926;
  $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
  HEAP32[$vararg_ptr28>>2] = 32;
  (_fprintf($29,15874,$vararg_buffer24)|0);
  $30 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer29>>2] = 50;
  $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
  HEAP32[$vararg_ptr32>>2] = 15926;
  $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
  HEAP32[$vararg_ptr33>>2] = 40;
  (_fprintf($30,15874,$vararg_buffer29)|0);
  $31 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer34>>2] = 50;
  $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
  HEAP32[$vararg_ptr37>>2] = 15926;
  $vararg_ptr38 = ((($vararg_buffer34)) + 8|0);
  HEAP32[$vararg_ptr38>>2] = 48;
  (_fprintf($31,15874,$vararg_buffer34)|0);
  $32 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer39>>2] = 50;
  $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
  HEAP32[$vararg_ptr42>>2] = 15926;
  $vararg_ptr43 = ((($vararg_buffer39)) + 8|0);
  HEAP32[$vararg_ptr43>>2] = 56;
  (_fprintf($32,15874,$vararg_buffer39)|0);
  $33 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$33)|0);
  $34 = HEAP32[19190]|0;
  $35 = HEAP32[(76764)>>2]|0;
  $36 = ($34|0)<($35|0);
  L3: do {
   if ($36) {
    $$126 = $34;
    while(1) {
     $37 = $$126 >>> 3;
     $38 = $37 & 7;
     $39 = ($38|0)==(0);
     if ($39) {
      $40 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer44>>2] = 15958;
      (_fprintf($40,15941,$vararg_buffer44)|0);
      $41 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer47>>2] = 16004;
      $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
      HEAP32[$vararg_ptr50>>2] = $$126;
      (_fprintf($41,15966,$vararg_buffer47)|0);
     }
     $42 = (37648 + ($37<<3)|0);
     $43 = $42;
     $44 = $43;
     $45 = HEAP32[$44>>2]|0;
     $46 = (($43) + 4)|0;
     $47 = $46;
     $48 = HEAP32[$47>>2]|0;
     $49 = $vararg_buffer51;
     $50 = $49;
     HEAP32[$50>>2] = $45;
     $51 = (($49) + 4)|0;
     $52 = $51;
     HEAP32[$52>>2] = $48;
     (_sprintf($0,29196,$vararg_buffer51)|0);
     $53 = HEAP8[55744]|0;
     L9: do {
      switch ($53<<24>>24) {
      case 11: case 13: case 10: case 12: case 14: case 64:  {
       $54 = (55888);
       $55 = $54;
       $56 = HEAP32[$55>>2]|0;
       $57 = (($54) + 4)|0;
       $58 = $57;
       $59 = HEAP32[$58>>2]|0;
       $60 = ($$126|0)<(0);
       $61 = $60 << 31 >> 31;
       $62 = ($56|0)==($$126|0);
       $63 = ($59|0)==($61|0);
       $64 = $62 & $63;
       if ($64) {
        $65 = HEAP32[199583]|0;
        HEAP32[$vararg_buffer54>>2] = $1;
        $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
        HEAP32[$vararg_ptr57>>2] = $0;
        (_fprintf($65,16012,$vararg_buffer54)|0);
        break L9;
       } else {
        $$pr = HEAP8[55744]|0;
        $66 = $$pr;
        label = 9;
        break L9;
       }
       break;
      }
      default: {
       $66 = $53;
       label = 9;
      }
      }
     } while(0);
     L14: do {
      if ((label|0) == 9) {
       label = 0;
       switch ($66<<24>>24) {
       case 16: case 17: case 18: case 65:  {
        $67 = (55888);
        $68 = $67;
        $69 = HEAP32[$68>>2]|0;
        $70 = (($67) + 4)|0;
        $71 = $70;
        $72 = HEAP32[$71>>2]|0;
        $73 = ($$126|0)<(0);
        $74 = $73 << 31 >> 31;
        $75 = ($69|0)==($$126|0);
        $76 = ($72|0)==($74|0);
        $77 = $75 & $76;
        if ($77) {
         $78 = HEAP32[199583]|0;
         HEAP32[$vararg_buffer58>>2] = $1;
         $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
         HEAP32[$vararg_ptr61>>2] = $0;
         (_fprintf($78,16012,$vararg_buffer58)|0);
         break L14;
        }
        break;
       }
       default: {
       }
       }
       $79 = HEAP32[199583]|0;
       HEAP32[$vararg_buffer62>>2] = $0;
       (_fprintf($79,16050,$vararg_buffer62)|0);
      }
     } while(0);
     $80 = (($$126) + 8)|0;
     $81 = $80 & 56;
     $82 = ($81|0)==(0);
     if ($82) {
      $85 = HEAP32[199583]|0;
      (_fwrite(15934,6,1,$85)|0);
     }
     $83 = HEAP32[(76764)>>2]|0;
     $84 = ($80|0)<($83|0);
     if ($84) {
      $$126 = $80;
     } else {
      break L3;
     }
    }
   }
  } while(0);
  $86 = HEAP32[199583]|0;
  (_fwrite(16075,13,1,$86)|0);
  STACKTOP = sp;return;
 }
 (_fwrite(16089,20,1,$24)|0);
 $87 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer65>>2] = 15926;
 $vararg_ptr68 = ((($vararg_buffer65)) + 4|0);
 HEAP32[$vararg_ptr68>>2] = 0;
 (_fprintf($87,16110,$vararg_buffer65)|0);
 $88 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer69>>2] = 15926;
 $vararg_ptr72 = ((($vararg_buffer69)) + 4|0);
 HEAP32[$vararg_ptr72>>2] = 8;
 (_fprintf($88,16110,$vararg_buffer69)|0);
 $89 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer73>>2] = 15926;
 $vararg_ptr76 = ((($vararg_buffer73)) + 4|0);
 HEAP32[$vararg_ptr76>>2] = 16;
 (_fprintf($89,16110,$vararg_buffer73)|0);
 $90 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer77>>2] = 15926;
 $vararg_ptr80 = ((($vararg_buffer77)) + 4|0);
 HEAP32[$vararg_ptr80>>2] = 24;
 (_fprintf($90,16110,$vararg_buffer77)|0);
 $91 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer81>>2] = 15926;
 $vararg_ptr84 = ((($vararg_buffer81)) + 4|0);
 HEAP32[$vararg_ptr84>>2] = 32;
 (_fprintf($91,16110,$vararg_buffer81)|0);
 $92 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer85>>2] = 15926;
 $vararg_ptr88 = ((($vararg_buffer85)) + 4|0);
 HEAP32[$vararg_ptr88>>2] = 40;
 (_fprintf($92,16110,$vararg_buffer85)|0);
 $93 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer89>>2] = 15926;
 $vararg_ptr92 = ((($vararg_buffer89)) + 4|0);
 HEAP32[$vararg_ptr92>>2] = 48;
 (_fprintf($93,16110,$vararg_buffer89)|0);
 $94 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer93>>2] = 15926;
 $vararg_ptr96 = ((($vararg_buffer93)) + 4|0);
 HEAP32[$vararg_ptr96>>2] = 56;
 (_fprintf($94,16110,$vararg_buffer93)|0);
 $95 = HEAP32[199583]|0;
 (_fwrite(16153,7,1,$95)|0);
 $96 = HEAP32[19190]|0;
 $97 = HEAP32[(76764)>>2]|0;
 $98 = ($96|0)<($97|0);
 $99 = $96 >>> 3;
 $100 = $99 & 7;
 $101 = ($100|0)==(0);
 L27: do {
  if ($98) {
   $$330 = $96;$105 = $99;$152 = $101;
   while(1) {
    if ($152) {
     $102 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer97>>2] = 15958;
     (_fprintf($102,15941,$vararg_buffer97)|0);
     $103 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer100>>2] = 16004;
     $vararg_ptr103 = ((($vararg_buffer100)) + 4|0);
     HEAP32[$vararg_ptr103>>2] = $$330;
     (_fprintf($103,16161,$vararg_buffer100)|0);
    }
    $104 = (37648 + ($105<<3)|0);
    $106 = +HEAPF64[$104>>3];
    HEAPF64[$vararg_buffer104>>3] = $106;
    (_sprintf($0,16202,$vararg_buffer104)|0);
    $107 = HEAP32[21]|0;
    $108 = (58296 + (($107*200)|0)|0);
    $109 = HEAP8[$108>>0]|0;
    switch ($109<<24>>24) {
    case -76: case -128: case -115:  {
     $110 = HEAP32[21]|0;
     $111 = (((58296 + (($110*200)|0)|0)) + 176|0);
     $112 = $111;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = ($$330|0)<(0);
     $119 = $118 << 31 >> 31;
     $120 = ($114|0)==($$330|0);
     $121 = ($117|0)==($119|0);
     $122 = $120 & $121;
     if ($122) {
      $123 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer107>>2] = $2;
      $vararg_ptr110 = ((($vararg_buffer107)) + 4|0);
      HEAP32[$vararg_ptr110>>2] = $0;
      (_fprintf($123,16012,$vararg_buffer107)|0);
     } else {
      label = 23;
     }
     break;
    }
    default: {
     label = 23;
    }
    }
    L36: do {
     if ((label|0) == 23) {
      label = 0;
      $124 = HEAP32[21]|0;
      $125 = (58296 + (($124*200)|0)|0);
      $126 = HEAP8[$125>>0]|0;
      switch ($126<<24>>24) {
      case -75: case -127: case -114:  {
       $127 = (((58296 + (($124*200)|0)|0)) + 176|0);
       $128 = $127;
       $129 = $128;
       $130 = HEAP32[$129>>2]|0;
       $131 = (($128) + 4)|0;
       $132 = $131;
       $133 = HEAP32[$132>>2]|0;
       $134 = ($$330|0)<(0);
       $135 = $134 << 31 >> 31;
       $136 = ($130|0)==($$330|0);
       $137 = ($133|0)==($135|0);
       $138 = $136 & $137;
       if ($138) {
        $139 = HEAP32[199583]|0;
        HEAP32[$vararg_buffer111>>2] = $2;
        $vararg_ptr114 = ((($vararg_buffer111)) + 4|0);
        HEAP32[$vararg_ptr114>>2] = $0;
        (_fprintf($139,16012,$vararg_buffer111)|0);
        break L36;
       }
       break;
      }
      default: {
      }
      }
      $140 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer115>>2] = $0;
      (_fprintf($140,16050,$vararg_buffer115)|0);
     }
    } while(0);
    $141 = (($$330) + 8)|0;
    $142 = $141 & 56;
    $143 = ($142|0)==(0);
    if ($143) {
     $149 = HEAP32[199583]|0;
     (_fwrite(16153,7,1,$149)|0);
    }
    $144 = HEAP32[(76764)>>2]|0;
    $145 = ($141|0)<($144|0);
    $146 = $141 >>> 3;
    $147 = $146 & 7;
    $148 = ($147|0)==(0);
    if ($145) {
     $$330 = $141;$105 = $146;$152 = $148;
    } else {
     $$lcssa24 = $148;
     break L27;
    }
   }
  } else {
   $$lcssa24 = $101;
  }
 } while(0);
 if (!($$lcssa24)) {
  $150 = HEAP32[199583]|0;
  (_fwrite(16153,7,1,$150)|0);
 }
 $151 = HEAP32[199583]|0;
 (_fwrite(16075,13,1,$151)|0);
 STACKTOP = sp;return;
}
function _imprime_footer() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[199583]|0;
 (_fwrite(15517,15,1,$0)|0);
 $1 = HEAP32[199583]|0;
 (_fwrite(15533,10,1,$1)|0);
 $2 = HEAP32[199583]|0;
 (_fwrite(15544,47,1,$2)|0);
 $3 = HEAP32[199583]|0;
 (_fwrite(15592,68,1,$3)|0);
 $4 = HEAP32[199583]|0;
 (_fwrite(15661,42,1,$4)|0);
 $5 = HEAP32[199583]|0;
 (_fwrite(15704,11,1,$5)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(15716,16,1,$6)|0);
 return;
}
function _muestra_senyal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $leninc = 0, $strlen = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ($0|0)==(1);
 if ($3) {
  $strlen = (_strlen($1)|0);
  $leninc = (($strlen) + 1)|0;
  _memcpy(($2|0),($1|0),($leninc|0))|0;
 } else {
  ;HEAP8[$2>>0]=HEAP8[17229>>0]|0;HEAP8[$2+1>>0]=HEAP8[17229+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[17229+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[17229+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[17229+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[17229+5>>0]|0;HEAP8[$2+6>>0]=HEAP8[17229+6>>0]|0;
 }
 $4 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 90;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 (_fprintf($4,17236,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _imprime_crono() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf($0,18677,$vararg_buffer)|0);
 $2 = (_fopen($0,15451)|0);
 HEAP32[199583] = $2;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[482]|0;
  HEAP32[$vararg_buffer1>>2] = $0;
  (_fprintf($4,15453,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 } else {
  _imprime_intro(18693);
  _imprime_nav2(18704);
  $5 = HEAP32[199583]|0;
  (_fwrite(15485,9,1,$5)|0);
  $6 = HEAP32[78]|0;
  _imprime_dit($6,18704);
  $7 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$7)|0);
  $8 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$8)|0);
  _imprime_footer();
  $9 = HEAP32[199583]|0;
  (_fclose($9)|0);
  STACKTOP = sp;return;
 }
}
function _imprime_dit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02229 = 0, $$025 = 0, $$124 = 0, $$lcssa = 0, $$lcssa23 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer43 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer43 = sp + 112|0;
 $vararg_buffer39 = sp + 104|0;
 $vararg_buffer35 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[199583]|0;
 (_fwrite(18710,42,1,$2)|0);
 $3 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$3)|0);
 $4 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15781;
 (_fprintf($4,18753,$vararg_buffer)|0);
 $5 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 10;
 (_fprintf($5,18787,$vararg_buffer1)|0);
 $6 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 190;
 (_fprintf($6,18813,$vararg_buffer4)|0);
 $7 = HEAP32[79]|0;
 $8 = HEAP16[399587]|0;
 $9 = $8 << 16 >> 16;
 $10 = ($7|0)>($9|0);
 $11 = $10 ? $7 : $9;
 $12 = ($11|0)>(0);
 $13 = HEAP32[199583]|0;
 if ($12) {
  $$02229 = 0;$16 = 0;$17 = $13;
  while(1) {
   $14 = HEAP32[82]|0;
   $15 = (($14) + ($16))|0;
   HEAP32[$vararg_buffer7>>2] = 25;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $1;
   $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $15;
   $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
   HEAP32[$vararg_ptr12>>2] = $15;
   (_fprintf($17,18855,$vararg_buffer7)|0);
   $18 = (($$02229) + 1)<<16>>16;
   $19 = $18 << 16 >> 16;
   $20 = HEAP32[79]|0;
   $21 = HEAP16[399587]|0;
   $22 = $21 << 16 >> 16;
   $23 = ($20|0)>($22|0);
   $24 = $23 ? $20 : $22;
   $25 = ($19|0)<($24|0);
   $26 = HEAP32[199583]|0;
   if ($25) {
    $$02229 = $18;$16 = $19;$17 = $26;
   } else {
    $$lcssa23 = $26;
    break;
   }
  }
 } else {
  $$lcssa23 = $13;
 }
 (_fwrite(15934,6,1,$$lcssa23)|0);
 $27 = ($0|0)>(0);
 if ($27) {
  $$025 = 0;$29 = 0;
 } else {
  $67 = HEAP32[199583]|0;
  (_fwrite(19011,14,1,$67)|0);
  STACKTOP = sp;return;
 }
 while(1) {
  $28 = $29 & 1;
  $30 = ($28|0)==(0);
  $31 = HEAP32[199583]|0;
  if ($30) {
   HEAP32[$vararg_buffer13>>2] = 15958;
   (_fprintf($31,15762,$vararg_buffer13)|0);
  } else {
   HEAP32[$vararg_buffer16>>2] = 16004;
   (_fprintf($31,18753,$vararg_buffer16)|0);
  }
  $32 = (((799176 + (($29*2064)|0)|0)) + 16|0);
  $33 = (_strlen($32)|0);
  $34 = ($33|0)==(0);
  $35 = HEAP32[199583]|0;
  do {
   if ($34) {
    if ($30) {
     HEAP32[$vararg_buffer19>>2] = 15926;
     (_fprintf($35,18909,$vararg_buffer19)|0);
     $36 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer22>>2] = 15926;
     (_fprintf($36,18909,$vararg_buffer22)|0);
     break;
    } else {
     HEAP32[$vararg_buffer25>>2] = 15781;
     (_fprintf($35,18909,$vararg_buffer25)|0);
     $37 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer28>>2] = 15781;
     (_fprintf($37,18909,$vararg_buffer28)|0);
     break;
    }
   } else {
    $38 = (799176 + (($29*2064)|0)|0);
    if ($30) {
     HEAP32[$vararg_buffer31>>2] = 15926;
     $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
     HEAP32[$vararg_ptr34>>2] = $38;
     (_fprintf($35,18941,$vararg_buffer31)|0);
     $39 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer35>>2] = 15926;
     $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
     HEAP32[$vararg_ptr38>>2] = $32;
     (_fprintf($39,18941,$vararg_buffer35)|0);
     break;
    } else {
     HEAP32[$vararg_buffer39>>2] = 15781;
     $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
     HEAP32[$vararg_ptr42>>2] = $38;
     (_fprintf($35,18941,$vararg_buffer39)|0);
     $40 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer43>>2] = 15781;
     $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
     HEAP32[$vararg_ptr46>>2] = $32;
     (_fprintf($40,18941,$vararg_buffer43)|0);
     break;
    }
   }
  } while(0);
  $41 = HEAP32[79]|0;
  $42 = HEAP16[399587]|0;
  $43 = $42 << 16 >> 16;
  $44 = ($41|0)>($43|0);
  $45 = $44 ? $41 : $43;
  $46 = ($45|0)>(0);
  $47 = HEAP32[199583]|0;
  if ($46) {
   $$124 = 0;$48 = $47;$50 = 0;
   while(1) {
    (_fwrite(18982,21,1,$48)|0);
    $49 = ((((799176 + (($29*2064)|0)|0)) + 144|0) + ($50<<6)|0);
    $51 = (_strlen($49)|0);
    $52 = ($51|0)==(0);
    $53 = HEAP32[199583]|0;
    if ($52) {
     (_fwrite(17229,6,1,$53)|0);
    } else {
     (_fputs($49,$53)|0);
    }
    $54 = HEAP32[199583]|0;
    (_fwrite(19004,6,1,$54)|0);
    $55 = (($$124) + 1)<<16>>16;
    $56 = $55 << 16 >> 16;
    $57 = HEAP32[79]|0;
    $58 = HEAP16[399587]|0;
    $59 = $58 << 16 >> 16;
    $60 = ($57|0)>($59|0);
    $61 = $60 ? $57 : $59;
    $62 = ($56|0)<($61|0);
    $63 = HEAP32[199583]|0;
    if ($62) {
     $$124 = $55;$48 = $63;$50 = $56;
    } else {
     $$lcssa = $63;
     break;
    }
   }
  } else {
   $$lcssa = $47;
  }
  (_fwrite(15934,6,1,$$lcssa)|0);
  $64 = (($$025) + 1)<<16>>16;
  $65 = $64 << 16 >> 16;
  $66 = ($65|0)<($0|0);
  if ($66) {
   $$025 = $64;$29 = $65;
  } else {
   break;
  }
 }
 $67 = HEAP32[199583]|0;
 (_fwrite(19011,14,1,$67)|0);
 STACKTOP = sp;return;
}
function _imprime_css() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 40|0;
 $1 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf($0,19026,$vararg_buffer)|0);
 $2 = HEAP32[19180]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer1>>2] = $0;
  (_fprintf($4,19043,$vararg_buffer1)|0);
 } else {
  $5 = (_fopen($0,15451)|0);
  HEAP32[199583] = $5;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $7 = HEAP32[482]|0;
   HEAP32[$vararg_buffer4>>2] = $0;
   (_fprintf($7,15453,$vararg_buffer4)|0);
   _exit(1);
   // unreachable;
  }
 }
 _imprime_w3css(19050);
 _imprime_nav2_css();
 $8 = HEAP32[199583]|0;
 (_fwrite(19061,13,1,$8)|0);
 $9 = HEAP32[199583]|0;
 (_fwrite(19075,31,1,$9)|0);
 $10 = HEAP32[199583]|0;
 (_fwrite(19107,35,1,$10)|0);
 $11 = HEAP32[78]|0;
 _imprime_dit($11,19143);
 $12 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$12)|0);
 $13 = HEAP32[199583]|0;
 (_fwrite(19150,34,1,$13)|0);
 $14 = HEAP32[19169]|0;
 $15 = HEAP32[19168]|0;
 $16 = $15 | $14;
 $17 = ($16|0)==(0);
 if ($17) {
  _dibuja_datapath();
 } else {
  _imprime_etapas();
  _imprime_senyales();
 }
 $18 = HEAP32[199583]|0;
 (_fwrite(19185,7,1,$18)|0);
 $19 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$19)|0);
 $20 = (_strlen(840713)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = HEAP32[199583]|0;
  (_fwrite(19193,57,1,$22)|0);
  $23 = HEAP32[199583]|0;
  (_fwrite(19251,17,1,$23)|0);
  $24 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$24)|0);
  $25 = HEAP32[199583]|0;
  (_fwrite(19269,9,1,$25)|0);
  $26 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$26)|0);
  $27 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer7>>2] = 840713;
  (_fprintf($27,19279,$vararg_buffer7)|0);
  $28 = HEAP32[199583]|0;
  (_fwrite(15485,9,1,$28)|0);
  $29 = HEAP32[199583]|0;
  (_fwrite(19185,7,1,$29)|0);
  $30 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$30)|0);
 }
 $31 = (_strlen(841225)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = HEAP32[199583]|0;
  (_fwrite(19284,48,1,$33)|0);
  $34 = HEAP32[199583]|0;
  (_fwrite(19333,13,1,$34)|0);
  $35 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$35)|0);
  $36 = HEAP32[199583]|0;
  (_fwrite(19347,9,1,$36)|0);
  $37 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer10>>2] = 841225;
  (_fprintf($37,19357,$vararg_buffer10)|0);
  $38 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$38)|0);
  $39 = HEAP32[199583]|0;
  (_fwrite(19365,8,1,$39)|0);
  $40 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$40)|0);
 }
 $41 = HEAP32[199583]|0;
 (_fwrite(19185,7,1,$41)|0);
 $42 = HEAP32[199583]|0;
 (_fwrite(19374,36,1,$42)|0);
 $43 = HEAP32[199583]|0;
 (_fwrite(19411,41,1,$43)|0);
 $44 = HEAP32[199583]|0;
 (_fwrite(19107,35,1,$44)|0);
 $45 = HEAP32[199583]|0;
 (_fwrite(19453,22,1,$45)|0);
 _imprime_int_regs_col();
 $46 = HEAP32[199583]|0;
 (_fwrite(19185,7,1,$46)|0);
 $47 = HEAP32[19169]|0;
 $48 = HEAP32[19168]|0;
 $49 = $48 | $47;
 $50 = ($49|0)==(0);
 if (!($50)) {
  $51 = HEAP32[199583]|0;
  (_fwrite(19453,22,1,$51)|0);
  _imprime_fp_regs_col();
  $52 = HEAP32[199583]|0;
  (_fwrite(19185,7,1,$52)|0);
 }
 $53 = HEAP32[199583]|0;
 (_fwrite(19453,22,1,$53)|0);
 _imprime_Dmem_col();
 $54 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$54)|0);
 $55 = HEAP32[199583]|0;
 (_fwrite(19185,7,1,$55)|0);
 $56 = HEAP32[199583]|0;
 (_fwrite(19476,20,1,$56)|0);
 _imprime_footer_css();
 $57 = HEAP32[19180]|0;
 $58 = ($57|0)==(1);
 $59 = HEAP32[199583]|0;
 if ($58) {
  (_fwrite(19497,2,1,$59)|0);
  STACKTOP = sp;return;
 } else {
  (_fclose($59)|0);
  STACKTOP = sp;return;
 }
}
function _imprime_w3css($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[199583]|0;
 (_fwrite(18498,16,1,$1)|0);
 $2 = HEAP32[199583]|0;
 $3 = HEAP32[19182]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 840457;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 (_fprintf($2,18515,$vararg_buffer)|0);
 $4 = HEAP32[199583]|0;
 (_fwrite(18575,68,1,$4)|0);
 $5 = HEAP32[199583]|0;
 (_fwrite(22873,69,1,$5)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(22943,68,1,$6)|0);
 $7 = HEAP32[199583]|0;
 (_fwrite(23012,8,1,$7)|0);
 $8 = HEAP32[199583]|0;
 (_fwrite(23021,13,1,$8)|0);
 $9 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer3>>2] = 23072;
 (_fprintf($9,23035,$vararg_buffer3)|0);
 $10 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer6>>2] = 10;
 (_fprintf($10,23080,$vararg_buffer6)|0);
 $11 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer9>>2] = 23122;
 (_fprintf($11,23101,$vararg_buffer9)|0);
 $12 = HEAP32[199583]|0;
 (_fwrite(23127,2,1,$12)|0);
 $13 = HEAP32[199583]|0;
 (_fwrite(23130,9,1,$13)|0);
 $14 = HEAP32[199583]|0;
 (_fwrite(23140,16,1,$14)|0);
 STACKTOP = sp;return;
}
function _imprime_nav2_css() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer33 = sp + 72|0;
 $vararg_buffer29 = sp + 64|0;
 $vararg_buffer25 = sp + 56|0;
 $vararg_buffer21 = sp + 48|0;
 $vararg_buffer17 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[199583]|0;
 (_fwrite(22112,33,1,$0)|0);
 $1 = HEAP32[199583]|0;
 (_fwrite(22146,42,1,$1)|0);
 $2 = HEAP32[19176]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer>>2] = 840585;
  (_fprintf($4,22189,$vararg_buffer)|0);
 }
 $5 = HEAP32[199583]|0;
 (_fwrite(22256,76,1,$5)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(22333,75,1,$6)|0);
 $7 = HEAP32[19182]|0;
 $8 = ($7|0)>(10);
 $9 = HEAP32[199583]|0;
 if ($8) {
  $10 = (($7) + -15)|0;
  HEAP32[$vararg_buffer1>>2] = 19143;
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $10;
  (_fprintf($9,22409,$vararg_buffer1)|0);
 } else {
  HEAP32[$vararg_buffer5>>2] = 19143;
  $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr8>>2] = $7;
  (_fprintf($9,22409,$vararg_buffer5)|0);
 }
 $11 = HEAP32[19182]|0;
 $12 = ($11|0)>(5);
 $13 = HEAP32[199583]|0;
 if ($12) {
  $14 = (($11) + -5)|0;
  HEAP32[$vararg_buffer9>>2] = 19143;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = $14;
  (_fprintf($13,22487,$vararg_buffer9)|0);
 } else {
  HEAP32[$vararg_buffer13>>2] = 19143;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $11;
  (_fprintf($13,22487,$vararg_buffer13)|0);
 }
 $15 = HEAP32[19182]|0;
 $16 = ($15|0)>(1);
 $17 = HEAP32[199583]|0;
 if ($16) {
  $18 = (($15) + -1)|0;
  HEAP32[$vararg_buffer17>>2] = 19143;
  $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
  HEAP32[$vararg_ptr20>>2] = $18;
  (_fprintf($17,22564,$vararg_buffer17)|0);
 } else {
  HEAP32[$vararg_buffer21>>2] = 19143;
  $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
  HEAP32[$vararg_ptr24>>2] = $15;
  (_fprintf($17,22564,$vararg_buffer21)|0);
 }
 $19 = HEAP32[199583]|0;
 $20 = HEAP32[19182]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$vararg_buffer25>>2] = 19143;
 $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
 HEAP32[$vararg_ptr28>>2] = $21;
 (_fprintf($19,22641,$vararg_buffer25)|0);
 $22 = HEAP32[199583]|0;
 $23 = HEAP32[19182]|0;
 $24 = (($23) + 5)|0;
 HEAP32[$vararg_buffer29>>2] = 19143;
 $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
 HEAP32[$vararg_ptr32>>2] = $24;
 (_fprintf($22,22718,$vararg_buffer29)|0);
 $25 = HEAP32[199583]|0;
 $26 = HEAP32[19182]|0;
 $27 = (($26) + 10)|0;
 HEAP32[$vararg_buffer33>>2] = 19143;
 $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
 HEAP32[$vararg_ptr36>>2] = $27;
 (_fprintf($25,22795,$vararg_buffer33)|0);
 $28 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$28)|0);
 STACKTOP = sp;return;
}
function _imprime_int_regs_col() {
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $sext = 0;
 var $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer61 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr46 = 0, $vararg_ptr53 = 0, $vararg_ptr60 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0;
 $vararg_buffer61 = sp + 160|0;
 $vararg_buffer57 = sp + 152|0;
 $vararg_buffer54 = sp + 144|0;
 $vararg_buffer50 = sp + 136|0;
 $vararg_buffer47 = sp + 128|0;
 $vararg_buffer43 = sp + 120|0;
 $vararg_buffer40 = sp + 112|0;
 $vararg_buffer36 = sp + 104|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 452|0;
 $1 = sp + 432|0;
 $2 = sp + 304|0;
 $3 = sp + 176|0;
 $4 = sp + 168|0;
 $5 = sp + 164|0;
 $6 = (55160);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 _color_instruccion($0,$8,$11);
 $12 = (56264);
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 _color_instruccion($1,$14,$17);
 $18 = HEAP32[199583]|0;
 (_fwrite(21603,38,1,$18)|0);
 $19 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$19)|0);
 $20 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15781;
 (_fprintf($20,15762,$vararg_buffer)|0);
 $21 = HEAP32[199583]|0;
 (_fwrite(21642,50,1,$21)|0);
 $22 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$22)|0);
 $23 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$23)|0);
 $24 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 15781;
 (_fprintf($24,20636,$vararg_buffer1)|0);
 $25 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 60;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = 15926;
 (_fprintf($25,21693,$vararg_buffer4)|0);
 $26 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$26)|0);
 $27 = HEAP32[199583]|0;
 $28 = $27;$29 = 0;
 while(1) {
  (_fwrite(16232,5,1,$28)|0);
  $30 = ($29|0)<(0);
  $31 = $30 << 31 >> 31;
  $32 = (_lee_int_reg($29,$31,$4,$5)|0);
  $33 = tempRet0;
  $34 = HEAP32[$4>>2]|0;
  $$off = (($34) + -1)|0;
  $switch = ($$off>>>0)<(2);
  do {
   if ($switch) {
    $35 = $vararg_buffer8;
    $36 = $35;
    HEAP32[$36>>2] = $32;
    $37 = (($35) + 4)|0;
    $38 = $37;
    HEAP32[$38>>2] = $33;
    $vararg_ptr11 = ((($vararg_buffer8)) + 8|0);
    $39 = $vararg_ptr11;
    $40 = $39;
    HEAP32[$40>>2] = $32;
    $41 = (($39) + 4)|0;
    $42 = $41;
    HEAP32[$42>>2] = $33;
    (_sprintf($2,21748,$vararg_buffer8)|0);
    $43 = HEAP32[$5>>2]|0;
    $44 = ($43|0)==(0);
    if ($44) {
     HEAP32[$vararg_buffer16>>2] = 16004;
     $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
     HEAP32[$vararg_ptr19>>2] = 20037;
     $vararg_ptr20 = ((($vararg_buffer16)) + 8|0);
     HEAP32[$vararg_ptr20>>2] = $2;
     (_sprintf($3,21798,$vararg_buffer16)|0);
     break;
    } else {
     HEAP32[$vararg_buffer12>>2] = 16004;
     $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
     HEAP32[$vararg_ptr15>>2] = $2;
     (_sprintf($3,21757,$vararg_buffer12)|0);
     break;
    }
   } else {
    $45 = ($33|0)<(1);
    $46 = ($32>>>0)<(0);
    $47 = ($33|0)==(1);
    $48 = $47 & $46;
    $49 = $45 | $48;
    if ($49) {
     $50 = $vararg_buffer21;
     $51 = $50;
     HEAP32[$51>>2] = $32;
     $52 = (($50) + 4)|0;
     $53 = $52;
     HEAP32[$53>>2] = $33;
     (_sprintf($2,29196,$vararg_buffer21)|0);
    } else {
     $54 = $vararg_buffer24;
     $55 = $54;
     HEAP32[$55>>2] = $32;
     $56 = (($54) + 4)|0;
     $57 = $56;
     HEAP32[$57>>2] = $33;
     (_sprintf($2,29206,$vararg_buffer24)|0);
    }
    $58 = HEAP32[$5>>2]|0;
    $59 = ($58|0)==(0);
    if ($59) {
     HEAP32[$vararg_buffer31>>2] = 16004;
     $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
     HEAP32[$vararg_ptr34>>2] = 20037;
     $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
     HEAP32[$vararg_ptr35>>2] = $2;
     (_sprintf($3,21798,$vararg_buffer31)|0);
     break;
    } else {
     HEAP32[$vararg_buffer27>>2] = 16004;
     $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
     HEAP32[$vararg_ptr30>>2] = $2;
     (_sprintf($3,21757,$vararg_buffer27)|0);
     break;
    }
   }
  } while(0);
  $60 = (_hay_destino_WB()|0);
  $61 = ($60|0)==(0);
  L17: do {
   if ($61) {
    label = 20;
   } else {
    $62 = HEAP8[(56114)>>0]|0;
    $63 = $62&255;
    $64 = ($63|0)==($29|0);
    if ($64) {
     $65 = (_hay_fuente1_ID()|0);
     $66 = ($65|0)==(0);
     if ($66) {
      label = 16;
     } else {
      $67 = HEAP8[(55016)>>0]|0;
      $68 = $67&255;
      $69 = ($68|0)==($29|0);
      if (!($69)) {
       label = 16;
      }
     }
     do {
      if ((label|0) == 16) {
       label = 0;
       $70 = (_hay_fuente2_ID()|0);
       $71 = ($70|0)==(0);
       if (!($71)) {
        $72 = HEAP8[(55017)>>0]|0;
        $73 = $72&255;
        $74 = ($73|0)==($29|0);
        if ($74) {
         break;
        }
       }
       $77 = HEAP32[199583]|0;
       HEAP32[$vararg_buffer43>>2] = $1;
       $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
       HEAP32[$vararg_ptr46>>2] = $29;
       (_fprintf($77,21933,$vararg_buffer43)|0);
       $78 = HEAP32[199583]|0;
       HEAP32[$vararg_buffer47>>2] = $3;
       (_fprintf($78,29392,$vararg_buffer47)|0);
       break L17;
      }
     } while(0);
     $75 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer36>>2] = 16409;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = $29;
     (_fprintf($75,21871,$vararg_buffer36)|0);
     $76 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer40>>2] = $3;
     (_fprintf($76,29392,$vararg_buffer40)|0);
    } else {
     label = 20;
    }
   }
  } while(0);
  L28: do {
   if ((label|0) == 20) {
    label = 0;
    $79 = (_hay_fuente1_ID()|0);
    $80 = ($79|0)==(0);
    if ($80) {
     label = 22;
    } else {
     $81 = HEAP8[(55016)>>0]|0;
     $82 = $81&255;
     $83 = ($82|0)==($29|0);
     if (!($83)) {
      label = 22;
     }
    }
    do {
     if ((label|0) == 22) {
      label = 0;
      $84 = (_hay_fuente2_ID()|0);
      $85 = ($84|0)==(0);
      if (!($85)) {
       $86 = HEAP8[(55017)>>0]|0;
       $87 = $86&255;
       $88 = ($87|0)==($29|0);
       if ($88) {
        break;
       }
      }
      $91 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer57>>2] = 15958;
      $vararg_ptr60 = ((($vararg_buffer57)) + 4|0);
      HEAP32[$vararg_ptr60>>2] = $29;
      (_fprintf($91,22057,$vararg_buffer57)|0);
      $92 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer61>>2] = $3;
      (_fprintf($92,29392,$vararg_buffer61)|0);
      break L28;
     }
    } while(0);
    $89 = HEAP32[199583]|0;
    HEAP32[$vararg_buffer50>>2] = $0;
    $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
    HEAP32[$vararg_ptr53>>2] = $29;
    (_fprintf($89,21995,$vararg_buffer50)|0);
    $90 = HEAP32[199583]|0;
    HEAP32[$vararg_buffer54>>2] = $3;
    (_fprintf($90,29392,$vararg_buffer54)|0);
   }
  } while(0);
  $93 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$93)|0);
  $94 = $29 << 16;
  $sext = (($94) + 65536)|0;
  $95 = $sext >> 16;
  $96 = ($sext|0)<(2097152);
  $97 = HEAP32[199583]|0;
  if ($96) {
   $28 = $97;$29 = $95;
  } else {
   break;
  }
 }
 (_fwrite(16689,10,1,$97)|0);
 STACKTOP = sp;return;
}
function _imprime_fp_regs_col() {
 var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = 0.0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$2 = 0.0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$6 = 0.0, $$sroa$0$0$copyload = 0.0, $$sroa$0$4$$sroa$0$4$$sroa$0$4$ = 0.0, $$sroa$0$4$sroa_raw_idx = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $switch = 0, $switch48 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer12 = 0, $vararg_buffer121 = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0;
 var $vararg_buffer53 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer66 = 0, $vararg_buffer72 = 0, $vararg_buffer76 = 0, $vararg_buffer8 = 0, $vararg_buffer80 = 0, $vararg_buffer84 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_buffer95 = 0, $vararg_ptr11 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0;
 var $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr52 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr64 = 0, $vararg_ptr65 = 0, $vararg_ptr69 = 0, $vararg_ptr7 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr75 = 0, $vararg_ptr79 = 0, $vararg_ptr83 = 0, $vararg_ptr87 = 0, $vararg_ptr94 = 0, $vararg_ptr98 = 0, $vararg_ptr99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0;
 $vararg_buffer121 = sp + 336|0;
 $vararg_buffer118 = sp + 328|0;
 $vararg_buffer115 = sp + 320|0;
 $vararg_buffer112 = sp + 312|0;
 $vararg_buffer109 = sp + 304|0;
 $vararg_buffer106 = sp + 296|0;
 $vararg_buffer103 = sp + 288|0;
 $vararg_buffer100 = sp + 280|0;
 $vararg_buffer95 = sp + 264|0;
 $vararg_buffer91 = sp + 256|0;
 $vararg_buffer88 = sp + 248|0;
 $vararg_buffer84 = sp + 240|0;
 $vararg_buffer80 = sp + 232|0;
 $vararg_buffer76 = sp + 224|0;
 $vararg_buffer72 = sp + 216|0;
 $vararg_buffer66 = sp + 200|0;
 $vararg_buffer61 = sp + 184|0;
 $vararg_buffer58 = sp + 176|0;
 $vararg_buffer53 = sp + 160|0;
 $vararg_buffer49 = sp + 152|0;
 $vararg_buffer46 = sp + 144|0;
 $vararg_buffer40 = sp + 128|0;
 $vararg_buffer35 = sp + 112|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer8 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 776|0;
 $1 = sp + 756|0;
 $2 = sp + 736|0;
 $3 = sp + 608|0;
 $4 = sp + 352|0;
 $$sroa$0 = sp + 8|0;
 $5 = sp + 344|0;
 $6 = sp + 340|0;
 $7 = sp;
 $8 = (55160);
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 _color_instruccion($0,$10,$13);
 $14 = (75624);
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 _color_instruccion($1,$16,$19);
 $20 = (56616);
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 _color_instruccion($2,$22,$25);
 $26 = HEAP32[199583]|0;
 (_fwrite(20552,33,1,$26)|0);
 $27 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$27)|0);
 $28 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15781;
 (_fprintf($28,15762,$vararg_buffer)|0);
 $29 = HEAP32[199583]|0;
 (_fwrite(20586,49,1,$29)|0);
 $30 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$30)|0);
 $31 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$31)|0);
 $32 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 15781;
 (_fprintf($32,20636,$vararg_buffer1)|0);
 $33 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 60;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = 15926;
 (_fprintf($33,20685,$vararg_buffer4)|0);
 $34 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer8>>2] = 60;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = 15926;
 (_fprintf($34,20737,$vararg_buffer8)|0);
 $35 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$35)|0);
 $$sroa$0$4$sroa_raw_idx = ((($$sroa$0)) + 4|0);
 $37 = 0;
 while(1) {
  $36 = HEAP32[199583]|0;
  (_fwrite(16232,5,1,$36)|0);
  $38 = ($37|0)<(0);
  $39 = $38 << 31 >> 31;
  _lee_fp_reg($7,$37,$39,$5,$6);
  $$sroa$0$0$copyload = +HEAPF64[$7>>3];
  HEAPF64[$$sroa$0>>3] = $$sroa$0$0$copyload;
  $40 = HEAP32[$5>>2]|0;
  L3: do {
   switch ($40|0) {
   case 0: case 8:  {
    $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = +HEAPF64[$$sroa$0>>3];
    HEAPF64[$vararg_buffer12>>3] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$;
    (_sprintf($3,16202,$vararg_buffer12)|0);
    $41 = HEAP32[$6>>2]|0;
    $42 = ($41|0)==(0);
    if ($42) {
     HEAP32[$vararg_buffer19>>2] = 16004;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = 20037;
     $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
     HEAP32[$vararg_ptr23>>2] = $3;
     (_sprintf($4,20842,$vararg_buffer19)|0);
     break L3;
    } else {
     HEAP32[$vararg_buffer15>>2] = 16004;
     $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
     HEAP32[$vararg_ptr18>>2] = $3;
     (_sprintf($4,20789,$vararg_buffer15)|0);
     break L3;
    }
    break;
   }
   case 6:  {
    $$sroa$0$0$$sroa$0$0$$sroa$0$0$2 = +HEAPF32[$$sroa$0>>2];
    $43 = $$sroa$0$0$$sroa$0$0$$sroa$0$0$2;
    HEAPF64[$vararg_buffer24>>3] = $43;
    (_sprintf($3,20927,$vararg_buffer24)|0);
    HEAP32[$vararg_buffer27>>2] = 16004;
    $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
    HEAP32[$vararg_ptr30>>2] = 20037;
    $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
    HEAP32[$vararg_ptr31>>2] = $3;
    (_sprintf($4,20933,$vararg_buffer27)|0);
    HEAPF64[$vararg_buffer32>>3] = $43;
    (_sprintf($3,20927,$vararg_buffer32)|0);
    $44 = HEAP32[$6>>2]|0;
    $45 = ($44|0)==(0);
    if ($45) {
     HEAP32[$vararg_buffer40>>2] = $4;
     $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
     HEAP32[$vararg_ptr43>>2] = 16004;
     $vararg_ptr44 = ((($vararg_buffer40)) + 8|0);
     HEAP32[$vararg_ptr44>>2] = 20037;
     $vararg_ptr45 = ((($vararg_buffer40)) + 12|0);
     HEAP32[$vararg_ptr45>>2] = $3;
     (_sprintf($4,21047,$vararg_buffer40)|0);
     break L3;
    } else {
     HEAP32[$vararg_buffer35>>2] = $4;
     $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
     HEAP32[$vararg_ptr38>>2] = 16004;
     $vararg_ptr39 = ((($vararg_buffer35)) + 8|0);
     HEAP32[$vararg_ptr39>>2] = $3;
     (_sprintf($4,21005,$vararg_buffer35)|0);
     break L3;
    }
    break;
   }
   case 7:  {
    $$sroa$0$4$$sroa$0$4$$sroa$0$4$ = +HEAPF32[$$sroa$0$4$sroa_raw_idx>>2];
    $46 = $$sroa$0$4$$sroa$0$4$$sroa$0$4$;
    HEAPF64[$vararg_buffer46>>3] = $46;
    (_sprintf($3,20927,$vararg_buffer46)|0);
    $47 = HEAP32[$6>>2]|0;
    $48 = ($47|0)==(0);
    if ($48) {
     HEAP32[$vararg_buffer53>>2] = 16004;
     $vararg_ptr56 = ((($vararg_buffer53)) + 4|0);
     HEAP32[$vararg_ptr56>>2] = 20037;
     $vararg_ptr57 = ((($vararg_buffer53)) + 8|0);
     HEAP32[$vararg_ptr57>>2] = $3;
     (_sprintf($4,20933,$vararg_buffer53)|0);
    } else {
     HEAP32[$vararg_buffer49>>2] = 16004;
     $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
     HEAP32[$vararg_ptr52>>2] = $3;
     (_sprintf($4,21121,$vararg_buffer49)|0);
    }
    $$sroa$0$0$$sroa$0$0$$sroa$0$0$6 = +HEAPF32[$$sroa$0>>2];
    $49 = $$sroa$0$0$$sroa$0$0$$sroa$0$0$6;
    HEAPF64[$vararg_buffer58>>3] = $49;
    (_sprintf($3,20927,$vararg_buffer58)|0);
    $50 = HEAP32[$6>>2]|0;
    $51 = ($50|0)==(0);
    if ($51) {
     HEAP32[$vararg_buffer66>>2] = $4;
     $vararg_ptr69 = ((($vararg_buffer66)) + 4|0);
     HEAP32[$vararg_ptr69>>2] = 16004;
     $vararg_ptr70 = ((($vararg_buffer66)) + 8|0);
     HEAP32[$vararg_ptr70>>2] = 20037;
     $vararg_ptr71 = ((($vararg_buffer66)) + 12|0);
     HEAP32[$vararg_ptr71>>2] = $3;
     (_sprintf($4,21047,$vararg_buffer66)|0);
     break L3;
    } else {
     HEAP32[$vararg_buffer61>>2] = $4;
     $vararg_ptr64 = ((($vararg_buffer61)) + 4|0);
     HEAP32[$vararg_ptr64>>2] = 16004;
     $vararg_ptr65 = ((($vararg_buffer61)) + 8|0);
     HEAP32[$vararg_ptr65>>2] = $3;
     (_sprintf($4,21005,$vararg_buffer61)|0);
     break L3;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $52 = (_hay_destino_FP_WB()|0);
  $53 = ($52|0)==(0);
  L21: do {
   if ($53) {
    label = 23;
   } else {
    $54 = HEAP8[(75482)>>0]|0;
    $55 = $54&255;
    $56 = ($55|0)==($37|0);
    if ($56) {
     $57 = (_hay_fuente1_FP_ID()|0);
     $58 = ($57|0)==(0);
     if ($58) {
      label = 19;
     } else {
      $59 = HEAP8[(55016)>>0]|0;
      $60 = $59&255;
      $61 = ($60|0)==($37|0);
      if (!($61)) {
       label = 19;
      }
     }
     do {
      if ((label|0) == 19) {
       label = 0;
       $62 = (_hay_fuente2_FP_ID()|0);
       $63 = ($62|0)==(0);
       if (!($63)) {
        $64 = HEAP8[(55017)>>0]|0;
        $65 = $64&255;
        $66 = ($65|0)==($37|0);
        if ($66) {
         break;
        }
       }
       $69 = HEAP32[199583]|0;
       HEAP32[$vararg_buffer76>>2] = $1;
       $vararg_ptr79 = ((($vararg_buffer76)) + 4|0);
       HEAP32[$vararg_ptr79>>2] = $37;
       (_fprintf($69,21223,$vararg_buffer76)|0);
       $70 = HEAP32[199583]|0;
       (_fputs($4,$70)|0);
       break L21;
      }
     } while(0);
     $67 = HEAP32[199583]|0;
     HEAP32[$vararg_buffer72>>2] = 16409;
     $vararg_ptr75 = ((($vararg_buffer72)) + 4|0);
     HEAP32[$vararg_ptr75>>2] = $37;
     (_fprintf($67,21161,$vararg_buffer72)|0);
     $68 = HEAP32[199583]|0;
     (_fputs($4,$68)|0);
    } else {
     label = 23;
    }
   }
  } while(0);
  L32: do {
   if ((label|0) == 23) {
    label = 0;
    $71 = (_hay_fuente1_FP_ID()|0);
    $72 = ($71|0)==(0);
    if ($72) {
     label = 25;
    } else {
     $73 = HEAP8[(55016)>>0]|0;
     $74 = $73&255;
     $75 = ($74|0)==($37|0);
     if (!($75)) {
      label = 25;
     }
    }
    do {
     if ((label|0) == 25) {
      label = 0;
      $76 = (_hay_fuente2_FP_ID()|0);
      $77 = ($76|0)==(0);
      if (!($77)) {
       $78 = HEAP8[(55017)>>0]|0;
       $79 = $78&255;
       $80 = ($79|0)==($37|0);
       if ($80) {
        break;
       }
      }
      $83 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer84>>2] = 15958;
      $vararg_ptr87 = ((($vararg_buffer84)) + 4|0);
      HEAP32[$vararg_ptr87>>2] = $37;
      (_fprintf($83,21347,$vararg_buffer84)|0);
      $84 = HEAP32[199583]|0;
      (_fputs($4,$84)|0);
      break L32;
     }
    } while(0);
    $81 = HEAP32[199583]|0;
    HEAP32[$vararg_buffer80>>2] = $0;
    $vararg_ptr83 = ((($vararg_buffer80)) + 4|0);
    HEAP32[$vararg_ptr83>>2] = $37;
    (_fprintf($81,21285,$vararg_buffer80)|0);
    $82 = HEAP32[199583]|0;
    (_fputs($4,$82)|0);
   }
  } while(0);
  $85 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$85)|0);
  $86 = $37 << 16;
  $sext = (($86) + 65536)|0;
  $87 = $sext >> 16;
  $88 = ($sext|0)<(2097152);
  if ($88) {
   $37 = $87;
  } else {
   break;
  }
 }
 $89 = (_lee_int_reg(32,0,$5,$6)|0);
 $90 = tempRet0;
 $91 = $vararg_buffer88;
 $92 = $91;
 HEAP32[$92>>2] = $89;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = $90;
 (_sprintf($3,29196,$vararg_buffer88)|0);
 $95 = HEAP32[$6>>2]|0;
 $96 = ($95|0)==(0);
 if ($96) {
  HEAP32[$vararg_buffer95>>2] = 16004;
  $vararg_ptr98 = ((($vararg_buffer95)) + 4|0);
  HEAP32[$vararg_ptr98>>2] = 20037;
  $vararg_ptr99 = ((($vararg_buffer95)) + 8|0);
  HEAP32[$vararg_ptr99>>2] = $3;
  (_sprintf($4,20842,$vararg_buffer95)|0);
 } else {
  HEAP32[$vararg_buffer91>>2] = 16004;
  $vararg_ptr94 = ((($vararg_buffer91)) + 4|0);
  HEAP32[$vararg_ptr94>>2] = $3;
  (_sprintf($4,20789,$vararg_buffer91)|0);
 }
 $97 = HEAP8[(56466)>>0]|0;
 $98 = ($97<<24>>24)==(32);
 $99 = HEAP8[55008]|0;
 if ($98) {
  $100 = $99 & -2;
  $switch = ($100<<24>>24)==(104);
  $101 = HEAP32[199583]|0;
  if ($switch) {
   HEAP32[$vararg_buffer100>>2] = 16409;
   (_fprintf($101,21402,$vararg_buffer100)|0);
   $102 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer103>>2] = $4;
   (_fprintf($102,29392,$vararg_buffer103)|0);
   $108 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$108)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer106>>2] = $2;
   (_fprintf($101,21454,$vararg_buffer106)|0);
   $103 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer109>>2] = $4;
   (_fprintf($103,29392,$vararg_buffer109)|0);
   $108 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$108)|0);
   STACKTOP = sp;return;
  }
 } else {
  $104 = HEAP32[199583]|0;
  $105 = $99 & -2;
  $switch48 = ($105<<24>>24)==(104);
  if ($switch48) {
   HEAP32[$vararg_buffer112>>2] = $0;
   (_fprintf($104,21506,$vararg_buffer112)|0);
   $106 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer115>>2] = $4;
   (_fprintf($106,29392,$vararg_buffer115)|0);
   $108 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$108)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer118>>2] = 15958;
   (_fprintf($104,21558,$vararg_buffer118)|0);
   $107 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer121>>2] = $4;
   (_fprintf($107,29392,$vararg_buffer121)|0);
   $108 = HEAP32[199583]|0;
   (_fwrite(16689,10,1,$108)|0);
   STACKTOP = sp;return;
  }
 }
}
function _imprime_Dmem_col() {
 var $$0154156 = 0, $$1155 = 0, $$1157 = 0, $$pr = 0, $$sroa$0$0$$sroa_idx$sroa_raw_idx = 0, $$sroa$0$0$copyload15 = 0, $$sroa$0$0$copyload17 = 0, $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer102 = 0, $vararg_buffer106 = 0, $vararg_buffer111 = 0, $vararg_buffer114 = 0, $vararg_buffer118 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer67 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer79 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0;
 var $vararg_buffer9 = 0, $vararg_buffer90 = 0, $vararg_buffer94 = 0, $vararg_buffer99 = 0, $vararg_ptr105 = 0, $vararg_ptr109 = 0, $vararg_ptr110 = 0, $vararg_ptr117 = 0, $vararg_ptr12 = 0, $vararg_ptr121 = 0, $vararg_ptr122 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr30 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0;
 var $vararg_ptr46 = 0, $vararg_ptr50 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr66 = 0, $vararg_ptr7 = 0, $vararg_ptr70 = 0, $vararg_ptr71 = 0, $vararg_ptr78 = 0, $vararg_ptr8 = 0, $vararg_ptr82 = 0, $vararg_ptr83 = 0, $vararg_ptr93 = 0, $vararg_ptr97 = 0, $vararg_ptr98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0;
 $vararg_buffer118 = sp + 320|0;
 $vararg_buffer114 = sp + 312|0;
 $vararg_buffer111 = sp + 304|0;
 $vararg_buffer106 = sp + 288|0;
 $vararg_buffer102 = sp + 280|0;
 $vararg_buffer99 = sp + 272|0;
 $vararg_buffer94 = sp + 256|0;
 $vararg_buffer90 = sp + 248|0;
 $vararg_buffer87 = sp + 240|0;
 $vararg_buffer84 = sp + 232|0;
 $vararg_buffer79 = sp + 216|0;
 $vararg_buffer75 = sp + 208|0;
 $vararg_buffer72 = sp + 200|0;
 $vararg_buffer67 = sp + 184|0;
 $vararg_buffer63 = sp + 176|0;
 $vararg_buffer60 = sp + 168|0;
 $vararg_buffer55 = sp + 152|0;
 $vararg_buffer51 = sp + 144|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer43 = sp + 128|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer35 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer24 = sp + 88|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $0 = sp + 504|0;
 $1 = sp + 484|0;
 $2 = sp + 464|0;
 $3 = sp + 336|0;
 $4 = sp + 332|0;
 $5 = sp;
 $6 = (55912);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 _color_instruccion($1,$8,$11);
 $12 = HEAP32[21]|0;
 $13 = (((58296 + (($12*200)|0)|0)) + 184|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 _color_instruccion($2,$16,$19);
 $20 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$20)|0);
 $21 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15781;
 (_fprintf($21,19549,$vararg_buffer)|0);
 $22 = HEAP32[199583]|0;
 (_fwrite(19569,53,1,$22)|0);
 $23 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$23)|0);
 $24 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$24)|0);
 $25 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 15781;
 (_fprintf($25,19623,$vararg_buffer1)|0);
 $26 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 15926;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = 50;
 $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
 HEAP32[$vararg_ptr8>>2] = 0;
 (_fprintf($26,19674,$vararg_buffer4)|0);
 $27 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer9>>2] = 15926;
 $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
 HEAP32[$vararg_ptr12>>2] = 50;
 $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
 HEAP32[$vararg_ptr13>>2] = 1;
 (_fprintf($27,19674,$vararg_buffer9)|0);
 $28 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer14>>2] = 15926;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = 50;
 $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
 HEAP32[$vararg_ptr18>>2] = 2;
 (_fprintf($28,19674,$vararg_buffer14)|0);
 $29 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer19>>2] = 15926;
 $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
 HEAP32[$vararg_ptr22>>2] = 50;
 $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
 HEAP32[$vararg_ptr23>>2] = 3;
 (_fprintf($29,19674,$vararg_buffer19)|0);
 $30 = HEAP32[199583]|0;
 (_fwrite(16153,7,1,$30)|0);
 $31 = HEAP32[19190]|0;
 $32 = HEAP32[(76764)>>2]|0;
 $33 = ($31|0)<($32|0);
 if (!($33)) {
  $143 = HEAP32[199583]|0;
  (_fwrite(16689,10,1,$143)|0);
  STACKTOP = sp;return;
 }
 $$sroa$0$0$$sroa_idx$sroa_raw_idx = ((($5)) + 4|0);
 $$0154156 = $31;$$1157 = $31;
 while(1) {
  $34 = $$1157 & 3;
  $35 = ($34|0)==(0);
  L6: do {
   if ($35) {
    $36 = HEAP32[199583]|0;
    HEAP32[$vararg_buffer24>>2] = 16004;
    (_fprintf($36,19549,$vararg_buffer24)|0);
    $37 = ($$1157|0)<(0);
    $38 = $37 << 31 >> 31;
    _te_etiqueta($0,$$1157,$38,1);
    $39 = HEAP8[55744]|0;
    L8: do {
     switch ($39<<24>>24) {
     case 11: case 13: case 10: case 12: case 14: case 64:  {
      $40 = (55888);
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $46 = ($42|0)==($$1157|0);
      $47 = ($45|0)==($38|0);
      $48 = $46 & $47;
      if ($48) {
       $49 = HEAP32[199583]|0;
       HEAP32[$vararg_buffer27>>2] = $1;
       $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
       HEAP32[$vararg_ptr30>>2] = $0;
       (_fprintf($49,19729,$vararg_buffer27)|0);
       break L6;
      } else {
       $$pr = HEAP8[55744]|0;
       $50 = $$pr;
       break L8;
      }
      break;
     }
     default: {
      $50 = $39;
     }
     }
    } while(0);
    switch ($50<<24>>24) {
    case 16: case 17: case 18: case 65:  {
     $51 = (55888);
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $54 = (($51) + 4)|0;
     $55 = $54;
     $56 = HEAP32[$55>>2]|0;
     $57 = ($53|0)==($$1157|0);
     $58 = ($56|0)==($38|0);
     $59 = $57 & $58;
     if ($59) {
      $60 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer31>>2] = $1;
      $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
      HEAP32[$vararg_ptr34>>2] = $0;
      (_fprintf($60,19790,$vararg_buffer31)|0);
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $61 = HEAP32[21]|0;
    $62 = (58296 + (($61*200)|0)|0);
    $63 = HEAP8[$62>>0]|0;
    L18: do {
     switch ($63<<24>>24) {
     case -76: case -128: case -115:  {
      $64 = (((58296 + (($61*200)|0)|0)) + 176|0);
      $65 = $64;
      $66 = $65;
      $67 = HEAP32[$66>>2]|0;
      $68 = (($65) + 4)|0;
      $69 = $68;
      $70 = HEAP32[$69>>2]|0;
      $71 = ($67|0)==($$1157|0);
      $72 = ($70|0)==($38|0);
      $73 = $71 & $72;
      if ($73) {
       $74 = HEAP32[199583]|0;
       HEAP32[$vararg_buffer35>>2] = $2;
       $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
       HEAP32[$vararg_ptr38>>2] = $0;
       (_fprintf($74,19729,$vararg_buffer35)|0);
       break L6;
      } else {
       switch ($63<<24>>24) {
       case -127: case -114:  {
        label = 15;
        break L18;
        break;
       }
       default: {
        break L18;
       }
       }
      }
      break;
     }
     case -75: case -127: case -114:  {
      label = 15;
      break;
     }
     default: {
     }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     $75 = (((58296 + (($61*200)|0)|0)) + 176|0);
     $76 = $75;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = (($76) + 4)|0;
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = ($78|0)==($$1157|0);
     $83 = ($81|0)==($38|0);
     $84 = $82 & $83;
     if ($84) {
      $85 = HEAP32[199583]|0;
      HEAP32[$vararg_buffer39>>2] = $2;
      $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
      HEAP32[$vararg_ptr42>>2] = $0;
      (_fprintf($85,19790,$vararg_buffer39)|0);
      break;
     }
    }
    $86 = HEAP32[199583]|0;
    HEAP32[$vararg_buffer43>>2] = 15958;
    $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
    HEAP32[$vararg_ptr46>>2] = $0;
    (_fprintf($86,19851,$vararg_buffer43)|0);
   }
  } while(0);
  $87 = ($$1157|0)==($$0154156|0);
  L28: do {
   if ($87) {
    $88 = ($$1157|0)<(0);
    $89 = $88 << 31 >> 31;
    $90 = (666600 + ($$1157<<2)|0);
    $91 = HEAP32[$90>>2]|0;
    _lee_mem_datos($5,$$1157,$89,$91,$4);
    $$sroa$0$0$copyload15 = HEAP32[$5>>2]|0;
    $$sroa$0$0$copyload17 = HEAP32[$$sroa$0$0$$sroa_idx$sroa_raw_idx>>2]|0;
    $92 = HEAP32[$90>>2]|0;
    switch ($92|0) {
    case 2: case 1:  {
     $sext = $$sroa$0$0$copyload15 << 24;
     $93 = $sext >> 24;
     HEAP32[$vararg_buffer47>>2] = $93;
     $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
     HEAP32[$vararg_ptr50>>2] = $93;
     (_sprintf($3,19905,$vararg_buffer47)|0);
     $94 = HEAP32[$4>>2]|0;
     $95 = ($94|0)==(0);
     $96 = HEAP32[199583]|0;
     if ($95) {
      HEAP32[$vararg_buffer55>>2] = 16004;
      $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
      HEAP32[$vararg_ptr58>>2] = 20037;
      $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
      HEAP32[$vararg_ptr59>>2] = $3;
      (_fprintf($96,19962,$vararg_buffer55)|0);
     } else {
      HEAP32[$vararg_buffer51>>2] = 16004;
      $vararg_ptr54 = ((($vararg_buffer51)) + 4|0);
      HEAP32[$vararg_ptr54>>2] = $3;
      (_fprintf($96,19912,$vararg_buffer51)|0);
     }
     $97 = (($$1157) + 1)|0;
     $$1155 = $97;
     break L28;
     break;
    }
    case 3:  {
     $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert = $$sroa$0$0$copyload15 << 16;
     $98 = $$sroa$0$sroa$0$sroa$0$sroa$0$0$insert$insert >> 16;
     HEAP32[$vararg_buffer60>>2] = $98;
     (_sprintf($3,20046,$vararg_buffer60)|0);
     $99 = HEAP32[$4>>2]|0;
     $100 = ($99|0)==(0);
     $101 = HEAP32[199583]|0;
     if ($100) {
      HEAP32[$vararg_buffer67>>2] = 16004;
      $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
      HEAP32[$vararg_ptr70>>2] = 20037;
      $vararg_ptr71 = ((($vararg_buffer67)) + 8|0);
      HEAP32[$vararg_ptr71>>2] = $3;
      (_fprintf($101,20111,$vararg_buffer67)|0);
     } else {
      HEAP32[$vararg_buffer63>>2] = 16004;
      $vararg_ptr66 = ((($vararg_buffer63)) + 4|0);
      HEAP32[$vararg_ptr66>>2] = $3;
      (_fprintf($101,20049,$vararg_buffer63)|0);
     }
     $102 = (($$1157) + 2)|0;
     $$1155 = $102;
     break L28;
     break;
    }
    case 4:  {
     HEAP32[$vararg_buffer72>>2] = $$sroa$0$0$copyload15;
     (_sprintf($3,20046,$vararg_buffer72)|0);
     $103 = HEAP32[$4>>2]|0;
     $104 = ($103|0)==(0);
     $105 = HEAP32[199583]|0;
     if ($104) {
      HEAP32[$vararg_buffer79>>2] = 16004;
      $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
      HEAP32[$vararg_ptr82>>2] = 20037;
      $vararg_ptr83 = ((($vararg_buffer79)) + 8|0);
      HEAP32[$vararg_ptr83>>2] = $3;
      (_fprintf($105,20260,$vararg_buffer79)|0);
     } else {
      HEAP32[$vararg_buffer75>>2] = 16004;
      $vararg_ptr78 = ((($vararg_buffer75)) + 4|0);
      HEAP32[$vararg_ptr78>>2] = $3;
      (_fprintf($105,20198,$vararg_buffer75)|0);
     }
     $106 = (($$1157) + 4)|0;
     $$1155 = $106;
     break L28;
     break;
    }
    case 5:  {
     $107 = ($$sroa$0$0$copyload17|0)<(1);
     $108 = ($$sroa$0$0$copyload15>>>0)<(0);
     $109 = ($$sroa$0$0$copyload17|0)==(1);
     $110 = $109 & $108;
     $111 = $107 | $110;
     if ($111) {
      $112 = $vararg_buffer84;
      $113 = $112;
      HEAP32[$113>>2] = $$sroa$0$0$copyload15;
      $114 = (($112) + 4)|0;
      $115 = $114;
      HEAP32[$115>>2] = $$sroa$0$0$copyload17;
      (_sprintf($3,29196,$vararg_buffer84)|0);
     } else {
      $116 = $vararg_buffer87;
      $117 = $116;
      HEAP32[$117>>2] = $$sroa$0$0$copyload15;
      $118 = (($116) + 4)|0;
      $119 = $118;
      HEAP32[$119>>2] = $$sroa$0$0$copyload17;
      (_sprintf($3,29206,$vararg_buffer87)|0);
     }
     $120 = HEAP32[$4>>2]|0;
     $121 = ($120|0)==(0);
     $122 = HEAP32[199583]|0;
     if ($121) {
      HEAP32[$vararg_buffer94>>2] = 16004;
      $vararg_ptr97 = ((($vararg_buffer94)) + 4|0);
      HEAP32[$vararg_ptr97>>2] = 20037;
      $vararg_ptr98 = ((($vararg_buffer94)) + 8|0);
      HEAP32[$vararg_ptr98>>2] = $3;
      (_fprintf($122,20421,$vararg_buffer94)|0);
     } else {
      HEAP32[$vararg_buffer90>>2] = 16004;
      $vararg_ptr93 = ((($vararg_buffer90)) + 4|0);
      HEAP32[$vararg_ptr93>>2] = $3;
      (_fprintf($122,20347,$vararg_buffer90)|0);
     }
     $123 = (($$1157) + 8)|0;
     $$1155 = $123;
     break L28;
     break;
    }
    case 6:  {
     $124 = (HEAP32[tempDoublePtr>>2]=$$sroa$0$0$copyload15,+HEAPF32[tempDoublePtr>>2]);
     $125 = $124;
     HEAPF64[$vararg_buffer99>>3] = $125;
     (_sprintf($3,20520,$vararg_buffer99)|0);
     $126 = HEAP32[$4>>2]|0;
     $127 = ($126|0)==(0);
     $128 = HEAP32[199583]|0;
     if ($127) {
      HEAP32[$vararg_buffer106>>2] = 16004;
      $vararg_ptr109 = ((($vararg_buffer106)) + 4|0);
      HEAP32[$vararg_ptr109>>2] = 20037;
      $vararg_ptr110 = ((($vararg_buffer106)) + 8|0);
      HEAP32[$vararg_ptr110>>2] = $3;
      (_fprintf($128,20260,$vararg_buffer106)|0);
     } else {
      HEAP32[$vararg_buffer102>>2] = 16004;
      $vararg_ptr105 = ((($vararg_buffer102)) + 4|0);
      HEAP32[$vararg_ptr105>>2] = $3;
      (_fprintf($128,20198,$vararg_buffer102)|0);
     }
     $129 = (($$1157) + 4)|0;
     $$1155 = $129;
     break L28;
     break;
    }
    case 8:  {
     HEAP32[tempDoublePtr>>2] = $$sroa$0$0$copyload15;HEAP32[tempDoublePtr+4>>2] = $$sroa$0$0$copyload17;$130 = +HEAPF64[tempDoublePtr>>3];
     HEAPF64[$vararg_buffer111>>3] = $130;
     (_sprintf($3,20526,$vararg_buffer111)|0);
     $131 = HEAP32[$4>>2]|0;
     $132 = ($131|0)==(0);
     $133 = HEAP32[199583]|0;
     if ($132) {
      HEAP32[$vararg_buffer118>>2] = 16004;
      $vararg_ptr121 = ((($vararg_buffer118)) + 4|0);
      HEAP32[$vararg_ptr121>>2] = 20037;
      $vararg_ptr122 = ((($vararg_buffer118)) + 8|0);
      HEAP32[$vararg_ptr122>>2] = $3;
      (_fprintf($133,20421,$vararg_buffer118)|0);
     } else {
      HEAP32[$vararg_buffer114>>2] = 16004;
      $vararg_ptr117 = ((($vararg_buffer114)) + 4|0);
      HEAP32[$vararg_ptr117>>2] = $3;
      (_fprintf($133,20347,$vararg_buffer114)|0);
     }
     $134 = (($$1157) + 8)|0;
     $$1155 = $134;
     break L28;
     break;
    }
    default: {
     $135 = HEAP32[199583]|0;
     (_fwrite(20533,18,1,$135)|0);
     $136 = (($$1157) + 1)|0;
     $$1155 = $136;
     break L28;
    }
    }
   } else {
    $$1155 = $$0154156;
   }
  } while(0);
  $137 = (($$1157) + 1)|0;
  $138 = $137 & 3;
  $139 = ($138|0)==(0);
  if ($139) {
   $142 = HEAP32[199583]|0;
   (_fwrite(16153,7,1,$142)|0);
  }
  $140 = HEAP32[(76764)>>2]|0;
  $141 = ($137|0)<($140|0);
  if ($141) {
   $$0154156 = $$1155;$$1157 = $137;
  } else {
   break;
  }
 }
 $143 = HEAP32[199583]|0;
 (_fwrite(16689,10,1,$143)|0);
 STACKTOP = sp;return;
}
function _imprime_footer_css() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[199583]|0;
 (_fwrite(15517,15,1,$0)|0);
 $1 = HEAP32[199583]|0;
 (_fwrite(19500,48,1,$1)|0);
 $2 = HEAP32[199583]|0;
 (_fwrite(15533,10,1,$2)|0);
 $3 = HEAP32[199583]|0;
 (_fwrite(15544,47,1,$3)|0);
 $4 = HEAP32[199583]|0;
 (_fwrite(15592,68,1,$4)|0);
 $5 = HEAP32[199583]|0;
 (_fwrite(15661,42,1,$5)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(15704,11,1,$6)|0);
 $7 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$7)|0);
 $8 = HEAP32[199583]|0;
 (_fwrite(15716,16,1,$8)|0);
 return;
}
function _imprime_inicio() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 dest=$0; src=23157; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = (_fopen($0,15451)|0);
 HEAP32[199583] = $1;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP32[482]|0;
  HEAP32[$vararg_buffer>>2] = $0;
  (_fprintf($3,15453,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 } else {
  _imprime_intro(23168);
  _imprime_nav1();
  $4 = HEAP32[199583]|0;
  (_fwrite(15485,9,1,$4)|0);
  _imprime_conf();
  $5 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$5)|0);
  $6 = HEAP32[199583]|0;
  (_fwrite(15753,8,1,$6)|0);
  $7 = HEAP32[199583]|0;
  (_fwrite(23183,22,1,$7)|0);
  _imprime_Dmem_col();
  $8 = HEAP32[199583]|0;
  (_fwrite(23206,10,1,$8)|0);
  _imprime_Imem_col();
  $9 = HEAP32[199583]|0;
  (_fwrite(23217,11,1,$9)|0);
  $10 = HEAP32[199583]|0;
  (_fwrite(16075,13,1,$10)|0);
  _imprime_footer();
  $11 = HEAP32[199583]|0;
  (_fclose($11)|0);
  STACKTOP = sp;return;
 }
}
function _imprime_nav1() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[199583]|0;
 (_fwrite(18099,29,1,$0)|0);
 $1 = HEAP32[199583]|0;
 (_fwrite(18129,38,1,$1)|0);
 $2 = HEAP32[199583]|0;
 (_fwrite(18168,37,1,$2)|0);
 $3 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 1;
 (_fprintf($3,24257,$vararg_buffer)|0);
 $4 = HEAP32[199583]|0;
 (_fwrite(18368,19,1,$4)|0);
 $5 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 1;
 (_fprintf($5,24295,$vararg_buffer1)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(18368,19,1,$6)|0);
 $7 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 840457;
 (_fprintf($7,24336,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _imprime_conf() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer7 = 0, $vararg_ptr13 = 0, $vararg_ptr20 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr41 = 0, $vararg_ptr48 = 0, $vararg_ptr55 = 0, $vararg_ptr62 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $vararg_buffer59 = sp + 272|0;
 $vararg_buffer56 = sp + 264|0;
 $vararg_buffer52 = sp + 256|0;
 $vararg_buffer49 = sp + 248|0;
 $vararg_buffer45 = sp + 240|0;
 $vararg_buffer42 = sp + 232|0;
 $vararg_buffer38 = sp + 224|0;
 $vararg_buffer35 = sp + 216|0;
 $vararg_buffer31 = sp + 208|0;
 $vararg_buffer28 = sp + 200|0;
 $vararg_buffer24 = sp + 192|0;
 $vararg_buffer21 = sp + 184|0;
 $vararg_buffer17 = sp + 176|0;
 $vararg_buffer14 = sp + 168|0;
 $vararg_buffer10 = sp + 160|0;
 $vararg_buffer7 = sp + 152|0;
 $vararg_buffer4 = sp + 144|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 128|0;
 $0 = sp;
 $1 = HEAP32[199583]|0;
 (_fwrite(23413,24,1,$1)|0);
 $2 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$2)|0);
 $3 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$3)|0);
 $4 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15781;
 (_fprintf($4,23438,$vararg_buffer)|0);
 $5 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$5)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$6)|0);
 $7 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 15781;
 (_fprintf($7,23505,$vararg_buffer1)|0);
 $8 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 15926;
 (_fprintf($8,23556,$vararg_buffer4)|0);
 $9 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$9)|0);
 $10 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$10)|0);
 $11 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer7>>2] = 15958;
 (_fprintf($11,23602,$vararg_buffer7)|0);
 $12 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer10>>2] = 16004;
 $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
 HEAP32[$vararg_ptr13>>2] = 840457;
 (_fprintf($12,23636,$vararg_buffer10)|0);
 $13 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$13)|0);
 $14 = HEAP32[19178]|0;
 switch ($14|0) {
 case 2:  {
  $15 = $0;
  $16 = $15;
  HEAP32[$16>>2] = 1735289166;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = 7302773;
  break;
 }
 case 0:  {
  ;HEAP8[$0>>0]=HEAP8[23679>>0]|0;HEAP8[$0+1>>0]=HEAP8[23679+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[23679+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[23679+3>>0]|0;HEAP8[$0+4>>0]=HEAP8[23679+4>>0]|0;HEAP8[$0+5>>0]=HEAP8[23679+5>>0]|0;HEAP8[$0+6>>0]=HEAP8[23679+6>>0]|0;
  break;
 }
 case 1:  {
  dest=$0; src=23686; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 default: {
 }
 }
 $19 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$19)|0);
 $20 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer14>>2] = 15958;
 (_fprintf($20,23697,$vararg_buffer14)|0);
 $21 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer17>>2] = 16004;
 $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
 HEAP32[$vararg_ptr20>>2] = $0;
 (_fprintf($21,23636,$vararg_buffer17)|0);
 $22 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$22)|0);
 $23 = HEAP32[19177]|0;
 switch ($23|0) {
 case 6:  {
  dest=$0; src=23739; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 7:  {
  dest=$0; src=23759; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 8:  {
  dest=$0; src=23779; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 3:  {
  dest=$0; src=23799; stop=dest+26|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 4:  {
  dest=$0; src=23825; stop=dest+26|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 5:  {
  dest=$0; src=23851; stop=dest+26|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 0:  {
  dest=$0; src=23877; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 1:  {
  dest=$0; src=23892; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 2:  {
  dest=$0; src=23907; stop=dest+15|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  break;
 }
 default: {
 }
 }
 $24 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$24)|0);
 $25 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer21>>2] = 15958;
 (_fprintf($25,23922,$vararg_buffer21)|0);
 $26 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer24>>2] = 16004;
 $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
 HEAP32[$vararg_ptr27>>2] = $0;
 (_fprintf($26,23636,$vararg_buffer24)|0);
 $27 = HEAP32[199583]|0;
 (_fwrite(23978,7,1,$27)|0);
 $28 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$28)|0);
 $29 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer28>>2] = 15958;
 (_fprintf($29,23986,$vararg_buffer28)|0);
 $30 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer31>>2] = 16004;
 $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
 HEAP32[$vararg_ptr34>>2] = 32;
 (_fprintf($30,24021,$vararg_buffer31)|0);
 $31 = HEAP32[199583]|0;
 (_fwrite(23978,7,1,$31)|0);
 $32 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$32)|0);
 $33 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer35>>2] = 15958;
 (_fprintf($33,24064,$vararg_buffer35)|0);
 $34 = HEAP32[199583]|0;
 $35 = HEAP32[21]|0;
 HEAP32[$vararg_buffer38>>2] = 16004;
 $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
 HEAP32[$vararg_ptr41>>2] = $35;
 (_fprintf($34,24021,$vararg_buffer38)|0);
 $36 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$36)|0);
 $37 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$37)|0);
 $38 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer42>>2] = 15958;
 (_fprintf($38,24110,$vararg_buffer42)|0);
 $39 = HEAP32[199583]|0;
 $40 = HEAP32[18]|0;
 HEAP32[$vararg_buffer45>>2] = 16004;
 $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
 HEAP32[$vararg_ptr48>>2] = $40;
 (_fprintf($39,24021,$vararg_buffer45)|0);
 $41 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$41)|0);
 $42 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$42)|0);
 $43 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer49>>2] = 15958;
 (_fprintf($43,24159,$vararg_buffer49)|0);
 $44 = HEAP32[199583]|0;
 $45 = HEAP32[20]|0;
 HEAP32[$vararg_buffer52>>2] = 16004;
 $vararg_ptr55 = ((($vararg_buffer52)) + 4|0);
 HEAP32[$vararg_ptr55>>2] = $45;
 (_fprintf($44,24021,$vararg_buffer52)|0);
 $46 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$46)|0);
 $47 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$47)|0);
 $48 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer56>>2] = 15958;
 (_fprintf($48,24208,$vararg_buffer56)|0);
 $49 = HEAP32[199583]|0;
 $50 = HEAP32[19]|0;
 HEAP32[$vararg_buffer59>>2] = 16004;
 $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
 HEAP32[$vararg_ptr62>>2] = $50;
 (_fprintf($49,24021,$vararg_buffer59)|0);
 $51 = HEAP32[199583]|0;
 (_fwrite(23978,7,1,$51)|0);
 $52 = HEAP32[199583]|0;
 (_fwrite(16689,10,1,$52)|0);
 STACKTOP = sp;return;
}
function _imprime_Imem_col() {
 var $$0 = 0, $$0$in6 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, $sext5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 40|0;
 $1 = HEAP32[199583]|0;
 (_fwrite(23229,30,1,$1)|0);
 $2 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$2)|0);
 $3 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer>>2] = 15781;
 (_fprintf($3,15762,$vararg_buffer)|0);
 $4 = HEAP32[199583]|0;
 (_fwrite(23260,61,1,$4)|0);
 $5 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$5)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$6)|0);
 $7 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer1>>2] = 15781;
 (_fprintf($7,19623,$vararg_buffer1)|0);
 $8 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 190;
 $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
 HEAP32[$vararg_ptr7>>2] = 15926;
 (_fprintf($8,23322,$vararg_buffer4)|0);
 $9 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$9)|0);
 $10 = HEAP32[19192]|0;
 $sext5 = $10 << 16;
 $11 = $sext5 >> 16;
 $12 = HEAP32[(76772)>>2]|0;
 $13 = ($11|0)<($12|0);
 $14 = HEAP32[199583]|0;
 if ($13) {
  $$0$in6 = $10;$15 = $14;$23 = $11;
 } else {
  $$lcssa = $14;
  (_fwrite(16689,10,1,$$lcssa)|0);
  STACKTOP = sp;return;
 }
 while(1) {
  $$0 = $$0$in6&65535;
  (_fwrite(16232,5,1,$15)|0);
  $16 = $$0 << 16 >> 16;
  $17 = ($16|0)<(0);
  $18 = $17 << 31 >> 31;
  _te_etiqueta($0,$16,$18,2);
  $19 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer8>>2] = 15958;
  $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
  HEAP32[$vararg_ptr11>>2] = $0;
  (_fprintf($19,19851,$vararg_buffer8)|0);
  _imprime_instruccion_color($0,$16,$18,1);
  $20 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer12>>2] = 16004;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $0;
  (_fprintf($20,23385,$vararg_buffer12)|0);
  $21 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$21)|0);
  $22 = (($23) + 4)|0;
  $sext = $22 << 16;
  $24 = $sext >> 16;
  $25 = HEAP32[(76772)>>2]|0;
  $26 = ($24|0)<($25|0);
  $27 = HEAP32[199583]|0;
  if ($26) {
   $$0$in6 = $22;$15 = $27;$23 = $24;
  } else {
   $$lcssa = $27;
   break;
  }
 }
 (_fwrite(16689,10,1,$$lcssa)|0);
 STACKTOP = sp;return;
}
function _imprime_inicio_css() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $1 = (_fopen(26874,15451)|0);
 HEAP32[199584] = $1;
 (_fclose($1)|0);
 $2 = (_fopen(27608,15451)|0);
 HEAP32[199585] = $2;
 (_fclose($2)|0);
 $3 = HEAP32[19180]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  HEAP32[$vararg_buffer>>2] = 24358;
  (_sprintf($0,24351,$vararg_buffer)|0);
 } else {
  dest=$0; src=23157; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 }
 $5 = (_fopen($0,15451)|0);
 HEAP32[199583] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[482]|0;
  HEAP32[$vararg_buffer1>>2] = $0;
  (_fprintf($7,15453,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 $8 = HEAP32[19180]|0;
 $9 = ($8|0)==(1);
 if ($9) {
  (_fwrite(24364,480,1,$5)|0);
 }
 _imprime_w3css(24845);
 _imprime_nav1_css();
 $10 = HEAP32[199583]|0;
 (_fwrite(19061,13,1,$10)|0);
 $11 = HEAP32[199583]|0;
 (_fwrite(24852,34,1,$11)|0);
 _imprime_conf();
 $12 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$12)|0);
 $13 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$13)|0);
 $14 = HEAP32[199583]|0;
 (_fwrite(24887,21,1,$14)|0);
 $15 = HEAP32[199583]|0;
 (_fwrite(24909,35,1,$15)|0);
 _imprime_Dmem_col();
 $16 = HEAP32[199583]|0;
 (_fwrite(19185,7,1,$16)|0);
 $17 = HEAP32[199583]|0;
 (_fwrite(24909,35,1,$17)|0);
 _imprime_Imem_col();
 $18 = HEAP32[199583]|0;
 (_fwrite(19185,7,1,$18)|0);
 $19 = HEAP32[199583]|0;
 (_fwrite(19185,7,1,$19)|0);
 _imprime_footer_css();
 $20 = HEAP32[19180]|0;
 $21 = ($20|0)==(1);
 $22 = HEAP32[199583]|0;
 if ($21) {
  (_fwrite(19497,2,1,$22)|0);
  STACKTOP = sp;return;
 } else {
  (_fclose($22)|0);
  STACKTOP = sp;return;
 }
}
function _imprime_nav1_css() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[199583]|0;
 (_fwrite(22112,33,1,$0)|0);
 $1 = HEAP32[199583]|0;
 (_fwrite(22146,42,1,$1)|0);
 $2 = HEAP32[19176]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer>>2] = 840585;
  (_fprintf($4,22189,$vararg_buffer)|0);
 }
 $5 = HEAP32[199583]|0;
 (_fwrite(22256,76,1,$5)|0);
 $6 = HEAP32[199583]|0;
 (_fwrite(24945,61,1,$6)|0);
 $7 = HEAP32[19179]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $10 = HEAP32[199583]|0;
  (_fwrite(19365,8,1,$10)|0);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[199583]|0;
 (_fwrite(25007,66,1,$9)|0);
 $10 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$10)|0);
 STACKTOP = sp;return;
}
function _imprime_final() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 72|0;
 dest=$0; src=25074; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = (_fopen($0,15451)|0);
 HEAP32[199583] = $1;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP32[482]|0;
  HEAP32[$vararg_buffer>>2] = $0;
  (_fprintf($3,15453,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 } else {
  _imprime_intro(19050);
  _imprime_nav1();
  $4 = HEAP32[199583]|0;
  (_fwrite(15485,9,1,$4)|0);
  $5 = HEAP32[199583]|0;
  (_fwrite(15753,8,1,$5)|0);
  $6 = HEAP32[199583]|0;
  (_fwrite(16232,5,1,$6)|0);
  $7 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer1>>2] = 15781;
  (_fprintf($7,25085,$vararg_buffer1)|0);
  $8 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$8)|0);
  $9 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer4>>2] = 15781;
  (_fprintf($9,15762,$vararg_buffer4)|0);
  $10 = HEAP32[199583]|0;
  (_fwrite(25146,30,1,$10)|0);
  $11 = HEAP32[199583]|0;
  (_fwrite(25177,37,1,$11)|0);
  $12 = HEAP32[199583]|0;
  (_fwrite(25215,27,1,$12)|0);
  $13 = HEAP32[199583]|0;
  (_fwrite(25243,30,1,$13)|0);
  $14 = HEAP32[199583]|0;
  (_fwrite(25274,36,1,$14)|0);
  $15 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$15)|0);
  $16 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer7>>2] = 15926;
  (_fprintf($16,15762,$vararg_buffer7)|0);
  $17 = HEAP32[199583]|0;
  $18 = HEAP32[19183]|0;
  HEAP32[$vararg_buffer10>>2] = $18;
  (_fprintf($17,25311,$vararg_buffer10)|0);
  $19 = HEAP32[199583]|0;
  $20 = HEAP32[(76736)>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $20;
  (_fprintf($19,25311,$vararg_buffer13)|0);
  $21 = HEAP32[199583]|0;
  $22 = HEAP32[19183]|0;
  $23 = (+($22|0));
  $24 = HEAP32[(76736)>>2]|0;
  $25 = (+($24|0));
  $26 = $23 / $25;
  $27 = $26;
  HEAPF64[$vararg_buffer16>>3] = $27;
  (_fprintf($21,25327,$vararg_buffer16)|0);
  $28 = HEAP32[199583]|0;
  $29 = HEAP32[(76748)>>2]|0;
  HEAP32[$vararg_buffer19>>2] = $29;
  (_fprintf($28,25311,$vararg_buffer19)|0);
  $30 = HEAP32[199583]|0;
  $31 = HEAP32[(76748)>>2]|0;
  $32 = (+($31|0));
  $33 = HEAP32[19183]|0;
  $34 = (+($33|0));
  $35 = $32 / $34;
  $36 = $35;
  HEAPF64[$vararg_buffer22>>3] = $36;
  (_fprintf($30,25327,$vararg_buffer22)|0);
  $37 = HEAP32[199583]|0;
  (_fwrite(15934,6,1,$37)|0);
  $38 = HEAP32[199583]|0;
  (_fwrite(16075,13,1,$38)|0);
  _imprime_conf();
  $39 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$39)|0);
  $40 = HEAP32[199583]|0;
  (_fwrite(15753,8,1,$40)|0);
  _imprime_int_regs();
  $41 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$41)|0);
  _imprime_fp_regs();
  $42 = HEAP32[199583]|0;
  (_fwrite(15495,5,1,$42)|0);
  $43 = HEAP32[199583]|0;
  (_fwrite(15753,8,1,$43)|0);
  $44 = HEAP32[199583]|0;
  (_fwrite(23183,22,1,$44)|0);
  _imprime_Dmem_col();
  $45 = HEAP32[199583]|0;
  (_fwrite(23206,10,1,$45)|0);
  _imprime_Imem_col();
  $46 = HEAP32[199583]|0;
  (_fwrite(23217,11,1,$46)|0);
  $47 = HEAP32[199583]|0;
  (_fwrite(16075,13,1,$47)|0);
  _imprime_footer();
  $48 = HEAP32[199583]|0;
  (_fclose($48)|0);
  STACKTOP = sp;return;
 }
}
function _imprime_final_css() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 88|0;
 dest=$0; src=25074; stop=dest+11|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $1 = HEAP32[19180]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = HEAP32[199583]|0;
  HEAP32[$vararg_buffer>>2] = $0;
  (_fprintf($3,19043,$vararg_buffer)|0);
 } else {
  $4 = (_fopen($0,15451)|0);
  HEAP32[199583] = $4;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $6 = HEAP32[482]|0;
   HEAP32[$vararg_buffer1>>2] = $0;
   (_fprintf($6,15453,$vararg_buffer1)|0);
   _exit(1);
   // unreachable;
  }
 }
 _imprime_w3css(25345);
 _imprime_nav1_css();
 $7 = HEAP32[199583]|0;
 (_fwrite(19061,13,1,$7)|0);
 $8 = HEAP32[199583]|0;
 (_fwrite(24852,34,1,$8)|0);
 $9 = HEAP32[199583]|0;
 (_fwrite(15753,8,1,$9)|0);
 $10 = HEAP32[199583]|0;
 (_fwrite(16232,5,1,$10)|0);
 $11 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer4>>2] = 15781;
 (_fprintf($11,25085,$vararg_buffer4)|0);
 $12 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$12)|0);
 $13 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer7>>2] = 15781;
 (_fprintf($13,15762,$vararg_buffer7)|0);
 $14 = HEAP32[199583]|0;
 (_fwrite(25146,30,1,$14)|0);
 $15 = HEAP32[199583]|0;
 (_fwrite(25177,37,1,$15)|0);
 $16 = HEAP32[199583]|0;
 (_fwrite(25215,27,1,$16)|0);
 $17 = HEAP32[199583]|0;
 (_fwrite(25243,30,1,$17)|0);
 $18 = HEAP32[199583]|0;
 (_fwrite(25274,36,1,$18)|0);
 $19 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$19)|0);
 $20 = HEAP32[199583]|0;
 HEAP32[$vararg_buffer10>>2] = 15926;
 (_fprintf($20,15762,$vararg_buffer10)|0);
 $21 = HEAP32[199583]|0;
 $22 = HEAP32[19183]|0;
 HEAP32[$vararg_buffer13>>2] = $22;
 (_fprintf($21,25311,$vararg_buffer13)|0);
 $23 = HEAP32[199583]|0;
 $24 = HEAP32[(76736)>>2]|0;
 HEAP32[$vararg_buffer16>>2] = $24;
 (_fprintf($23,25311,$vararg_buffer16)|0);
 $25 = HEAP32[199583]|0;
 $26 = HEAP32[19183]|0;
 $27 = (+($26|0));
 $28 = HEAP32[(76736)>>2]|0;
 $29 = (+($28|0));
 $30 = $27 / $29;
 $31 = $30;
 HEAPF64[$vararg_buffer19>>3] = $31;
 (_fprintf($25,25327,$vararg_buffer19)|0);
 $32 = HEAP32[199583]|0;
 $33 = HEAP32[(76748)>>2]|0;
 HEAP32[$vararg_buffer22>>2] = $33;
 (_fprintf($32,25311,$vararg_buffer22)|0);
 $34 = HEAP32[199583]|0;
 $35 = HEAP32[(76748)>>2]|0;
 $36 = (+($35|0));
 $37 = HEAP32[19183]|0;
 $38 = (+($37|0));
 $39 = $36 / $38;
 $40 = $39;
 HEAPF64[$vararg_buffer25>>3] = $40;
 (_fprintf($34,25327,$vararg_buffer25)|0);
 $41 = HEAP32[199583]|0;
 (_fwrite(15934,6,1,$41)|0);
 $42 = HEAP32[199583]|0;
 (_fwrite(16075,13,1,$42)|0);
 $43 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$43)|0);
 $44 = HEAP32[199583]|0;
 (_fwrite(24852,34,1,$44)|0);
 _imprime_conf();
 $45 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$45)|0);
 $46 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$46)|0);
 $47 = HEAP32[199583]|0;
 (_fwrite(24852,34,1,$47)|0);
 $48 = HEAP32[199583]|0;
 (_fwrite(19107,35,1,$48)|0);
 _imprime_int_regs_col();
 $49 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$49)|0);
 $50 = HEAP32[199583]|0;
 (_fwrite(19107,35,1,$50)|0);
 _imprime_fp_regs_col();
 $51 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$51)|0);
 $52 = HEAP32[199583]|0;
 (_fwrite(19107,35,1,$52)|0);
 _imprime_Dmem_col();
 $53 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$53)|0);
 $54 = HEAP32[199583]|0;
 (_fwrite(19107,35,1,$54)|0);
 _imprime_Imem_col();
 $55 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$55)|0);
 $56 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$56)|0);
 $57 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$57)|0);
 $58 = HEAP32[199583]|0;
 (_fwrite(25351,57,1,$58)|0);
 $59 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$59)|0);
 $60 = HEAP32[199583]|0;
 (_fwrite(25409,13,1,$60)|0);
 $61 = (_fopen(26874,29135)|0);
 HEAP32[199584] = $61;
 $62 = (_fgets($0,512,$61)|0);
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  while(1) {
   $64 = HEAP32[199583]|0;
   HEAP32[$vararg_buffer28>>2] = $0;
   (_fprintf($64,25423,$vararg_buffer28)|0);
   $65 = HEAP32[199584]|0;
   $66 = (_fgets($0,512,$65)|0);
   $67 = ($66|0)==(0|0);
   if ($67) {
    break;
   }
  }
 }
 $68 = HEAP32[199584]|0;
 (_fclose($68)|0);
 $69 = HEAP32[199583]|0;
 (_fwrite(25431,6,1,$69)|0);
 $70 = HEAP32[199583]|0;
 (_fwrite(19365,8,1,$70)|0);
 $71 = HEAP32[199583]|0;
 (_fwrite(15495,5,1,$71)|0);
 _imprime_footer_css();
 $72 = HEAP32[19180]|0;
 $73 = ($72|0)==(1);
 if (!($73)) {
  $75 = HEAP32[199583]|0;
  (_fclose($75)|0);
  STACKTOP = sp;return;
 }
 $74 = HEAP32[199583]|0;
 (_fwrite(25438,1435,1,$74)|0);
 $75 = HEAP32[199583]|0;
 (_fclose($75)|0);
 STACKTOP = sp;return;
}
function _pasar_a_ID_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[54840] = 0;
 HEAP16[(54852)>>1] = 0;
 ;HEAP32[(54844)>>2]=0|0;HEAP16[(54844)+4>>1]=0|0;HEAP8[(54844)+6>>0]=0|0;
 $0 = (54992);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(55000)>>2] = -1;
 return;
}
function _pasar_a_EX_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[55176] = 0;
 HEAP16[(55188)>>1] = 0;
 ;HEAP32[(55180)>>2]=0|0;HEAP16[(55180)+4>>1]=0|0;HEAP8[(55180)+6>>0]=0|0;
 ;HEAP32[(55328)>>2]=0|0;HEAP32[(55328)+4>>2]=0|0;HEAP32[(55328)+8>>2]=0|0;HEAP32[(55328)+12>>2]=0|0;HEAP32[(55328)+16>>2]=0|0;HEAP32[(55328)+20>>2]=0|0;
 $0 = (55352);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(55360)>>2] = -1;
 return;
}
function _pasar_a_MEM_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[55560] = 0;
 HEAP16[(55572)>>1] = 0;
 ;HEAP32[(55564)>>2]=0|0;HEAP16[(55564)+4>>1]=0|0;HEAP8[(55564)+6>>0]=0|0;
 ;HEAP32[(55704)>>2]=0|0;HEAP32[(55704)+4>>2]=0|0;HEAP32[(55704)+8>>2]=0|0;HEAP32[(55704)+12>>2]=0|0;HEAP32[(55704)+16>>2]=0|0;
 $0 = (55728);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(55736)>>2] = -1;
 return;
}
function _pasar_a_FP_LS_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[56840] = 0;
 HEAP16[(56852)>>1] = 0;
 ;HEAP32[(56844)>>2]=0|0;HEAP16[(56844)+4>>1]=0|0;HEAP8[(56844)+6>>0]=0|0;
 ;HEAP32[(56992)>>2]=0|0;HEAP32[(56992)+4>>2]=0|0;HEAP32[(56992)+8>>2]=0|0;HEAP32[(56992)+12>>2]=0|0;
 $0 = (57032);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(57040)>>2] = -1;
 return;
}
function _pasar_a_FP_A_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[57048] = 0;
 HEAP16[(57060)>>1] = 0;
 ;HEAP32[(57052)>>2]=0|0;HEAP16[(57052)+4>>1]=0|0;HEAP8[(57052)+6>>0]=0|0;
 ;HEAP32[(57200)>>2]=0|0;HEAP32[(57200)+4>>2]=0|0;HEAP32[(57200)+8>>2]=0|0;HEAP32[(57200)+12>>2]=0|0;
 $0 = (57240);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(57248)>>2] = -1;
 return;
}
function _pasar_a_FP_M_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[57464] = 0;
 HEAP16[(57476)>>1] = 0;
 ;HEAP32[(57468)>>2]=0|0;HEAP16[(57468)+4>>1]=0|0;HEAP8[(57468)+6>>0]=0|0;
 ;HEAP32[(57616)>>2]=0|0;HEAP32[(57616)+4>>2]=0|0;HEAP32[(57616)+8>>2]=0|0;HEAP32[(57616)+12>>2]=0|0;
 $0 = (57656);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(57664)>>2] = -1;
 return;
}
function _pasar_a_FP_C_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[57880] = 0;
 HEAP16[(57892)>>1] = 0;
 ;HEAP32[(57884)>>2]=0|0;HEAP16[(57884)+4>>1]=0|0;HEAP8[(57884)+6>>0]=0|0;
 ;HEAP32[(58032)>>2]=0|0;HEAP32[(58032)+4>>2]=0|0;HEAP32[(58032)+8>>2]=0|0;HEAP32[(58032)+12>>2]=0|0;
 $0 = (58072);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(58080)>>2] = -1;
 return;
}
function _pasar_a_FP_LS2_NOP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(60696)>>0] = 0;
 HEAP32[(60700)>>2] = 0;
 HEAP8[(60704)>>0] = 0;
 HEAP8[(60705)>>0] = 0;
 ;HEAP32[(60848)>>2]=0|0;HEAP32[(60848)+4>>2]=0|0;HEAP32[(60848)+8>>2]=0|0;HEAP32[(60848)+12>>2]=0|0;HEAP32[(60848)+16>>2]=0|0;HEAP32[(60848)+20>>2]=0|0;HEAP32[(60848)+24>>2]=0|0;HEAP32[(60848)+28>>2]=0|0;
 $0 = HEAP8[(60706)>>0]|0;
 $1 = $0&255;
 $2 = (((54296 + ($1<<4)|0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[19182]|0;
 $5 = HEAP32[21]|0;
 $6 = (($4) + -2)|0;
 $7 = (($6) + ($5))|0;
 $8 = ($3|0)==($7|0);
 if ($8) {
  HEAP32[$2>>2] = 0;
 }
 HEAP8[(60706)>>0] = 0;
 HEAP16[(60708)>>1] = 0;
 $9 = (60880);
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 HEAP32[(60888)>>2] = -1;
 return;
}
function _pasar_a_FP_A2_NOP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(64696)>>0] = 0;
 HEAP32[(64700)>>2] = 0;
 HEAP8[(64704)>>0] = 0;
 HEAP8[(64705)>>0] = 0;
 ;HEAP32[(64848)>>2]=0|0;HEAP32[(64848)+4>>2]=0|0;HEAP32[(64848)+8>>2]=0|0;HEAP32[(64848)+12>>2]=0|0;HEAP32[(64848)+16>>2]=0|0;HEAP32[(64848)+20>>2]=0|0;HEAP32[(64848)+24>>2]=0|0;HEAP32[(64848)+28>>2]=0|0;
 $0 = HEAP8[(64706)>>0]|0;
 $1 = $0&255;
 $2 = (((54296 + ($1<<4)|0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[19182]|0;
 $5 = HEAP32[18]|0;
 $6 = (($4) + -2)|0;
 $7 = (($6) + ($5))|0;
 $8 = ($3|0)==($7|0);
 if ($8) {
  HEAP32[$2>>2] = 0;
 }
 HEAP8[(64706)>>0] = 0;
 HEAP16[(64708)>>1] = 0;
 $9 = (64880);
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 HEAP32[(64888)>>2] = -1;
 return;
}
function _pasar_a_FP_M2_NOP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(68696)>>0] = 0;
 HEAP32[(68700)>>2] = 0;
 HEAP8[(68704)>>0] = 0;
 HEAP8[(68705)>>0] = 0;
 ;HEAP32[(68848)>>2]=0|0;HEAP32[(68848)+4>>2]=0|0;HEAP32[(68848)+8>>2]=0|0;HEAP32[(68848)+12>>2]=0|0;HEAP32[(68848)+16>>2]=0|0;HEAP32[(68848)+20>>2]=0|0;HEAP32[(68848)+24>>2]=0|0;HEAP32[(68848)+28>>2]=0|0;
 $0 = HEAP8[(68706)>>0]|0;
 $1 = $0&255;
 $2 = (((54296 + ($1<<4)|0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[19182]|0;
 $5 = HEAP32[19]|0;
 $6 = (($4) + -2)|0;
 $7 = (($6) + ($5))|0;
 $8 = ($3|0)==($7|0);
 if ($8) {
  HEAP32[$2>>2] = 0;
 }
 HEAP8[(68706)>>0] = 0;
 HEAP16[(68708)>>1] = 0;
 $9 = (68880);
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 HEAP32[(68888)>>2] = -1;
 return;
}
function _pasar_a_FP_C2_NOP() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(72696)>>0] = 0;
 HEAP32[(72700)>>2] = 0;
 HEAP8[(72704)>>0] = 0;
 HEAP8[(72705)>>0] = 0;
 ;HEAP32[(72848)>>2]=0|0;HEAP32[(72848)+4>>2]=0|0;HEAP32[(72848)+8>>2]=0|0;HEAP32[(72848)+12>>2]=0|0;HEAP32[(72848)+16>>2]=0|0;HEAP32[(72848)+20>>2]=0|0;HEAP32[(72848)+24>>2]=0|0;HEAP32[(72848)+28>>2]=0|0;
 $0 = HEAP8[(72706)>>0]|0;
 $1 = $0&255;
 $2 = (((54296 + ($1<<4)|0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[19182]|0;
 $5 = HEAP32[20]|0;
 $6 = (($4) + -2)|0;
 $7 = (($6) + ($5))|0;
 $8 = ($3|0)==($7|0);
 if ($8) {
  HEAP32[$2>>2] = 0;
 }
 HEAP8[(72706)>>0] = 0;
 HEAP16[(72708)>>1] = 0;
 $9 = (72880);
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 HEAP32[(72888)>>2] = -1;
 return;
}
function _pasar_a_ID_WB_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[(75784)>>3] = 0.0;
 HEAP8[75640] = 0;
 HEAP16[(75652)>>1] = 0;
 ;HEAP32[(75644)>>2]=0|0;HEAP16[(75644)+4>>1]=0|0;HEAP8[(75644)+6>>0]=0|0;
 $0 = (75792);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(75800)>>2] = -1;
 return;
}
function _pasar_a_FP_LS_WB_NOP() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[(74440)>>3] = 0.0;
 HEAP8[74296] = 0;
 HEAP16[(74308)>>1] = 0;
 ;HEAP32[(74300)>>2]=0|0;HEAP16[(74300)+4>>1]=0|0;HEAP8[(74300)+6>>0]=0|0;
 $0 = (74448);
 $1 = $0;
 HEAP32[$1>>2] = -1;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = -1;
 HEAP32[(74456)>>2] = -1;
 return;
}
function _hay_fuente1($0) {
 $0 = $0|0;
 var $$pr = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)>(-1);
 L1: do {
  if ($2) {
   $3 = ((($0)) + 8|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if (!($5)) {
    switch ($1<<24>>24) {
    case 0: case 1: case 83: case 108: case 110:  {
     break;
    }
    default: {
     $7 = 1;
     break L1;
    }
    }
   }
   $$pr = HEAP8[$0>>0]|0;
   $6 = $$pr;
   label = 5;
  } else {
   $6 = $1;
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   switch ($6<<24>>24) {
   case -75: case -127: case -114: case -76: case -128: case -115:  {
    $7 = 1;
    break L6;
    break;
   }
   default: {
   }
   }
   $7 = 0;
  }
 } while(0);
 return ($7|0);
}
function _hay_fuente2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)>(-1);
 L1: do {
  if ($2) {
   $3 = ((($0)) + 9|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $9 = 0;
   } else {
    switch ($1<<24>>24) {
    case 0: case 1: case 83: case 108: case 110:  {
     $9 = 0;
     break L1;
     break;
    }
    default: {
    }
    }
    $6 = ((($0)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(0);
    if ($8) {
     $9 = 1;
    } else {
     switch ($1<<24>>24) {
     case 16: case 17: case 18: case 65:  {
      $9 = 1;
      break L1;
      break;
     }
     default: {
     }
     }
     HEAP8[$0>>0] = 103;
     $9 = 1;
    }
   }
  } else {
   $9 = 0;
  }
 } while(0);
 return ($9|0);
}
function _hay_destino($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)>(-1);
 L1: do {
  if ($2) {
   $3 = ((($0)) + 10|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $6 = 0;
   } else {
    switch ($1<<24>>24) {
    case 16: case 17: case 18: case 65: case 0: case 1: case 100: case 101: case 102: case 103: case 104: case 105: case 108: case 109: case 110: case 111:  {
     $6 = 0;
     break L1;
     break;
    }
    default: {
    }
    }
    $6 = 1;
   }
  } else {
   $6 = 0;
  }
 } while(0);
 return ($6|0);
}
function _hay_fuente1_ID() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 _memcpy(($$byval_copy|0),(55008|0),144)|0;
 $0 = (_hay_fuente1($$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _hay_fuente2_ID() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 _memcpy(($$byval_copy|0),(55008|0),144)|0;
 $0 = (_hay_fuente2($$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _hay_fuente1_EX() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 _memcpy(($$byval_copy|0),(55368|0),144)|0;
 $0 = (_hay_fuente1($$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _hay_fuente2_EX() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 _memcpy(($$byval_copy|0),(55368|0),144)|0;
 $0 = (_hay_fuente2($$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _hay_destino_EX() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 _memcpy(($$byval_copy|0),(55368|0),144)|0;
 $0 = (_hay_destino($$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _hay_destino_MEM() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 _memcpy(($$byval_copy|0),(55744|0),144)|0;
 $0 = (_hay_destino($$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _hay_destino_WB() {
 var $$byval_copy = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $$byval_copy = sp;
 _memcpy(($$byval_copy|0),(56104|0),144)|0;
 $0 = (_hay_destino($$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _hay_fuente1_FP_ID() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[55008]|0;
 $1 = ($0<<24>>24)>(-1);
 L1: do {
  if ($1) {
   $2 = 0;
  } else {
   switch ($0<<24>>24) {
   case -75: case -127: case -114: case -128: case -115: case -76:  {
    $2 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $2 = 1;
  }
 } while(0);
 return ($2|0);
}
function _hay_fuente2_FP_ID() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[55008]|0;
 $1 = ($0<<24>>24)<(0);
 $2 = HEAP32[(55012)>>2]|0;
 $3 = ($2|0)==(0);
 $4 = $1 & $3;
 $5 = $4&1;
 return ($5|0);
}
function _hay_destino_FP_WB() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[75472]|0;
 $1 = ($0<<24>>24)<(0);
 L1: do {
  if ($1) {
   switch ($0<<24>>24) {
   case -75: case -127: case -114:  {
    $2 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $2 = 1;
  } else {
   $2 = 0;
  }
 } while(0);
 return ($2|0);
}
function _hay_fuente1_A1() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[57256]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 return ($2|0);
}
function _hay_fuente1_M1() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[57672]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 return ($2|0);
}
function _hay_fuente1_C1() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[58088]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 return ($2|0);
}
function _hay_fuente2_A1() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[57256]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 return ($2|0);
}
function _hay_fuente2_M1() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[57672]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 return ($2|0);
}
function _hay_fuente2_C1() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[58088]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 return ($2|0);
}
function _hay_fuente1_LS1() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[56632]|0;
 $1 = ($0<<24>>24)!=(0);
 $2 = $1&1;
 return ($2|0);
}
function _hay_fuente2_LS1() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[56632]|0;
 switch ($0<<24>>24) {
 case -75:  {
  $1 = 1;
  break;
 }
 case -114:  {
  $1 = 1;
  break;
 }
 case -127:  {
  $1 = 1;
  break;
 }
 default: {
  $1 = 0;
 }
 }
 return ($1|0);
}
function _process_syscall() {
 var $$0 = 0, $$033 = 0, $$1 = 0, $$byval_copy96 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $cond = 0, $cond100 = 0, $cond101 = 0, $cond102 = 0;
 var $cond103 = 0, $cond104 = 0, $cond105 = 0, $cond106 = 0, $cond107 = 0, $cond108 = 0, $cond109 = 0, $or$cond = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0;
 var $vararg_buffer91 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $$byval_copy96 = sp + 272|0;
 $vararg_buffer91 = sp + 264|0;
 $vararg_buffer88 = sp + 256|0;
 $vararg_buffer85 = sp + 248|0;
 $vararg_buffer82 = sp + 240|0;
 $vararg_buffer79 = sp + 232|0;
 $vararg_buffer76 = sp + 224|0;
 $vararg_buffer73 = sp + 216|0;
 $vararg_buffer70 = sp + 208|0;
 $vararg_buffer67 = sp + 200|0;
 $vararg_buffer64 = sp + 192|0;
 $vararg_buffer61 = sp + 184|0;
 $vararg_buffer58 = sp + 176|0;
 $vararg_buffer55 = sp + 168|0;
 $vararg_buffer52 = sp + 160|0;
 $vararg_buffer49 = sp + 152|0;
 $vararg_buffer46 = sp + 144|0;
 $vararg_buffer43 = sp + 136|0;
 $vararg_buffer40 = sp + 128|0;
 $vararg_buffer37 = sp + 120|0;
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer7 = sp + 40|0;
 $vararg_buffer4 = sp + 32|0;
 $vararg_buffer1 = sp + 24|0;
 $vararg_buffer = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 $2 = sp + 288|0;
 $3 = sp + 280|0;
 dest=$2; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $4 = (54048);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (54064);
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (54072);
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 do {
  switch ($6|0) {
  case 1:  {
   $cond109 = ($9|0)==(0);
   if ($cond109) {
    $22 = $vararg_buffer;
    $23 = $22;
    HEAP32[$23>>2] = $12;
    $24 = (($22) + 4)|0;
    $25 = $24;
    HEAP32[$25>>2] = $15;
    (_printf(29196,$vararg_buffer)|0);
    $26 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $26;
    $27 = $vararg_buffer1;
    $28 = $27;
    HEAP32[$28>>2] = $12;
    $29 = (($27) + 4)|0;
    $30 = $29;
    HEAP32[$30>>2] = $15;
    (_sprintf(840713,26887,$vararg_buffer1)|0);
    $31 = HEAP32[199584]|0;
    $32 = $vararg_buffer4;
    $33 = $32;
    HEAP32[$33>>2] = $12;
    $34 = (($32) + 4)|0;
    $35 = $34;
    HEAP32[$35>>2] = $15;
    (_fprintf($31,26887,$vararg_buffer4)|0);
    $36 = HEAP32[199584]|0;
    (_fclose($36)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 2:  {
   $cond108 = ($9|0)==(0);
   if ($cond108) {
    $37 = +HEAPF32[(54488)>>2];
    $38 = $37;
    HEAPF64[$vararg_buffer7>>3] = $38;
    (_printf(26905,$vararg_buffer7)|0);
    $39 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $39;
    $40 = +HEAPF32[(54488)>>2];
    $41 = $40;
    HEAPF64[$vararg_buffer10>>3] = $41;
    (_sprintf(840713,26908,$vararg_buffer10)|0);
    $42 = HEAP32[199584]|0;
    $43 = +HEAPF32[(54488)>>2];
    $44 = $43;
    HEAPF64[$vararg_buffer13>>3] = $44;
    (_fprintf($42,26908,$vararg_buffer13)|0);
    $45 = HEAP32[199584]|0;
    (_fclose($45)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 3:  {
   $cond107 = ($9|0)==(0);
   if ($cond107) {
    $46 = +HEAPF64[(54488)>>3];
    HEAPF64[$vararg_buffer16>>3] = $46;
    (_printf(26926,$vararg_buffer16)|0);
    $47 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $47;
    $48 = +HEAPF64[(54488)>>3];
    HEAPF64[$vararg_buffer19>>3] = $48;
    (_sprintf(840713,26930,$vararg_buffer19)|0);
    $49 = HEAP32[199584]|0;
    $50 = +HEAPF64[(54488)>>3];
    HEAPF64[$vararg_buffer22>>3] = $50;
    (_fprintf($49,26930,$vararg_buffer22)|0);
    $51 = HEAP32[199584]|0;
    (_fclose($51)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 4:  {
   $cond106 = ($9|0)==(0);
   if ($cond106) {
    $$0 = 0;
    while(1) {
     $52 = (_i64Add(($$0|0),0,($12|0),($15|0))|0);
     $53 = tempRet0;
     $54 = (37648 + ($52)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = (($2) + ($$0)|0);
     HEAP8[$56>>0] = $55;
     $57 = (($$0) + 1)|0;
     $58 = ($55<<24>>24)!=(0);
     $59 = ($57|0)<(128);
     $60 = $58 & $59;
     if ($60) {
      $$0 = $57;
     } else {
      break;
     }
    }
    HEAP8[$3>>0] = $55;
    HEAP32[$vararg_buffer25>>2] = $2;
    (_printf(26950,$vararg_buffer25)|0);
    $61 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $61;
    HEAP32[$vararg_buffer28>>2] = $2;
    (_sprintf(840713,26953,$vararg_buffer28)|0);
    $62 = HEAP32[199584]|0;
    HEAP32[$vararg_buffer31>>2] = $2;
    (_fprintf($62,26953,$vararg_buffer31)|0);
    $63 = HEAP32[199584]|0;
    (_fclose($63)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 5:  {
   $cond105 = ($9|0)==(0);
   if ($cond105) {
    HEAP32[$vararg_buffer34>>2] = $0;
    (_scanf(29196,$vararg_buffer34)|0);
    $64 = $0;
    $65 = $64;
    $66 = HEAP32[$65>>2]|0;
    $67 = (($64) + 4)|0;
    $68 = $67;
    $69 = HEAP32[$68>>2]|0;
    _escribe_int_reg(2,0,$66,$69,5,1);
    $70 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $70;
    $71 = $0;
    $72 = $71;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($71) + 4)|0;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = $vararg_buffer37;
    $78 = $77;
    HEAP32[$78>>2] = $73;
    $79 = (($77) + 4)|0;
    $80 = $79;
    HEAP32[$80>>2] = $76;
    (_sprintf(840713,26969,$vararg_buffer37)|0);
    $81 = HEAP32[199584]|0;
    $82 = $0;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($82) + 4)|0;
    $86 = $85;
    $87 = HEAP32[$86>>2]|0;
    $88 = $vararg_buffer40;
    $89 = $88;
    HEAP32[$89>>2] = $84;
    $90 = (($88) + 4)|0;
    $91 = $90;
    HEAP32[$91>>2] = $87;
    (_fprintf($81,26969,$vararg_buffer40)|0);
    $92 = HEAP32[199584]|0;
    (_fclose($92)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 6:  {
   $cond104 = ($9|0)==(0);
   if ($cond104) {
    HEAP32[$vararg_buffer43>>2] = $1;
    (_scanf(26905,$vararg_buffer43)|0);
    ;HEAP32[$$byval_copy96>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy96+4>>2]=HEAP32[$1+4>>2]|0;
    _escribe_fp_reg(0,0,$$byval_copy96,6,1);
    $93 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $93;
    $94 = +HEAPF32[$1>>2];
    $95 = $94;
    HEAPF64[$vararg_buffer46>>3] = $95;
    (_sprintf(840713,26986,$vararg_buffer46)|0);
    $96 = HEAP32[199584]|0;
    $97 = +HEAPF32[$1>>2];
    $98 = $97;
    HEAPF64[$vararg_buffer49>>3] = $98;
    (_fprintf($96,26986,$vararg_buffer49)|0);
    $99 = HEAP32[199584]|0;
    (_fclose($99)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 7:  {
   $cond103 = ($9|0)==(0);
   if ($cond103) {
    HEAP32[$vararg_buffer52>>2] = $1;
    (_scanf(26926,$vararg_buffer52)|0);
    ;HEAP32[$$byval_copy96>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy96+4>>2]=HEAP32[$1+4>>2]|0;
    _escribe_fp_reg(0,0,$$byval_copy96,8,1);
    $100 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $100;
    $101 = +HEAPF64[$1>>3];
    HEAPF64[$vararg_buffer55>>3] = $101;
    (_sprintf(840713,27003,$vararg_buffer55)|0);
    $102 = HEAP32[199584]|0;
    $103 = +HEAPF64[$1>>3];
    HEAPF64[$vararg_buffer58>>3] = $103;
    (_fprintf($102,27003,$vararg_buffer58)|0);
    $104 = HEAP32[199584]|0;
    (_fclose($104)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 8:  {
   $cond102 = ($9|0)==(0);
   if ($cond102) {
    HEAP32[$vararg_buffer61>>2] = $2;
    (_scanf(26950,$vararg_buffer61)|0);
    $$1 = 0;
    while(1) {
     $105 = (($2) + ($$1)|0);
     $106 = HEAP8[$105>>0]|0;
     HEAP8[$3>>0] = $106;
     HEAP8[$0>>0] = $106;
     $107 = ($$1|0)<(0);
     $108 = $107 << 31 >> 31;
     $109 = (_i64Add(($$1|0),($108|0),($12|0),($15|0))|0);
     $110 = tempRet0;
     ;HEAP32[$$byval_copy96>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy96+4>>2]=HEAP32[$0+4>>2]|0;
     _escribe_mem_datos($109,$110,$$byval_copy96,2,1);
     $111 = (($$1) + 1)|0;
     $112 = HEAP8[$3>>0]|0;
     $113 = ($112<<24>>24)!=(0);
     $114 = ($111|0)<(0);
     $115 = $114 << 31 >> 31;
     $116 = ($115|0)<($21|0);
     $117 = ($111>>>0)<($18>>>0);
     $118 = ($115|0)==($21|0);
     $119 = $118 & $117;
     $120 = $116 | $119;
     $or$cond = $120 & $113;
     if ($or$cond) {
      $$1 = $111;
     } else {
      break;
     }
    }
    HEAP8[$0>>0] = 0;
    $121 = (_i64Add(($111|0),($115|0),($12|0),($15|0))|0);
    $122 = tempRet0;
    ;HEAP32[$$byval_copy96>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy96+4>>2]=HEAP32[$0+4>>2]|0;
    _escribe_mem_datos($121,$122,$$byval_copy96,2,1);
    $123 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $123;
    HEAP32[$vararg_buffer64>>2] = $2;
    (_sprintf(840713,27022,$vararg_buffer64)|0);
    $124 = HEAP32[199584]|0;
    HEAP32[$vararg_buffer67>>2] = $2;
    (_fprintf($124,27022,$vararg_buffer67)|0);
    $125 = HEAP32[199584]|0;
    (_fclose($125)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 10:  {
   $cond101 = ($9|0)==(0);
   if ($cond101) {
    (_puts(27037)|0);
    $126 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $126;
    HEAP32[$vararg_buffer70>>2] = 27068;
    (_sprintf(840713,29392,$vararg_buffer70)|0);
    $127 = HEAP32[199584]|0;
    HEAP32[$vararg_buffer73>>2] = 27068;
    (_fprintf($127,29392,$vararg_buffer73)|0);
    $128 = HEAP32[199584]|0;
    (_fclose($128)|0);
    $$033 = 1;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 11:  {
   $cond100 = ($9|0)==(0);
   if ($cond100) {
    $sext = $12 << 24;
    $129 = $sext >> 24;
    (_putchar($129)|0);
    $130 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $130;
    HEAP32[$vararg_buffer76>>2] = $129;
    (_sprintf(840713,27100,$vararg_buffer76)|0);
    $131 = HEAP32[199584]|0;
    HEAP32[$vararg_buffer79>>2] = $129;
    (_fprintf($131,27100,$vararg_buffer79)|0);
    $132 = HEAP32[199584]|0;
    (_fclose($132)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  case 12:  {
   $cond = ($9|0)==(0);
   if ($cond) {
    HEAP32[$vararg_buffer82>>2] = $3;
    (_scanf(27117,$vararg_buffer82)|0);
    $133 = HEAP8[$3>>0]|0;
    $134 = $133 << 24 >> 24;
    $135 = ($134|0)<(0);
    $136 = $135 << 31 >> 31;
    $137 = (54048);
    $138 = $137;
    HEAP32[$138>>2] = $134;
    $139 = (($137) + 4)|0;
    $140 = $139;
    HEAP32[$140>>2] = $136;
    $141 = (_fopen(26874,27617)|0);
    HEAP32[199584] = $141;
    $142 = HEAP8[$3>>0]|0;
    $143 = $142 << 24 >> 24;
    HEAP32[$vararg_buffer85>>2] = $143;
    (_sprintf(840713,27121,$vararg_buffer85)|0);
    $144 = HEAP32[199584]|0;
    $145 = HEAP8[$3>>0]|0;
    $146 = $145 << 24 >> 24;
    HEAP32[$vararg_buffer88>>2] = $146;
    (_fprintf($144,27121,$vararg_buffer88)|0);
    $147 = HEAP32[199584]|0;
    (_fclose($147)|0);
    $$033 = 0;
    STACKTOP = sp;return ($$033|0);
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $148 = $vararg_buffer91;
 $149 = $148;
 HEAP32[$149>>2] = $6;
 $150 = (($148) + 4)|0;
 $151 = $150;
 HEAP32[$151>>2] = $9;
 (_printf(27137,$vararg_buffer91)|0);
 $$033 = 1;
 STACKTOP = sp;return ($$033|0);
}
function _operacion_ALU($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 do {
  switch ($0<<24>>24) {
  case 71: case 70:  {
   $5 = (_i64Add(($3|0),($4|0),($1|0),($2|0))|0);
   $6 = tempRet0;
   $70 = $6;$71 = $5;
   break;
  }
  case 75: case 74:  {
   $7 = (_i64Subtract(($1|0),($2|0),($3|0),($4|0))|0);
   $8 = tempRet0;
   $70 = $8;$71 = $7;
   break;
  }
  case 78:  {
   $9 = (___muldi3(($3|0),($4|0),($1|0),($2|0))|0);
   $10 = tempRet0;
   $70 = $10;$71 = $9;
   break;
  }
  case 80:  {
   $11 = (___divdi3(($1|0),($2|0),($3|0),($4|0))|0);
   $12 = tempRet0;
   $70 = $12;$71 = $11;
   break;
  }
  case 83:  {
   $13 = (_bitshift64Shl(($3|0),($4|0),16)|0);
   $14 = tempRet0;
   $70 = $14;$71 = $13;
   break;
  }
  case 21: case 20:  {
   $15 = $3 & $1;
   $16 = $4 & $2;
   $70 = $16;$71 = $15;
   break;
  }
  case 23: case 22:  {
   $17 = $3 | $1;
   $18 = $4 | $2;
   $70 = $18;$71 = $17;
   break;
  }
  case 25: case 24:  {
   $19 = $3 ^ $1;
   $20 = $4 ^ $2;
   $70 = $20;$71 = $19;
   break;
  }
  case 87: case 86:  {
   $21 = $3 & 31;
   $22 = (_bitshift64Ashr(($1|0),($2|0),($21|0))|0);
   $23 = tempRet0;
   $70 = $23;$71 = $22;
   break;
  }
  case 85: case 84:  {
   $24 = $3 & 31;
   $25 = (_bitshift64Shl(($1|0),($2|0),($24|0))|0);
   $26 = tempRet0;
   $70 = $26;$71 = $25;
   break;
  }
  case 89: case 88:  {
   $27 = $3 & 31;
   $28 = (_bitshift64Lshr(($1|0),($2|0),($27|0))|0);
   $29 = tempRet0;
   $70 = $29;$71 = $28;
   break;
  }
  case 41: case 40:  {
   $30 = ($1|0)==($3|0);
   $31 = ($2|0)==($4|0);
   $32 = $30 & $31;
   $33 = $32&1;
   $70 = 0;$71 = $33;
   break;
  }
  case 61: case 60:  {
   $34 = ($1|0)!=($3|0);
   $35 = ($2|0)!=($4|0);
   $36 = $34 | $35;
   $37 = $36&1;
   $70 = 0;$71 = $37;
   break;
  }
  case 49: case 48:  {
   $38 = ($2|0)>($4|0);
   $39 = ($1>>>0)>($3>>>0);
   $40 = ($2|0)==($4|0);
   $41 = $40 & $39;
   $42 = $38 | $41;
   $43 = $42&1;
   $70 = 0;$71 = $43;
   break;
  }
  case 57: case 56:  {
   $44 = ($2|0)<($4|0);
   $45 = ($1>>>0)<($3>>>0);
   $46 = ($2|0)==($4|0);
   $47 = $46 & $45;
   $48 = $44 | $47;
   $49 = $48&1;
   $70 = 0;$71 = $49;
   break;
  }
  case 45: case 44:  {
   $50 = ($2|0)>($4|0);
   $51 = ($1>>>0)>=($3>>>0);
   $52 = ($2|0)==($4|0);
   $53 = $52 & $51;
   $54 = $50 | $53;
   $55 = $54&1;
   $70 = 0;$71 = $55;
   break;
  }
  case 53: case 52:  {
   $56 = ($2|0)<($4|0);
   $57 = ($1>>>0)<=($3>>>0);
   $58 = ($2|0)==($4|0);
   $59 = $58 & $57;
   $60 = $56 | $59;
   $61 = $60&1;
   $70 = 0;$71 = $61;
   break;
  }
  case 105: case 104: case 110: case 108: case 103: case 102: case 101: case 100: case 16: case 11: case 10: case 17: case 13: case 12: case 18: case 15: case 14: case 65: case 64:  {
   $62 = (_i64Add(($3|0),($4|0),($1|0),($2|0))|0);
   $63 = tempRet0;
   $70 = $63;$71 = $62;
   break;
  }
  case 111: case 109:  {
   $70 = $2;$71 = $1;
   break;
  }
  case 106:  {
   $64 = ($4|0)<(0);
   if ($64) {
    $70 = $2;$71 = $1;
   } else {
    HEAP8[(55378)>>0] = 0;
    $70 = 0;$71 = 0;
   }
   break;
  }
  case 107:  {
   $65 = ($3|0)==(0);
   $66 = ($4|0)==(0);
   $67 = $65 & $66;
   if ($67) {
    $70 = $2;$71 = $1;
   } else {
    HEAP8[(55378)>>0] = 0;
    $70 = 0;$71 = 0;
   }
   break;
  }
  case 120: case 1: case 0:  {
   $70 = 0;$71 = 0;
   break;
  }
  default: {
   $68 = $0&255;
   $69 = HEAP32[482]|0;
   HEAP32[$vararg_buffer>>2] = 27223;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 27257;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 179;
   (_fprintf($69,27188,$vararg_buffer)|0);
   HEAP32[$vararg_buffer3>>2] = $68;
   (_fprintf($69,27271,$vararg_buffer3)|0);
   _exit(1);
   // unreachable;
  }
  }
 } while(0);
 tempRet0 = ($70);
 STACKTOP = sp;return ($71|0);
}
function _operacion_COMP($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$shrunk = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0<<24>>24) {
 case 105: case 100:  {
  $5 = ($1|0)==(0);
  $6 = ($2|0)==(0);
  $7 = $5 & $6;
  $$0$shrunk = $7;
  break;
 }
 case 104: case 101:  {
  $8 = ($1|0)!=(0);
  $9 = ($2|0)!=(0);
  $10 = $8 | $9;
  $$0$shrunk = $10;
  break;
 }
 case 103:  {
  $11 = ($1|0)!=($3|0);
  $12 = ($2|0)!=($4|0);
  $13 = $11 | $12;
  $$0$shrunk = $13;
  break;
 }
 case 102:  {
  $14 = ($1|0)==($3|0);
  $15 = ($2|0)==($4|0);
  $16 = $14 & $15;
  $$0$shrunk = $16;
  break;
 }
 case 111: case 110: case 109: case 108:  {
  $$0$shrunk = 1;
  break;
 }
 default: {
  $$0$shrunk = 0;
 }
 }
 $17 = $$0$shrunk&1;
 tempRet0 = (0);
 return ($17|0);
}
function _mux_ALUsup($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199553] = 0;
 HEAP32[199549] = 0;
 $8 = HEAP8[55368]|0;
 switch ($8<<24>>24) {
 case 110: case 108: case 105: case 104: case 103: case 102: case 100: case 101:  {
  $48 = $1;$49 = $0;
  tempRet0 = ($48);
  return ($49|0);
  break;
 }
 default: {
 }
 }
 $9 = HEAP32[19178]|0;
 $cond = ($9|0)==(1);
 if (!($cond)) {
  $48 = $3;$49 = $2;
  tempRet0 = ($48);
  return ($49|0);
 }
 $10 = (_hay_destino_MEM()|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = (_hay_fuente1_EX()|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = HEAP8[(55376)>>0]|0;
   $15 = HEAP8[(55754)>>0]|0;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    HEAP32[199549] = 1;
    $17 = (55544);
    $18 = $17;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($17) + 4)|0;
    $21 = $20;
    $22 = HEAP32[$21>>2]|0;
    $23 = (55912);
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = (($23) + 4)|0;
    $27 = $26;
    $28 = HEAP32[$27>>2]|0;
    _write_log_2(27302,$19,$22,$25,$28,27320,27323);
    $48 = $5;$49 = $4;
    tempRet0 = ($48);
    return ($49|0);
   }
  }
 }
 $29 = (_hay_destino_WB()|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $48 = $3;$49 = $2;
  tempRet0 = ($48);
  return ($49|0);
 }
 $31 = (_hay_fuente1_EX()|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $48 = $3;$49 = $2;
  tempRet0 = ($48);
  return ($49|0);
 }
 $33 = HEAP8[(55376)>>0]|0;
 $34 = HEAP8[(56114)>>0]|0;
 $35 = ($33<<24>>24)==($34<<24>>24);
 if (!($35)) {
  $48 = $3;$49 = $2;
  tempRet0 = ($48);
  return ($49|0);
 }
 HEAP32[199553] = 1;
 $36 = (55544);
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($36) + 4)|0;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (56264);
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 _write_log_2(27327,$38,$41,$44,$47,27320,27344);
 $48 = $7;$49 = $6;
 tempRet0 = ($48);
 return ($49|0);
}
function _mux_ALUinf($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199554] = 0;
 HEAP32[199550] = 0;
 $8 = HEAP8[55368]|0;
 L1: do {
  switch ($8<<24>>24) {
  case 111: case 109:  {
   $50 = 0;$51 = 0;
   break;
  }
  default: {
   $9 = HEAP32[(55372)>>2]|0;
   $cond = ($9|0)==(0);
   if ($cond) {
    $10 = HEAP32[19178]|0;
    $11 = ($10|0)==(1);
    if ($11) {
     $12 = (_hay_destino_MEM()|0);
     $13 = ($12|0)==(0);
     if (!($13)) {
      $14 = (_hay_fuente2_EX()|0);
      $15 = ($14|0)==(0);
      if (!($15)) {
       $16 = HEAP8[(55377)>>0]|0;
       $17 = HEAP8[(55754)>>0]|0;
       $18 = ($16<<24>>24)==($17<<24>>24);
       if ($18) {
        HEAP32[199550] = 1;
        $19 = (55544);
        $20 = $19;
        $21 = HEAP32[$20>>2]|0;
        $22 = (($19) + 4)|0;
        $23 = $22;
        $24 = HEAP32[$23>>2]|0;
        $25 = (55912);
        $26 = $25;
        $27 = HEAP32[$26>>2]|0;
        $28 = (($25) + 4)|0;
        $29 = $28;
        $30 = HEAP32[$29>>2]|0;
        _write_log_2(27347,$21,$24,$27,$30,27320,27323);
        $50 = $5;$51 = $4;
        break L1;
       }
      }
     }
     $31 = (_hay_destino_WB()|0);
     $32 = ($31|0)==(0);
     if ($32) {
      $50 = $1;$51 = $0;
     } else {
      $33 = (_hay_fuente2_EX()|0);
      $34 = ($33|0)==(0);
      if ($34) {
       $50 = $1;$51 = $0;
      } else {
       $35 = HEAP8[(55377)>>0]|0;
       $36 = HEAP8[(56114)>>0]|0;
       $37 = ($35<<24>>24)==($36<<24>>24);
       if ($37) {
        HEAP32[199554] = 1;
        $38 = (55544);
        $39 = $38;
        $40 = HEAP32[$39>>2]|0;
        $41 = (($38) + 4)|0;
        $42 = $41;
        $43 = HEAP32[$42>>2]|0;
        $44 = (56264);
        $45 = $44;
        $46 = HEAP32[$45>>2]|0;
        $47 = (($44) + 4)|0;
        $48 = $47;
        $49 = HEAP32[$48>>2]|0;
        _write_log_2(27365,$40,$43,$46,$49,27320,27344);
        $50 = $7;$51 = $6;
       } else {
        $50 = $1;$51 = $0;
       }
      }
     }
    } else {
     $50 = $1;$51 = $0;
    }
   } else {
    $50 = $3;$51 = $2;
   }
  }
  }
 } while(0);
 tempRet0 = ($50);
 return ($51|0);
}
function _mux_COMPsup($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199551] = 0;
 HEAP32[199555] = 0;
 HEAP32[199570] = 0;
 $8 = HEAP32[19178]|0;
 $9 = ($8|0)==(1);
 if (!($9)) {
  $59 = $1;$60 = $0;
  tempRet0 = ($59);
  return ($60|0);
 }
 $10 = HEAP8[55368]|0;
 switch ($10<<24>>24) {
 case 102: case 103: case 101: case 100:  {
  $11 = (_hay_destino_MEM()|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = HEAP8[(55376)>>0]|0;
   $14 = HEAP8[(55754)>>0]|0;
   $15 = ($13<<24>>24)==($14<<24>>24);
   if ($15) {
    HEAP32[199551] = 1;
    $16 = (55544);
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (($16) + 4)|0;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (55912);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($22) + 4)|0;
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    _write_log_2(27382,$18,$21,$24,$27,27320,27323);
    $59 = $3;$60 = $2;
    tempRet0 = ($59);
    return ($60|0);
   }
  }
  $28 = (_hay_destino_WB()|0);
  $29 = ($28|0)==(0);
  if ($29) {
   $59 = $1;$60 = $0;
   tempRet0 = ($59);
   return ($60|0);
  }
  $30 = HEAP8[(55376)>>0]|0;
  $31 = HEAP8[(56114)>>0]|0;
  $32 = ($30<<24>>24)==($31<<24>>24);
  if (!($32)) {
   $59 = $1;$60 = $0;
   tempRet0 = ($59);
   return ($60|0);
  }
  HEAP32[199555] = 1;
  $33 = (55544);
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 4)|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (56264);
  $40 = $39;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($39) + 4)|0;
  $43 = $42;
  $44 = HEAP32[$43>>2]|0;
  _write_log_2(27401,$35,$38,$41,$44,27320,27344);
  $59 = $5;$60 = $4;
  tempRet0 = ($59);
  return ($60|0);
  break;
 }
 case 104: case 105:  {
  $45 = HEAP32[(54816)>>2]|0;
  $46 = ($45|0)==(0);
  if ($46) {
   $59 = $1;$60 = $0;
   tempRet0 = ($59);
   return ($60|0);
  }
  HEAP32[199570] = 1;
  $47 = (55544);
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($47) + 4)|0;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (75624);
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 4)|0;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  _write_log_2(27419,$49,$52,$55,$58,27320,27438);
  $59 = $7;$60 = $6;
  tempRet0 = ($59);
  return ($60|0);
  break;
 }
 default: {
  $59 = $1;$60 = $0;
  tempRet0 = ($59);
  return ($60|0);
 }
 }
 return (0)|0;
}
function _mux_COMPinf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199552] = 0;
 HEAP32[199556] = 0;
 $6 = HEAP32[19178]|0;
 $7 = ($6|0)==(1);
 if (!($7)) {
  $44 = $1;$45 = $0;
  tempRet0 = ($44);
  return ($45|0);
 }
 $8 = HEAP8[55368]|0;
 $9 = $8 & -2;
 $switch = ($9<<24>>24)==(102);
 if (!($switch)) {
  $44 = $1;$45 = $0;
  tempRet0 = ($44);
  return ($45|0);
 }
 $10 = (_hay_destino_MEM()|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $12 = HEAP8[(55377)>>0]|0;
  $13 = HEAP8[(55754)>>0]|0;
  $14 = ($12<<24>>24)==($13<<24>>24);
  if ($14) {
   HEAP32[199552] = 1;
   $15 = (55544);
   $16 = $15;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) + 4)|0;
   $19 = $18;
   $20 = HEAP32[$19>>2]|0;
   $21 = (55912);
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($21) + 4)|0;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   _write_log_2(27444,$17,$20,$23,$26,27320,27323);
   $44 = $3;$45 = $2;
   tempRet0 = ($44);
   return ($45|0);
  }
 }
 $27 = (_hay_destino_WB()|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $44 = $1;$45 = $0;
  tempRet0 = ($44);
  return ($45|0);
 }
 $29 = HEAP8[(55377)>>0]|0;
 $30 = HEAP8[(56114)>>0]|0;
 $31 = ($29<<24>>24)==($30<<24>>24);
 if (!($31)) {
  $44 = $1;$45 = $0;
  tempRet0 = ($44);
  return ($45|0);
 }
 HEAP32[199556] = 1;
 $32 = (55544);
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = (56264);
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 _write_log_2(27463,$34,$37,$40,$43,27320,27344);
 $44 = $5;$45 = $4;
 tempRet0 = ($44);
 return ($45|0);
}
function _mux_EXmem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199557] = 0;
 $4 = HEAP32[19178]|0;
 $cond = ($4|0)==(1);
 L1: do {
  if ($cond) {
   $5 = HEAP8[55368]|0;
   switch ($5<<24>>24) {
   case 16: case 17: case 18: case 65:  {
    break;
   }
   default: {
    $23 = $1;$24 = $0;
    break L1;
   }
   }
   $6 = (_hay_destino_WB()|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $23 = $1;$24 = $0;
   } else {
    $8 = HEAP8[(55377)>>0]|0;
    $9 = HEAP8[(56114)>>0]|0;
    $10 = ($8<<24>>24)==($9<<24>>24);
    if ($10) {
     HEAP32[199557] = 1;
     $11 = (55544);
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = (($11) + 4)|0;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (56264);
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = (($17) + 4)|0;
     $21 = $20;
     $22 = HEAP32[$21>>2]|0;
     _write_log_2(27481,$13,$16,$19,$22,27320,27344);
     $23 = $3;$24 = $2;
    } else {
     $23 = $1;$24 = $0;
    }
   }
  } else {
   $23 = $1;$24 = $0;
  }
 } while(0);
 tempRet0 = ($23);
 return ($24|0);
}
function _mux_MEMmem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199558] = 0;
 $4 = HEAP32[19178]|0;
 $cond = ($4|0)==(1);
 L1: do {
  if ($cond) {
   $5 = HEAP8[55744]|0;
   switch ($5<<24>>24) {
   case 16: case 17: case 18: case 65:  {
    break;
   }
   default: {
    $23 = $1;$24 = $0;
    break L1;
   }
   }
   $6 = (_hay_destino_WB()|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $23 = $1;$24 = $0;
   } else {
    $8 = HEAP8[(55753)>>0]|0;
    $9 = HEAP8[(56114)>>0]|0;
    $10 = ($8<<24>>24)==($9<<24>>24);
    if ($10) {
     HEAP32[199558] = 1;
     $11 = (55912);
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = (($11) + 4)|0;
     $15 = $14;
     $16 = HEAP32[$15>>2]|0;
     $17 = (56264);
     $18 = $17;
     $19 = HEAP32[$18>>2]|0;
     $20 = (($17) + 4)|0;
     $21 = $20;
     $22 = HEAP32[$21>>2]|0;
     _write_log_2(27496,$13,$16,$19,$22,27323,27344);
     $23 = $3;$24 = $2;
    } else {
     $23 = $1;$24 = $0;
    }
   }
  } else {
   $23 = $1;$24 = $0;
  }
 } while(0);
 tempRet0 = ($23);
 return ($24|0);
}
function _mux_COMPidsup($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199559] = 0;
 $4 = HEAP32[19178]|0;
 $cond = ($4|0)==(1);
 if ($cond) {
  $5 = HEAP8[55008]|0;
  $6 = $5 & -4;
  $switch = ($6<<24>>24)==(100);
  if ($switch) {
   $7 = (_hay_destino_MEM()|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $24 = $1;$25 = $0;
   } else {
    $9 = HEAP8[(55016)>>0]|0;
    $10 = HEAP8[(55754)>>0]|0;
    $11 = ($9<<24>>24)==($10<<24>>24);
    if ($11) {
     HEAP32[199559] = 1;
     $12 = (55160);
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $15 = (($12) + 4)|0;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (55912);
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     _write_log_2(27509,$14,$17,$20,$23,27528,27323);
     $24 = $3;$25 = $2;
    } else {
     $24 = $1;$25 = $0;
    }
   }
  } else {
   $24 = $1;$25 = $0;
  }
 } else {
  $24 = $1;$25 = $0;
 }
 tempRet0 = ($24);
 return ($25|0);
}
function _mux_COMPidinf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199560] = 0;
 $4 = HEAP32[19178]|0;
 $cond = ($4|0)==(1);
 if ($cond) {
  $5 = HEAP8[55008]|0;
  $6 = $5 & -2;
  $switch = ($6<<24>>24)==(102);
  if ($switch) {
   $7 = (_hay_destino_MEM()|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $24 = $1;$25 = $0;
   } else {
    $9 = HEAP8[(55017)>>0]|0;
    $10 = HEAP8[(55754)>>0]|0;
    $11 = ($9<<24>>24)==($10<<24>>24);
    if ($11) {
     HEAP32[199560] = 1;
     $12 = (55160);
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $15 = (($12) + 4)|0;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $18 = (55912);
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     _write_log_2(27531,$14,$17,$20,$23,27528,27323);
     $24 = $3;$25 = $2;
    } else {
     $24 = $1;$25 = $0;
    }
   }
  } else {
   $24 = $1;$25 = $0;
  }
 } else {
  $24 = $1;$25 = $0;
 }
 tempRet0 = ($24);
 return ($25|0);
}
function _detectar_riesgos_control() {
 var $0 = 0, $1 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19177]|0;
 $switch = ($0>>>0)<(3);
 if (!($switch)) {
  return;
 }
 $1 = HEAP8[55008]|0;
 switch ($1<<24>>24) {
 case 111: case 110: case 109: case 108: case 105: case 104: case 102: case 103: case 100: case 101:  {
  break;
 }
 default: {
  return;
 }
 }
 HEAP32[199574] = 1;
 return;
}
function _detectar_riesgos_datos() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch = 0, $switch11 = 0, $switch5 = 0, $switch7 = 0, $switch9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19178]|0;
 switch ($0|0) {
 case 0:  {
  $1 = (_hay_destino_EX()|0);
  $2 = ($1|0)==(0);
  do {
   if (!($2)) {
    $3 = (_hay_fuente1_ID()|0);
    $4 = ($3|0)==(0);
    if ($4) {
     label = 5;
    } else {
     $5 = HEAP8[(55016)>>0]|0;
     $6 = HEAP8[(55378)>>0]|0;
     $7 = ($5<<24>>24)==($6<<24>>24);
     if (!($7)) {
      label = 5;
     }
    }
    if ((label|0) == 5) {
     $8 = (_hay_fuente2_ID()|0);
     $9 = ($8|0)==(0);
     if ($9) {
      break;
     }
     $10 = HEAP8[(55017)>>0]|0;
     $11 = HEAP8[(55378)>>0]|0;
     $12 = ($10<<24>>24)==($11<<24>>24);
     if (!($12)) {
      break;
     }
    }
    HEAP32[199574] = 1;
    HEAP32[199575] = 1;
    $13 = (55160);
    $14 = $13;
    $15 = HEAP32[$14>>2]|0;
    $16 = (($13) + 4)|0;
    $17 = $16;
    $18 = HEAP32[$17>>2]|0;
    $19 = (55544);
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($19) + 4)|0;
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    _write_log_2(27550,$15,$18,$21,$24,27528,27320);
   }
  } while(0);
  $25 = (_hay_destino_MEM()|0);
  $26 = ($25|0)==(0);
  do {
   if (!($26)) {
    $27 = (_hay_fuente1_ID()|0);
    $28 = ($27|0)==(0);
    if ($28) {
     label = 11;
    } else {
     $29 = HEAP8[(55016)>>0]|0;
     $30 = HEAP8[(55754)>>0]|0;
     $31 = ($29<<24>>24)==($30<<24>>24);
     if (!($31)) {
      label = 11;
     }
    }
    if ((label|0) == 11) {
     $32 = (_hay_fuente2_ID()|0);
     $33 = ($32|0)==(0);
     if ($33) {
      break;
     }
     $34 = HEAP8[(55017)>>0]|0;
     $35 = HEAP8[(55754)>>0]|0;
     $36 = ($34<<24>>24)==($35<<24>>24);
     if (!($36)) {
      break;
     }
    }
    HEAP32[199574] = 1;
    HEAP32[199575] = 1;
    $37 = (55160);
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + 4)|0;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (55912);
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    _write_log_2(27550,$39,$42,$45,$48,27528,27323);
   }
  } while(0);
  $49 = HEAP8[55008]|0;
  $50 = $49 & -2;
  $switch = ($50<<24>>24)==(104);
  if (!($switch)) {
   return;
  }
  $51 = HEAP8[(55016)>>0]|0;
  $52 = $51&255;
  $53 = (((54296 + ($52<<4)|0)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==(0);
  if ($55) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199571] = 1;
  $56 = (55160);
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  _write_log_1(27550,$58,$61,$51);
  return;
  break;
 }
 case 1:  {
  $62 = HEAP8[55368]|0;
  L29: do {
   switch ($62<<24>>24) {
   case 11: case 13: case 10: case 12: case 14: case 64:  {
    $63 = (_hay_fuente1_ID()|0);
    $64 = ($63|0)==(0);
    if ($64) {
     label = 20;
    } else {
     $65 = HEAP8[(55016)>>0]|0;
     $66 = HEAP8[(55378)>>0]|0;
     $67 = ($65<<24>>24)==($66<<24>>24);
     if (!($67)) {
      label = 20;
     }
    }
    if ((label|0) == 20) {
     $68 = (_hay_fuente2_ID()|0);
     $69 = ($68|0)==(0);
     if ($69) {
      break L29;
     }
     $70 = HEAP8[55008]|0;
     switch ($70<<24>>24) {
     case 16: case 17: case 18: case 65:  {
      break L29;
      break;
     }
     default: {
     }
     }
     $71 = HEAP8[(55017)>>0]|0;
     $72 = HEAP8[(55378)>>0]|0;
     $73 = ($71<<24>>24)==($72<<24>>24);
     if (!($73)) {
      break L29;
     }
    }
    HEAP32[199574] = 1;
    HEAP32[199575] = 1;
    $74 = (55160);
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 4)|0;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = (55544);
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($80) + 4)|0;
    $84 = $83;
    $85 = HEAP32[$84>>2]|0;
    _write_log_2(27550,$76,$79,$82,$85,27528,27320);
    break;
   }
   default: {
   }
   }
  } while(0);
  $86 = HEAP32[19177]|0;
  $87 = HEAP8[55008]|0;
  switch ($86|0) {
  case 2: case 5: case 8:  {
   break;
  }
  default: {
   $139 = $87 & -2;
   $switch11 = ($139<<24>>24)==(104);
   if (!($switch11)) {
    return;
   }
   $140 = HEAP8[(55016)>>0]|0;
   $141 = $140&255;
   $142 = (((54296 + ($141<<4)|0)) + 8|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = HEAP32[19182]|0;
   $145 = ($143|0)>($144|0);
   if (!($145)) {
    return;
   }
   HEAP32[199575] = 1;
   HEAP32[199574] = 1;
   HEAP32[199571] = 1;
   $146 = (55160);
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $149 = (($146) + 4)|0;
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   _write_log_1(27588,$148,$151,$140);
   return;
  }
  }
  $88 = $87 & -4;
  $switch5 = ($88<<24>>24)==(100);
  if ($switch5) {
   $89 = (_hay_destino_EX()|0);
   $90 = ($89|0)==(0);
   if (!($90)) {
    $91 = HEAP8[(55016)>>0]|0;
    $92 = HEAP8[(55378)>>0]|0;
    $93 = ($91<<24>>24)==($92<<24>>24);
    if ($93) {
     HEAP32[199574] = 1;
     HEAP32[199575] = 1;
     $94 = (55160);
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (55544);
     $101 = $100;
     $102 = HEAP32[$101>>2]|0;
     $103 = (($100) + 4)|0;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     _write_log_2(27550,$96,$99,$102,$105,27528,27320);
    }
   }
  }
  $106 = HEAP8[55008]|0;
  $107 = $106 & -4;
  $switch7 = ($107<<24>>24)==(100);
  L54: do {
   if ($switch7) {
    $108 = (_hay_destino_MEM()|0);
    $109 = ($108|0)==(0);
    if (!($109)) {
     $110 = HEAP8[55744]|0;
     switch ($110<<24>>24) {
     case 11: case 13: case 10: case 12: case 14: case 64:  {
      break;
     }
     default: {
      break L54;
     }
     }
     $111 = HEAP8[(55016)>>0]|0;
     $112 = HEAP8[(55754)>>0]|0;
     $113 = ($111<<24>>24)==($112<<24>>24);
     if ($113) {
      HEAP32[199574] = 1;
      HEAP32[199575] = 1;
      $114 = (55160);
      $115 = $114;
      $116 = HEAP32[$115>>2]|0;
      $117 = (($114) + 4)|0;
      $118 = $117;
      $119 = HEAP32[$118>>2]|0;
      $120 = (55912);
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      _write_log_2(27550,$116,$119,$122,$125,27528,27323);
     }
    }
   }
  } while(0);
  $126 = HEAP8[55008]|0;
  $127 = $126 & -2;
  $switch9 = ($127<<24>>24)==(104);
  if (!($switch9)) {
   return;
  }
  $128 = HEAP8[(55016)>>0]|0;
  $129 = $128&255;
  $130 = (((54296 + ($129<<4)|0)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)==(0);
  if ($132) {
   return;
  }
  HEAP32[199575] = 1;
  HEAP32[199574] = 1;
  HEAP32[199571] = 1;
  $133 = (55160);
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($133) + 4)|0;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  _write_log_1(27567,$135,$138,$128);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _write_log_2($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $7 = sp + 192|0;
 $8 = sp + 64|0;
 dest=$7; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$8; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $9 = (_fopen(27608,27617)|0);
 HEAP32[199585] = $9;
 $10 = HEAP32[19182]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$vararg_buffer>>2] = 841225;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $11;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 (_sprintf(841225,27619,$vararg_buffer)|0);
 $12 = HEAP32[199585]|0;
 $13 = HEAP32[19182]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$vararg_buffer3>>2] = $14;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $0;
 (_fprintf($12,27646,$vararg_buffer3)|0);
 _imprime_instruccion_color($7,$3,$4,0);
 _imprime_instruccion_color($8,$1,$2,0);
 HEAP32[$vararg_buffer7>>2] = 841225;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $7;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $6;
 $vararg_ptr12 = ((($vararg_buffer7)) + 12|0);
 HEAP32[$vararg_ptr12>>2] = $8;
 $vararg_ptr13 = ((($vararg_buffer7)) + 16|0);
 HEAP32[$vararg_ptr13>>2] = $5;
 (_sprintf(841225,27671,$vararg_buffer7)|0);
 $15 = HEAP32[199585]|0;
 HEAP32[$vararg_buffer14>>2] = $7;
 $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
 HEAP32[$vararg_ptr17>>2] = $6;
 $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
 HEAP32[$vararg_ptr18>>2] = $8;
 $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
 HEAP32[$vararg_ptr19>>2] = $5;
 (_fprintf($15,27726,$vararg_buffer14)|0);
 $16 = HEAP32[199585]|0;
 (_fclose($16)|0);
 STACKTOP = sp;return;
}
function _write_log_1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 dest=$4; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = (_fopen(27608,27617)|0);
 HEAP32[199585] = $5;
 $6 = HEAP32[19182]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$vararg_buffer>>2] = 841225;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 (_sprintf(841225,27619,$vararg_buffer)|0);
 $8 = HEAP32[199585]|0;
 $9 = HEAP32[19182]|0;
 $10 = (($9) + 1)|0;
 HEAP32[$vararg_buffer3>>2] = $10;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $0;
 (_fprintf($8,27646,$vararg_buffer3)|0);
 _imprime_instruccion_color($4,$1,$2,0);
 $11 = $3&255;
 HEAP32[$vararg_buffer7>>2] = 841225;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $4;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $11;
 (_sprintf(841225,27775,$vararg_buffer7)|0);
 $12 = HEAP32[199585]|0;
 HEAP32[$vararg_buffer12>>2] = $4;
 $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
 HEAP32[$vararg_ptr15>>2] = $11;
 (_fprintf($12,27812,$vararg_buffer12)|0);
 $13 = HEAP32[199585]|0;
 (_fclose($13)|0);
 STACKTOP = sp;return;
}
function _write_log($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 40|0;
 dest=$3; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $4 = (_fopen(27608,27617)|0);
 HEAP32[199585] = $4;
 $5 = HEAP32[19182]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$vararg_buffer>>2] = 841225;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 (_sprintf(841225,27619,$vararg_buffer)|0);
 $7 = HEAP32[199585]|0;
 $8 = HEAP32[19182]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$vararg_buffer3>>2] = $9;
 $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $0;
 (_fprintf($7,27646,$vararg_buffer3)|0);
 _imprime_instruccion_color($3,$1,$2,0);
 HEAP32[$vararg_buffer7>>2] = 841225;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $3;
 (_sprintf(841225,27843,$vararg_buffer7)|0);
 $10 = HEAP32[199585]|0;
 HEAP32[$vararg_buffer11>>2] = $3;
 (_fprintf($10,27866,$vararg_buffer11)|0);
 $11 = HEAP32[199585]|0;
 (_fclose($11)|0);
 STACKTOP = sp;return;
}
function _yyparse() {
 var $$ = 0, $$$1261 = 0, $$$1271 = 0, $$0 = 0, $$0243 = 0, $$0244 = 0, $$0249 = 0, $$0254 = 0, $$0255$ph = 0, $$0256 = 0, $$0257 = 0, $$0260 = 0, $$0266 = 0, $$0270 = 0, $$1245 = 0, $$1250 = 0, $$1261 = 0, $$1267 = 0, $$1271 = 0, $$2259 = 0;
 var $$289 = 0, $$289$$0 = 0, $$3 = 0, $$3263 = 0, $$3269 = 0, $$3273 = 0, $$5$ph = 0, $$sink441 = 0, $$sroa$8 = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$8$0$$sroa_idx45 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0;
 var $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0;
 var $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0;
 var $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0;
 var $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0;
 var $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0;
 var $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0;
 var $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0;
 var $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0;
 var $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0;
 var $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0;
 var $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0;
 var $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0;
 var $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0;
 var $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0;
 var $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0;
 var $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0;
 var $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0;
 var $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0;
 var $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0;
 var $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0;
 var $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0;
 var $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0;
 var $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0;
 var $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0;
 var $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0;
 var $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0;
 var $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0;
 var $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0;
 var $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0;
 var $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0;
 var $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0;
 var $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0;
 var $1582 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0.0, $609 = 0, $61 = 0, $610 = 0, $611 = 0.0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $instruccion$byval_copy27 = 0, $leninc = 0, $leninc279 = 0, $leninc281 = 0, $leninc283 = 0;
 var $leninc285 = 0, $leninc288 = 0, $strlen = 0, $strlen278 = 0, $strlen280 = 0, $strlen282 = 0, $strlen284 = 0, $strlen287 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 26272|0;
 $instruccion$byval_copy27 = sp + 25728|0;
 $vararg_buffer = sp + 25720|0;
 $0 = sp + 25872|0;
 $1 = sp + 120|0;
 $$sroa$8 = sp;
 HEAP32[199593] = 0;
 HEAP32[199594] = -2;
 $$0249 = $0;$$0257 = 200;$$0266 = $1;$$1245 = 0;$$1261 = $1;$$1271 = $0;
 L1: while(1) {
  $3 = $$1245&65535;
  HEAP16[$$1271>>1] = $3;
  $4 = (($$0249) + ($$0257<<1)|0);
  $5 = ((($4)) + -2|0);
  $6 = ($5>>>0)>($$1271>>>0);
  if ($6) {
   $$2259 = $$0257;$$3 = $$0249;$$3263 = $$1261;$$3269 = $$0266;$$3273 = $$1271;
  } else {
   $7 = $$1271;
   $8 = $$0249;
   $9 = (($7) - ($8))|0;
   $10 = $9 >> 1;
   $11 = (($10) + 1)|0;
   $12 = ($$0257>>>0)>(9999);
   if ($12) {
    label = 206;
    break;
   }
   $13 = $$0257 << 1;
   $14 = ($13>>>0)<(10000);
   $$ = $14 ? $13 : 10000;
   $15 = ($$*130)|0;
   $16 = (($15) + 127)|0;
   $17 = (_malloc($16)|0);
   $18 = ($17|0)==(0|0);
   if ($18) {
    $$0 = 4;$$1250 = $$0249;$$1267 = $$0266;
   } else {
    $19 = $11 << 1;
    _memcpy(($17|0),($$0249|0),($19|0))|0;
    $20 = $$ << 1;
    $21 = (($20) + 127)|0;
    $22 = $21 >>> 7;
    $23 = (($17) + ($22<<7)|0);
    $24 = $11 << 7;
    _memcpy(($23|0),($$0266|0),($24|0))|0;
    $25 = ($$0249|0)==($0|0);
    if ($25) {
     $$0 = 0;$$1250 = $17;$$1267 = $23;
    } else {
     _free($$0249);
     $$0 = 0;$$1250 = $17;$$1267 = $23;
    }
   }
   $cond = ($$0|0)==(0);
   $26 = (($$1250) + ($11<<1)|0);
   $27 = ((($26)) + -2|0);
   $28 = (($$1267) + ($11<<7)|0);
   $29 = ((($28)) + -128|0);
   $30 = ($$|0)>($11|0);
   $$289 = $30 ? 0 : 9;
   $$$1271 = $cond ? $27 : $$1271;
   $$$1261 = $cond ? $29 : $$1261;
   $$289$$0 = $cond ? $$289 : $$0;
   $trunc = $$289$$0&255;
   $trunc$clear = $trunc & 15;
   switch ($trunc$clear<<24>>24) {
   case 9:  {
    $$0255$ph = 1;$$5$ph = $$1250;
    label = 207;
    break L1;
    break;
   }
   case 4:  {
    label = 206;
    break L1;
    break;
   }
   case 0:  {
    $$2259 = $$;$$3 = $$1250;$$3263 = $$$1261;$$3269 = $$1267;$$3273 = $$$1271;
    break;
   }
   default: {
    $$0243 = 0;
    label = 209;
    break L1;
   }
   }
  }
  $31 = ($$1245|0)==(75);
  if ($31) {
   $$0255$ph = 0;$$5$ph = $$3;
   label = 207;
   break;
  }
  $32 = (2560 + ($$1245<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33 << 16 >> 16;
  $35 = ($33<<16>>16)==(-87);
  do {
   if ($35) {
    label = 22;
   } else {
    $36 = HEAP32[199594]|0;
    $37 = ($36|0)==(-2);
    if ($37) {
     $38 = (_yylex()|0);
     HEAP32[199594] = $38;
     $39 = $38;
    } else {
     $39 = $36;
    }
    $40 = ($39|0)<(1);
    if ($40) {
     HEAP32[199594] = 0;
     $$0254 = 0;
    } else {
     $41 = ($39>>>0)<(302);
     if ($41) {
      $42 = (27883 + ($39)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $$0254 = $44;
     } else {
      $$0254 = 2;
     }
    }
    $45 = (($$0254) + ($34))|0;
    $46 = ($45>>>0)>(181);
    if ($46) {
     label = 22;
    } else {
     $47 = (2882 + ($45<<1)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48 << 16 >> 16;
     $50 = ($49|0)==($$0254|0);
     if ($50) {
      $51 = (28185 + ($45)|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = ($52<<24>>24)==(0);
      if ($54) {
       $55 = (0 - ($53))|0;
       $$0256 = $55;
       label = 23;
       break;
      } else {
       HEAP32[199594] = -2;
       $56 = ((($$3263)) + 128|0);
       dest=$56; src=76528; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $$0244 = $53;$$0260 = $56;$$0270 = $$3273;
       break;
      }
     } else {
      label = 22;
     }
    }
   }
  } while(0);
  if ((label|0) == 22) {
   label = 0;
   $57 = (28367 + ($$1245)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($58<<24>>24)==(0);
   if ($60) {
    label = 205;
    break;
   } else {
    $$0256 = $59;
    label = 23;
   }
  }
  do {
   if ((label|0) == 23) {
    label = 0;
    $61 = (28528 + ($$0256)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = (1 - ($63))|0;
    $65 = (($$3263) + ($64<<7)|0);
    $66 = $65;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($66) + 4)|0;
    $70 = $69;
    $71 = HEAP32[$70>>2]|0;
    $$sroa$8$0$$sroa_idx = (((($$3263) + ($64<<7)|0)) + 8|0);
    dest=$$sroa$8; src=$$sroa$8$0$$sroa_idx; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    L31: do {
     switch ($$0256|0) {
     case 2:  {
      $72 = HEAP32[199588]|0;
      switch ($72|0) {
      case 0:  {
       label = 25;
       break L1;
       break;
      }
      case 1:  {
       $73 = HEAP32[199592]|0;
       $74 = ($73|0)==(0);
       if (!($74)) {
        $75 = 76512;
        $76 = $75;
        $77 = HEAP32[$76>>2]|0;
        $78 = (($75) + 4)|0;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        _te_inserta(841737,$77,$80,1);
        HEAP32[199592] = 0;
       }
       HEAP32[199592] = 1;
       $strlen287 = (_strlen($$3263)|0);
       $leninc288 = (($strlen287) + 1)|0;
       _memcpy((841737|0),($$3263|0),($leninc288|0))|0;
       $1556 = $68;$1559 = $71;
       break L31;
       break;
      }
      case 2:  {
       $81 = HEAP32[199592]|0;
       $82 = ($81|0)==(0);
       if (!($82)) {
        $83 = 76512;
        $84 = $83;
        $85 = HEAP32[$84>>2]|0;
        $86 = (($83) + 4)|0;
        $87 = $86;
        $88 = HEAP32[$87>>2]|0;
        _te_inserta(841737,$85,$88,1);
        HEAP32[199592] = 0;
       }
       $89 = 76520;
       $90 = $89;
       $91 = HEAP32[$90>>2]|0;
       $92 = (($89) + 4)|0;
       $93 = $92;
       $94 = HEAP32[$93>>2]|0;
       _te_inserta($$3263,$91,$94,2);
       $1556 = $68;$1559 = $71;
       break L31;
       break;
      }
      default: {
       label = 32;
       break L1;
      }
      }
      break;
     }
     case 78:  {
      $1530 = HEAP32[199588]|0;
      $1531 = ($1530|0)==(2);
      if (!($1531)) {
       label = 199;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      HEAP8[798380] = 109;
      HEAP32[(798384)>>2] = 2;
      HEAP8[(798388)>>0] = 31;
      HEAP8[(798389)>>0] = 0;
      HEAP8[(798390)>>0] = 0;
      HEAP16[(798392)>>1] = 0;
      $1532 = 76520;
      $1533 = $1532;
      $1534 = HEAP32[$1533>>2]|0;
      $1535 = (($1532) + 4)|0;
      $1536 = $1535;
      $1537 = HEAP32[$1536>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1534,$1537,$instruccion$byval_copy27);
      $1538 = 76520;
      $1539 = $1538;
      $1540 = HEAP32[$1539>>2]|0;
      $1541 = (($1538) + 4)|0;
      $1542 = $1541;
      $1543 = HEAP32[$1542>>2]|0;
      $1544 = (_i64Add(($1540|0),($1543|0),4,0)|0);
      $1545 = tempRet0;
      $1546 = 76520;
      $1547 = $1546;
      HEAP32[$1547>>2] = $1544;
      $1548 = (($1546) + 4)|0;
      $1549 = $1548;
      HEAP32[$1549>>2] = $1545;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 77:  {
      $1495 = HEAP32[199588]|0;
      $1496 = ($1495|0)==(2);
      if (!($1496)) {
       label = 196;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1497 = ((($$3263)) + -128|0);
      $1498 = $1497;
      $1499 = $1498;
      $1500 = HEAP32[$1499>>2]|0;
      $1501 = (($1498) + 4)|0;
      $1502 = $1501;
      $1503 = HEAP32[$1502>>2]|0;
      $1504 = $1500&255;
      HEAP8[798380] = $1504;
      HEAP32[(798384)>>2] = 2;
      HEAP8[(798390)>>0] = 0;
      $1505 = $$3263;
      $1506 = $1505;
      $1507 = HEAP32[$1506>>2]|0;
      $1508 = (($1505) + 4)|0;
      $1509 = $1508;
      $1510 = HEAP32[$1509>>2]|0;
      $1511 = $1507&255;
      HEAP8[(798388)>>0] = $1511;
      HEAP8[(798389)>>0] = 0;
      HEAP16[(798392)>>1] = 0;
      $1512 = 76520;
      $1513 = $1512;
      $1514 = HEAP32[$1513>>2]|0;
      $1515 = (($1512) + 4)|0;
      $1516 = $1515;
      $1517 = HEAP32[$1516>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1514,$1517,$instruccion$byval_copy27);
      $1518 = 76520;
      $1519 = $1518;
      $1520 = HEAP32[$1519>>2]|0;
      $1521 = (($1518) + 4)|0;
      $1522 = $1521;
      $1523 = HEAP32[$1522>>2]|0;
      $1524 = (_i64Add(($1520|0),($1523|0),4,0)|0);
      $1525 = tempRet0;
      $1526 = 76520;
      $1527 = $1526;
      HEAP32[$1527>>2] = $1524;
      $1528 = (($1526) + 4)|0;
      $1529 = $1528;
      HEAP32[$1529>>2] = $1525;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 76:  {
      $1456 = HEAP32[199588]|0;
      $1457 = ($1456|0)==(2);
      if (!($1457)) {
       label = 193;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1458 = ((($$3263)) + -128|0);
      $1459 = $1458;
      $1460 = $1459;
      $1461 = HEAP32[$1460>>2]|0;
      $1462 = (($1459) + 4)|0;
      $1463 = $1462;
      $1464 = HEAP32[$1463>>2]|0;
      $1465 = $1461&255;
      HEAP8[798380] = $1465;
      HEAP32[(798384)>>2] = 2;
      HEAP8[(798390)>>0] = 0;
      HEAP8[(798388)>>0] = 0;
      HEAP8[(798389)>>0] = 0;
      $1466 = $$3263;
      $1467 = $1466;
      $1468 = HEAP32[$1467>>2]|0;
      $1469 = (($1466) + 4)|0;
      $1470 = $1469;
      $1471 = HEAP32[$1470>>2]|0;
      $1472 = 76520;
      $1473 = $1472;
      $1474 = HEAP32[$1473>>2]|0;
      $1475 = (($1472) + 4)|0;
      $1476 = $1475;
      $1477 = HEAP32[$1476>>2]|0;
      $1478 = (_i64Add(($1468|0),($1471|0),65532,0)|0);
      $1479 = tempRet0;
      $1480 = (_i64Subtract(($1478|0),($1479|0),($1474|0),($1477|0))|0);
      $1481 = tempRet0;
      $1482 = $1480&65535;
      HEAP16[(798392)>>1] = $1482;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1474,$1477,$instruccion$byval_copy27);
      $1483 = 76520;
      $1484 = $1483;
      $1485 = HEAP32[$1484>>2]|0;
      $1486 = (($1483) + 4)|0;
      $1487 = $1486;
      $1488 = HEAP32[$1487>>2]|0;
      $1489 = (_i64Add(($1485|0),($1488|0),4,0)|0);
      $1490 = tempRet0;
      $1491 = 76520;
      $1492 = $1491;
      HEAP32[$1492>>2] = $1489;
      $1493 = (($1491) + 4)|0;
      $1494 = $1493;
      HEAP32[$1494>>2] = $1490;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 75:  {
      $1417 = HEAP32[199588]|0;
      $1418 = ($1417|0)==(2);
      if (!($1418)) {
       label = 190;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1419 = ((($$3263)) + -128|0);
      $1420 = $1419;
      $1421 = $1420;
      $1422 = HEAP32[$1421>>2]|0;
      $1423 = (($1420) + 4)|0;
      $1424 = $1423;
      $1425 = HEAP32[$1424>>2]|0;
      $1426 = $1422&255;
      HEAP8[798380] = $1426;
      HEAP32[(798384)>>2] = 1;
      HEAP8[(798390)>>0] = 0;
      HEAP8[(798388)>>0] = 32;
      HEAP8[(798389)>>0] = 0;
      $1427 = $$3263;
      $1428 = $1427;
      $1429 = HEAP32[$1428>>2]|0;
      $1430 = (($1427) + 4)|0;
      $1431 = $1430;
      $1432 = HEAP32[$1431>>2]|0;
      $1433 = 76520;
      $1434 = $1433;
      $1435 = HEAP32[$1434>>2]|0;
      $1436 = (($1433) + 4)|0;
      $1437 = $1436;
      $1438 = HEAP32[$1437>>2]|0;
      $1439 = (_i64Add(($1429|0),($1432|0),65532,0)|0);
      $1440 = tempRet0;
      $1441 = (_i64Subtract(($1439|0),($1440|0),($1435|0),($1438|0))|0);
      $1442 = tempRet0;
      $1443 = $1441&65535;
      HEAP16[(798392)>>1] = $1443;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1435,$1438,$instruccion$byval_copy27);
      $1444 = 76520;
      $1445 = $1444;
      $1446 = HEAP32[$1445>>2]|0;
      $1447 = (($1444) + 4)|0;
      $1448 = $1447;
      $1449 = HEAP32[$1448>>2]|0;
      $1450 = (_i64Add(($1446|0),($1449|0),4,0)|0);
      $1451 = tempRet0;
      $1452 = 76520;
      $1453 = $1452;
      HEAP32[$1453>>2] = $1450;
      $1454 = (($1452) + 4)|0;
      $1455 = $1454;
      HEAP32[$1455>>2] = $1451;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 74:  {
      $1362 = HEAP32[199588]|0;
      $1363 = ($1362|0)==(2);
      if (!($1363)) {
       label = 187;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1364 = ((($$3263)) + -640|0);
      $1365 = $1364;
      $1366 = $1365;
      $1367 = HEAP32[$1366>>2]|0;
      $1368 = (($1365) + 4)|0;
      $1369 = $1368;
      $1370 = HEAP32[$1369>>2]|0;
      $1371 = $1367&255;
      HEAP8[798380] = $1371;
      HEAP32[(798384)>>2] = 1;
      HEAP8[(798390)>>0] = 0;
      $1372 = ((($$3263)) + -512|0);
      $1373 = $1372;
      $1374 = $1373;
      $1375 = HEAP32[$1374>>2]|0;
      $1376 = (($1373) + 4)|0;
      $1377 = $1376;
      $1378 = HEAP32[$1377>>2]|0;
      $1379 = $1375&255;
      HEAP8[(798388)>>0] = $1379;
      $1380 = ((($$3263)) + -256|0);
      $1381 = $1380;
      $1382 = $1381;
      $1383 = HEAP32[$1382>>2]|0;
      $1384 = (($1381) + 4)|0;
      $1385 = $1384;
      $1386 = HEAP32[$1385>>2]|0;
      $1387 = $1383&255;
      HEAP8[(798389)>>0] = $1387;
      $1388 = $$3263;
      $1389 = $1388;
      $1390 = HEAP32[$1389>>2]|0;
      $1391 = (($1388) + 4)|0;
      $1392 = $1391;
      $1393 = HEAP32[$1392>>2]|0;
      $1394 = 76520;
      $1395 = $1394;
      $1396 = HEAP32[$1395>>2]|0;
      $1397 = (($1394) + 4)|0;
      $1398 = $1397;
      $1399 = HEAP32[$1398>>2]|0;
      $1400 = (_i64Add(($1390|0),($1393|0),65532,0)|0);
      $1401 = tempRet0;
      $1402 = (_i64Subtract(($1400|0),($1401|0),($1396|0),($1399|0))|0);
      $1403 = tempRet0;
      $1404 = $1402&65535;
      HEAP16[(798392)>>1] = $1404;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1396,$1399,$instruccion$byval_copy27);
      $1405 = 76520;
      $1406 = $1405;
      $1407 = HEAP32[$1406>>2]|0;
      $1408 = (($1405) + 4)|0;
      $1409 = $1408;
      $1410 = HEAP32[$1409>>2]|0;
      $1411 = (_i64Add(($1407|0),($1410|0),4,0)|0);
      $1412 = tempRet0;
      $1413 = 76520;
      $1414 = $1413;
      HEAP32[$1414>>2] = $1411;
      $1415 = (($1413) + 4)|0;
      $1416 = $1415;
      HEAP32[$1416>>2] = $1412;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 73:  {
      $1315 = HEAP32[199588]|0;
      $1316 = ($1315|0)==(2);
      if (!($1316)) {
       label = 184;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1317 = ((($$3263)) + -384|0);
      $1318 = $1317;
      $1319 = $1318;
      $1320 = HEAP32[$1319>>2]|0;
      $1321 = (($1318) + 4)|0;
      $1322 = $1321;
      $1323 = HEAP32[$1322>>2]|0;
      $1324 = $1320&255;
      HEAP8[798380] = $1324;
      HEAP32[(798384)>>2] = 1;
      HEAP8[(798390)>>0] = 0;
      $1325 = ((($$3263)) + -256|0);
      $1326 = $1325;
      $1327 = $1326;
      $1328 = HEAP32[$1327>>2]|0;
      $1329 = (($1326) + 4)|0;
      $1330 = $1329;
      $1331 = HEAP32[$1330>>2]|0;
      $1332 = $1328&255;
      HEAP8[(798388)>>0] = $1332;
      HEAP8[(798389)>>0] = 0;
      $1333 = $$3263;
      $1334 = $1333;
      $1335 = HEAP32[$1334>>2]|0;
      $1336 = (($1333) + 4)|0;
      $1337 = $1336;
      $1338 = HEAP32[$1337>>2]|0;
      $1339 = 76520;
      $1340 = $1339;
      $1341 = HEAP32[$1340>>2]|0;
      $1342 = (($1339) + 4)|0;
      $1343 = $1342;
      $1344 = HEAP32[$1343>>2]|0;
      $1345 = (_i64Add(($1335|0),($1338|0),65532,0)|0);
      $1346 = tempRet0;
      $1347 = (_i64Subtract(($1345|0),($1346|0),($1341|0),($1344|0))|0);
      $1348 = tempRet0;
      $1349 = $1347&65535;
      HEAP16[(798392)>>1] = $1349;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1341,$1344,$instruccion$byval_copy27);
      $1350 = 76520;
      $1351 = $1350;
      $1352 = HEAP32[$1351>>2]|0;
      $1353 = (($1350) + 4)|0;
      $1354 = $1353;
      $1355 = HEAP32[$1354>>2]|0;
      $1356 = (_i64Add(($1352|0),($1355|0),4,0)|0);
      $1357 = tempRet0;
      $1358 = 76520;
      $1359 = $1358;
      HEAP32[$1359>>2] = $1356;
      $1360 = (($1358) + 4)|0;
      $1361 = $1360;
      HEAP32[$1361>>2] = $1357;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 72:  {
      $1272 = HEAP32[199588]|0;
      $1273 = ($1272|0)==(2);
      if (!($1273)) {
       label = 181;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1274 = ((($$3263)) + -384|0);
      $1275 = $1274;
      $1276 = $1275;
      $1277 = HEAP32[$1276>>2]|0;
      $1278 = (($1275) + 4)|0;
      $1279 = $1278;
      $1280 = HEAP32[$1279>>2]|0;
      $1281 = $1277&255;
      HEAP8[798380] = $1281;
      HEAP32[(798384)>>2] = 0;
      HEAP8[(798390)>>0] = 32;
      $1282 = ((($$3263)) + -256|0);
      $1283 = $1282;
      $1284 = $1283;
      $1285 = HEAP32[$1284>>2]|0;
      $1286 = (($1283) + 4)|0;
      $1287 = $1286;
      $1288 = HEAP32[$1287>>2]|0;
      $1289 = $1285&255;
      HEAP8[(798388)>>0] = $1289;
      $1290 = $$3263;
      $1291 = $1290;
      $1292 = HEAP32[$1291>>2]|0;
      $1293 = (($1290) + 4)|0;
      $1294 = $1293;
      $1295 = HEAP32[$1294>>2]|0;
      $1296 = $1292&255;
      HEAP8[(798389)>>0] = $1296;
      HEAP16[(798392)>>1] = 0;
      $1297 = 76520;
      $1298 = $1297;
      $1299 = HEAP32[$1298>>2]|0;
      $1300 = (($1297) + 4)|0;
      $1301 = $1300;
      $1302 = HEAP32[$1301>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1299,$1302,$instruccion$byval_copy27);
      $1303 = 76520;
      $1304 = $1303;
      $1305 = HEAP32[$1304>>2]|0;
      $1306 = (($1303) + 4)|0;
      $1307 = $1306;
      $1308 = HEAP32[$1307>>2]|0;
      $1309 = (_i64Add(($1305|0),($1308|0),4,0)|0);
      $1310 = tempRet0;
      $1311 = 76520;
      $1312 = $1311;
      HEAP32[$1312>>2] = $1309;
      $1313 = (($1311) + 4)|0;
      $1314 = $1313;
      HEAP32[$1314>>2] = $1310;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 71:  {
      $1229 = HEAP32[199588]|0;
      $1230 = ($1229|0)==(2);
      if (!($1230)) {
       label = 178;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1231 = ((($$3263)) + -384|0);
      $1232 = $1231;
      $1233 = $1232;
      $1234 = HEAP32[$1233>>2]|0;
      $1235 = (($1232) + 4)|0;
      $1236 = $1235;
      $1237 = HEAP32[$1236>>2]|0;
      $1238 = $1234&255;
      HEAP8[798380] = $1238;
      HEAP32[(798384)>>2] = 1;
      $1239 = ((($$3263)) + -256|0);
      $1240 = $1239;
      $1241 = $1240;
      $1242 = HEAP32[$1241>>2]|0;
      $1243 = (($1240) + 4)|0;
      $1244 = $1243;
      $1245 = HEAP32[$1244>>2]|0;
      $1246 = $1242&255;
      HEAP8[(798390)>>0] = $1246;
      HEAP8[(798388)>>0] = 0;
      HEAP8[(798389)>>0] = 0;
      $1247 = $$3263;
      $1248 = $1247;
      $1249 = HEAP32[$1248>>2]|0;
      $1250 = (($1247) + 4)|0;
      $1251 = $1250;
      $1252 = HEAP32[$1251>>2]|0;
      $1253 = $1249&65535;
      HEAP16[(798392)>>1] = $1253;
      $1254 = 76520;
      $1255 = $1254;
      $1256 = HEAP32[$1255>>2]|0;
      $1257 = (($1254) + 4)|0;
      $1258 = $1257;
      $1259 = HEAP32[$1258>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1256,$1259,$instruccion$byval_copy27);
      $1260 = 76520;
      $1261 = $1260;
      $1262 = HEAP32[$1261>>2]|0;
      $1263 = (($1260) + 4)|0;
      $1264 = $1263;
      $1265 = HEAP32[$1264>>2]|0;
      $1266 = (_i64Add(($1262|0),($1265|0),4,0)|0);
      $1267 = tempRet0;
      $1268 = 76520;
      $1269 = $1268;
      HEAP32[$1269>>2] = $1266;
      $1270 = (($1268) + 4)|0;
      $1271 = $1270;
      HEAP32[$1271>>2] = $1267;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 70:  {
      $1194 = HEAP32[199588]|0;
      $1195 = ($1194|0)==(2);
      if (!($1195)) {
       label = 175;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1196 = ((($$3263)) + -128|0);
      $1197 = $1196;
      $1198 = $1197;
      $1199 = HEAP32[$1198>>2]|0;
      $1200 = (($1197) + 4)|0;
      $1201 = $1200;
      $1202 = HEAP32[$1201>>2]|0;
      $1203 = $1199&255;
      HEAP8[798380] = $1203;
      HEAP32[(798384)>>2] = 1;
      HEAP8[(798390)>>0] = 0;
      HEAP8[(798388)>>0] = 0;
      HEAP8[(798389)>>0] = 0;
      $1204 = $$3263;
      $1205 = $1204;
      $1206 = HEAP32[$1205>>2]|0;
      $1207 = (($1204) + 4)|0;
      $1208 = $1207;
      $1209 = HEAP32[$1208>>2]|0;
      $1210 = $1206&65535;
      HEAP16[(798392)>>1] = $1210;
      $1211 = 76520;
      $1212 = $1211;
      $1213 = HEAP32[$1212>>2]|0;
      $1214 = (($1211) + 4)|0;
      $1215 = $1214;
      $1216 = HEAP32[$1215>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1213,$1216,$instruccion$byval_copy27);
      $1217 = 76520;
      $1218 = $1217;
      $1219 = HEAP32[$1218>>2]|0;
      $1220 = (($1217) + 4)|0;
      $1221 = $1220;
      $1222 = HEAP32[$1221>>2]|0;
      $1223 = (_i64Add(($1219|0),($1222|0),4,0)|0);
      $1224 = tempRet0;
      $1225 = 76520;
      $1226 = $1225;
      HEAP32[$1226>>2] = $1223;
      $1227 = (($1225) + 4)|0;
      $1228 = $1227;
      HEAP32[$1228>>2] = $1224;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 69:  {
      $1143 = HEAP32[199588]|0;
      $1144 = ($1143|0)==(2);
      if (!($1144)) {
       label = 172;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1145 = ((($$3263)) + -640|0);
      $1146 = $1145;
      $1147 = $1146;
      $1148 = HEAP32[$1147>>2]|0;
      $1149 = (($1146) + 4)|0;
      $1150 = $1149;
      $1151 = HEAP32[$1150>>2]|0;
      $1152 = $1148&255;
      HEAP8[798380] = $1152;
      HEAP32[(798384)>>2] = 1;
      $1153 = ((($$3263)) + -512|0);
      $1154 = $1153;
      $1155 = $1154;
      $1156 = HEAP32[$1155>>2]|0;
      $1157 = (($1154) + 4)|0;
      $1158 = $1157;
      $1159 = HEAP32[$1158>>2]|0;
      $1160 = $1156&255;
      HEAP8[(798390)>>0] = $1160;
      $1161 = ((($$3263)) + -256|0);
      $1162 = $1161;
      $1163 = $1162;
      $1164 = HEAP32[$1163>>2]|0;
      $1165 = (($1162) + 4)|0;
      $1166 = $1165;
      $1167 = HEAP32[$1166>>2]|0;
      $1168 = $1164&255;
      HEAP8[(798388)>>0] = $1168;
      HEAP8[(798389)>>0] = 0;
      $1169 = $$3263;
      $1170 = $1169;
      $1171 = HEAP32[$1170>>2]|0;
      $1172 = (($1169) + 4)|0;
      $1173 = $1172;
      $1174 = HEAP32[$1173>>2]|0;
      $1175 = $1171&65535;
      HEAP16[(798392)>>1] = $1175;
      $1176 = 76520;
      $1177 = $1176;
      $1178 = HEAP32[$1177>>2]|0;
      $1179 = (($1176) + 4)|0;
      $1180 = $1179;
      $1181 = HEAP32[$1180>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1178,$1181,$instruccion$byval_copy27);
      $1182 = 76520;
      $1183 = $1182;
      $1184 = HEAP32[$1183>>2]|0;
      $1185 = (($1182) + 4)|0;
      $1186 = $1185;
      $1187 = HEAP32[$1186>>2]|0;
      $1188 = (_i64Add(($1184|0),($1187|0),4,0)|0);
      $1189 = tempRet0;
      $1190 = 76520;
      $1191 = $1190;
      HEAP32[$1191>>2] = $1188;
      $1192 = (($1190) + 4)|0;
      $1193 = $1192;
      HEAP32[$1193>>2] = $1189;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 13:  {
      $95 = 76512;
      $96 = $95;
      HEAP32[$96>>2] = 0;
      $97 = (($95) + 4)|0;
      $98 = $97;
      HEAP32[$98>>2] = 0;
      HEAP32[199588] = 1;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 14:  {
      $99 = 76520;
      $100 = $99;
      HEAP32[$100>>2] = 0;
      $101 = (($99) + 4)|0;
      $102 = $101;
      HEAP32[$102>>2] = 0;
      HEAP32[199588] = 2;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 15:  {
      $103 = HEAP32[199588]|0;
      $104 = ($103|0)==(1);
      if (!($104)) {
       label = 36;
       break L1;
      }
      HEAP32[84] = 2;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 68:  {
      $1090 = HEAP32[199588]|0;
      $1091 = ($1090|0)==(2);
      if (!($1091)) {
       label = 169;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1092 = ((($$3263)) + -640|0);
      $1093 = $1092;
      $1094 = $1093;
      $1095 = HEAP32[$1094>>2]|0;
      $1096 = (($1093) + 4)|0;
      $1097 = $1096;
      $1098 = HEAP32[$1097>>2]|0;
      $1099 = (_i64Add(($1095|0),($1098|0),1,0)|0);
      $1100 = tempRet0;
      $1101 = $1099&255;
      HEAP8[798380] = $1101;
      HEAP32[(798384)>>2] = 1;
      $1102 = ((($$3263)) + -512|0);
      $1103 = $1102;
      $1104 = $1103;
      $1105 = HEAP32[$1104>>2]|0;
      $1106 = (($1103) + 4)|0;
      $1107 = $1106;
      $1108 = HEAP32[$1107>>2]|0;
      $1109 = $1105&255;
      HEAP8[(798390)>>0] = $1109;
      $1110 = ((($$3263)) + -256|0);
      $1111 = $1110;
      $1112 = $1111;
      $1113 = HEAP32[$1112>>2]|0;
      $1114 = (($1111) + 4)|0;
      $1115 = $1114;
      $1116 = HEAP32[$1115>>2]|0;
      $1117 = $1113&255;
      HEAP8[(798388)>>0] = $1117;
      HEAP8[(798389)>>0] = 0;
      $1118 = $$3263;
      $1119 = $1118;
      $1120 = HEAP32[$1119>>2]|0;
      $1121 = (($1118) + 4)|0;
      $1122 = $1121;
      $1123 = HEAP32[$1122>>2]|0;
      $1124 = $1120&65535;
      HEAP16[(798392)>>1] = $1124;
      $1125 = 76520;
      $1126 = $1125;
      $1127 = HEAP32[$1126>>2]|0;
      $1128 = (($1125) + 4)|0;
      $1129 = $1128;
      $1130 = HEAP32[$1129>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1127,$1130,$instruccion$byval_copy27);
      $1131 = 76520;
      $1132 = $1131;
      $1133 = HEAP32[$1132>>2]|0;
      $1134 = (($1131) + 4)|0;
      $1135 = $1134;
      $1136 = HEAP32[$1135>>2]|0;
      $1137 = (_i64Add(($1133|0),($1136|0),4,0)|0);
      $1138 = tempRet0;
      $1139 = 76520;
      $1140 = $1139;
      HEAP32[$1140>>2] = $1137;
      $1141 = (($1139) + 4)|0;
      $1142 = $1141;
      HEAP32[$1142>>2] = $1138;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 17:  {
      $105 = HEAP32[199588]|0;
      $106 = ($105|0)==(1);
      if (!($106)) {
       label = 39;
       break L1;
      }
      HEAP32[84] = 3;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 67:  {
      $1047 = HEAP32[199588]|0;
      $1048 = ($1047|0)==(2);
      if (!($1048)) {
       label = 166;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $1049 = ((($$3263)) + -384|0);
      $1050 = $1049;
      $1051 = $1050;
      $1052 = HEAP32[$1051>>2]|0;
      $1053 = (($1050) + 4)|0;
      $1054 = $1053;
      $1055 = HEAP32[$1054>>2]|0;
      $1056 = $1052&255;
      HEAP8[798380] = $1056;
      HEAP32[(798384)>>2] = 0;
      $1057 = ((($$3263)) + -256|0);
      $1058 = $1057;
      $1059 = $1058;
      $1060 = HEAP32[$1059>>2]|0;
      $1061 = (($1058) + 4)|0;
      $1062 = $1061;
      $1063 = HEAP32[$1062>>2]|0;
      $1064 = $1060&255;
      HEAP8[(798390)>>0] = $1064;
      $1065 = $$3263;
      $1066 = $1065;
      $1067 = HEAP32[$1066>>2]|0;
      $1068 = (($1065) + 4)|0;
      $1069 = $1068;
      $1070 = HEAP32[$1069>>2]|0;
      $1071 = $1067&255;
      HEAP8[(798388)>>0] = $1071;
      HEAP8[(798389)>>0] = 0;
      HEAP16[(798392)>>1] = 0;
      $1072 = 76520;
      $1073 = $1072;
      $1074 = HEAP32[$1073>>2]|0;
      $1075 = (($1072) + 4)|0;
      $1076 = $1075;
      $1077 = HEAP32[$1076>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1074,$1077,$instruccion$byval_copy27);
      $1078 = 76520;
      $1079 = $1078;
      $1080 = HEAP32[$1079>>2]|0;
      $1081 = (($1078) + 4)|0;
      $1082 = $1081;
      $1083 = HEAP32[$1082>>2]|0;
      $1084 = (_i64Add(($1080|0),($1083|0),4,0)|0);
      $1085 = tempRet0;
      $1086 = 76520;
      $1087 = $1086;
      HEAP32[$1087>>2] = $1084;
      $1088 = (($1086) + 4)|0;
      $1089 = $1088;
      HEAP32[$1089>>2] = $1085;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 19:  {
      $107 = HEAP32[199588]|0;
      $108 = ($107|0)==(1);
      if (!($108)) {
       label = 42;
       break L1;
      }
      HEAP32[84] = 4;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 66:  {
      $996 = HEAP32[199588]|0;
      $997 = ($996|0)==(2);
      if (!($997)) {
       label = 163;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $998 = ((($$3263)) + -640|0);
      $999 = $998;
      $1000 = $999;
      $1001 = HEAP32[$1000>>2]|0;
      $1002 = (($999) + 4)|0;
      $1003 = $1002;
      $1004 = HEAP32[$1003>>2]|0;
      $1005 = $1001&255;
      HEAP8[798380] = $1005;
      HEAP32[(798384)>>2] = 0;
      $1006 = ((($$3263)) + -512|0);
      $1007 = $1006;
      $1008 = $1007;
      $1009 = HEAP32[$1008>>2]|0;
      $1010 = (($1007) + 4)|0;
      $1011 = $1010;
      $1012 = HEAP32[$1011>>2]|0;
      $1013 = $1009&255;
      HEAP8[(798390)>>0] = $1013;
      $1014 = ((($$3263)) + -256|0);
      $1015 = $1014;
      $1016 = $1015;
      $1017 = HEAP32[$1016>>2]|0;
      $1018 = (($1015) + 4)|0;
      $1019 = $1018;
      $1020 = HEAP32[$1019>>2]|0;
      $1021 = $1017&255;
      HEAP8[(798388)>>0] = $1021;
      $1022 = $$3263;
      $1023 = $1022;
      $1024 = HEAP32[$1023>>2]|0;
      $1025 = (($1022) + 4)|0;
      $1026 = $1025;
      $1027 = HEAP32[$1026>>2]|0;
      $1028 = $1024&255;
      HEAP8[(798389)>>0] = $1028;
      HEAP16[(798392)>>1] = 0;
      $1029 = 76520;
      $1030 = $1029;
      $1031 = HEAP32[$1030>>2]|0;
      $1032 = (($1029) + 4)|0;
      $1033 = $1032;
      $1034 = HEAP32[$1033>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($1031,$1034,$instruccion$byval_copy27);
      $1035 = 76520;
      $1036 = $1035;
      $1037 = HEAP32[$1036>>2]|0;
      $1038 = (($1035) + 4)|0;
      $1039 = $1038;
      $1040 = HEAP32[$1039>>2]|0;
      $1041 = (_i64Add(($1037|0),($1040|0),4,0)|0);
      $1042 = tempRet0;
      $1043 = 76520;
      $1044 = $1043;
      HEAP32[$1044>>2] = $1041;
      $1045 = (($1043) + 4)|0;
      $1046 = $1045;
      HEAP32[$1046>>2] = $1042;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 21:  {
      $109 = HEAP32[199588]|0;
      $110 = ($109|0)==(1);
      if (!($110)) {
       label = 45;
       break L1;
      }
      HEAP32[84] = 5;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 65:  {
      $945 = HEAP32[199588]|0;
      $946 = ($945|0)==(2);
      if (!($946)) {
       label = 160;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $947 = ((($$3263)) + -640|0);
      $948 = $947;
      $949 = $948;
      $950 = HEAP32[$949>>2]|0;
      $951 = (($948) + 4)|0;
      $952 = $951;
      $953 = HEAP32[$952>>2]|0;
      $954 = $950&255;
      HEAP8[798380] = $954;
      HEAP32[(798384)>>2] = 0;
      $955 = ((($$3263)) + -512|0);
      $956 = $955;
      $957 = $956;
      $958 = HEAP32[$957>>2]|0;
      $959 = (($956) + 4)|0;
      $960 = $959;
      $961 = HEAP32[$960>>2]|0;
      $962 = $958&255;
      HEAP8[(798390)>>0] = $962;
      $963 = ((($$3263)) + -256|0);
      $964 = $963;
      $965 = $964;
      $966 = HEAP32[$965>>2]|0;
      $967 = (($964) + 4)|0;
      $968 = $967;
      $969 = HEAP32[$968>>2]|0;
      $970 = $966&255;
      HEAP8[(798388)>>0] = $970;
      $971 = $$3263;
      $972 = $971;
      $973 = HEAP32[$972>>2]|0;
      $974 = (($971) + 4)|0;
      $975 = $974;
      $976 = HEAP32[$975>>2]|0;
      $977 = $973&255;
      HEAP8[(798389)>>0] = $977;
      HEAP16[(798392)>>1] = 0;
      $978 = 76520;
      $979 = $978;
      $980 = HEAP32[$979>>2]|0;
      $981 = (($978) + 4)|0;
      $982 = $981;
      $983 = HEAP32[$982>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($980,$983,$instruccion$byval_copy27);
      $984 = 76520;
      $985 = $984;
      $986 = HEAP32[$985>>2]|0;
      $987 = (($984) + 4)|0;
      $988 = $987;
      $989 = HEAP32[$988>>2]|0;
      $990 = (_i64Add(($986|0),($989|0),4,0)|0);
      $991 = tempRet0;
      $992 = 76520;
      $993 = $992;
      HEAP32[$993>>2] = $990;
      $994 = (($992) + 4)|0;
      $995 = $994;
      HEAP32[$995>>2] = $991;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 23:  {
      $111 = HEAP32[199588]|0;
      $112 = ($111|0)==(1);
      if (!($112)) {
       label = 48;
       break L1;
      }
      HEAP32[84] = 6;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 64:  {
      $893 = HEAP32[199588]|0;
      $894 = ($893|0)==(2);
      if (!($894)) {
       label = 157;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $895 = ((($$3263)) + -768|0);
      $896 = $895;
      $897 = $896;
      $898 = HEAP32[$897>>2]|0;
      $899 = (($896) + 4)|0;
      $900 = $899;
      $901 = HEAP32[$900>>2]|0;
      $902 = $898&255;
      HEAP8[798380] = $902;
      HEAP32[(798384)>>2] = 1;
      HEAP8[(798390)>>0] = 0;
      $903 = ((($$3263)) + -128|0);
      $904 = $903;
      $905 = $904;
      $906 = HEAP32[$905>>2]|0;
      $907 = (($904) + 4)|0;
      $908 = $907;
      $909 = HEAP32[$908>>2]|0;
      $910 = $906&255;
      HEAP8[(798388)>>0] = $910;
      $911 = ((($$3263)) + -640|0);
      $912 = $911;
      $913 = $912;
      $914 = HEAP32[$913>>2]|0;
      $915 = (($912) + 4)|0;
      $916 = $915;
      $917 = HEAP32[$916>>2]|0;
      $918 = $914&255;
      HEAP8[(798389)>>0] = $918;
      $919 = ((($$3263)) + -384|0);
      $920 = $919;
      $921 = $920;
      $922 = HEAP32[$921>>2]|0;
      $923 = (($920) + 4)|0;
      $924 = $923;
      $925 = HEAP32[$924>>2]|0;
      $926 = $922&65535;
      HEAP16[(798392)>>1] = $926;
      $strlen284 = (_strlen(841993)|0);
      $leninc285 = (($strlen284) + 1)|0;
      _memcpy(((798394)|0),(841993|0),($leninc285|0))|0;
      $927 = 76520;
      $928 = $927;
      $929 = HEAP32[$928>>2]|0;
      $930 = (($927) + 4)|0;
      $931 = $930;
      $932 = HEAP32[$931>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($929,$932,$instruccion$byval_copy27);
      $933 = 76520;
      $934 = $933;
      $935 = HEAP32[$934>>2]|0;
      $936 = (($933) + 4)|0;
      $937 = $936;
      $938 = HEAP32[$937>>2]|0;
      $939 = (_i64Add(($935|0),($938|0),4,0)|0);
      $940 = tempRet0;
      $941 = 76520;
      $942 = $941;
      HEAP32[$942>>2] = $939;
      $943 = (($941) + 4)|0;
      $944 = $943;
      HEAP32[$944>>2] = $940;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 25:  {
      $113 = HEAP32[199588]|0;
      $114 = ($113|0)==(1);
      if (!($114)) {
       label = 51;
       break L1;
      }
      HEAP32[84] = 8;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 63:  {
      $841 = HEAP32[199588]|0;
      $842 = ($841|0)==(2);
      if (!($842)) {
       label = 154;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $843 = ((($$3263)) + -768|0);
      $844 = $843;
      $845 = $844;
      $846 = HEAP32[$845>>2]|0;
      $847 = (($844) + 4)|0;
      $848 = $847;
      $849 = HEAP32[$848>>2]|0;
      $850 = $846&255;
      HEAP8[798380] = $850;
      HEAP32[(798384)>>2] = 1;
      HEAP8[(798390)>>0] = 0;
      $851 = ((($$3263)) + -128|0);
      $852 = $851;
      $853 = $852;
      $854 = HEAP32[$853>>2]|0;
      $855 = (($852) + 4)|0;
      $856 = $855;
      $857 = HEAP32[$856>>2]|0;
      $858 = $854&255;
      HEAP8[(798388)>>0] = $858;
      $859 = ((($$3263)) + -640|0);
      $860 = $859;
      $861 = $860;
      $862 = HEAP32[$861>>2]|0;
      $863 = (($860) + 4)|0;
      $864 = $863;
      $865 = HEAP32[$864>>2]|0;
      $866 = $862&255;
      HEAP8[(798389)>>0] = $866;
      $867 = ((($$3263)) + -384|0);
      $868 = $867;
      $869 = $868;
      $870 = HEAP32[$869>>2]|0;
      $871 = (($868) + 4)|0;
      $872 = $871;
      $873 = HEAP32[$872>>2]|0;
      $874 = $870&65535;
      HEAP16[(798392)>>1] = $874;
      $strlen282 = (_strlen(841993)|0);
      $leninc283 = (($strlen282) + 1)|0;
      _memcpy(((798394)|0),(841993|0),($leninc283|0))|0;
      $875 = 76520;
      $876 = $875;
      $877 = HEAP32[$876>>2]|0;
      $878 = (($875) + 4)|0;
      $879 = $878;
      $880 = HEAP32[$879>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($877,$880,$instruccion$byval_copy27);
      $881 = 76520;
      $882 = $881;
      $883 = HEAP32[$882>>2]|0;
      $884 = (($881) + 4)|0;
      $885 = $884;
      $886 = HEAP32[$885>>2]|0;
      $887 = (_i64Add(($883|0),($886|0),4,0)|0);
      $888 = tempRet0;
      $889 = 76520;
      $890 = $889;
      HEAP32[$890>>2] = $887;
      $891 = (($889) + 4)|0;
      $892 = $891;
      HEAP32[$892>>2] = $888;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 27:  {
      $115 = $$3263;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (($115) + 4)|0;
      $119 = $118;
      $120 = HEAP32[$119>>2]|0;
      $121 = 37640;
      $122 = $121;
      HEAP32[$122>>2] = $117;
      $123 = (($121) + 4)|0;
      $124 = $123;
      HEAP32[$124>>2] = $120;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 28:  {
      $125 = HEAP32[199588]|0;
      $126 = ($125|0)==(1);
      if (!($126)) {
       label = 55;
       break L1;
      }
      $127 = HEAP32[199592]|0;
      $128 = ($127|0)==(0);
      if (!($128)) {
       $129 = 76512;
       $130 = $129;
       $131 = HEAP32[$130>>2]|0;
       $132 = (($129) + 4)|0;
       $133 = $132;
       $134 = HEAP32[$133>>2]|0;
       _te_inserta(841737,$131,$134,1);
       HEAP32[199592] = 0;
      }
      $135 = $$3263;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = 76512;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = (($141) + 4)|0;
      $145 = $144;
      $146 = HEAP32[$145>>2]|0;
      $147 = (_i64Add(($143|0),($146|0),($137|0),($140|0))|0);
      $148 = tempRet0;
      $149 = 76512;
      $150 = $149;
      HEAP32[$150>>2] = $147;
      $151 = (($149) + 4)|0;
      $152 = $151;
      HEAP32[$152>>2] = $148;
      $153 = ($148|0)>(0);
      $154 = ($147>>>0)>(16384);
      $155 = ($148|0)==(0);
      $156 = $155 & $154;
      $157 = $153 | $156;
      if ($157) {
       label = 59;
       break L1;
      } else {
       $1556 = $68;$1559 = $71;
      }
      break;
     }
     case 29:  {
      $158 = HEAP32[199588]|0;
      $159 = ($158|0)==(1);
      if (!($159)) {
       label = 61;
       break L1;
      }
      $160 = HEAP32[199592]|0;
      $161 = ($160|0)==(0);
      if (!($161)) {
       $162 = 76512;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $165 = (($162) + 4)|0;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       _te_inserta(841737,$164,$167,1);
       HEAP32[199592] = 0;
      }
      HEAP32[199591] = 0;
      $$sink441 = 0;
      while(1) {
       $168 = (($$3263) + ($$sink441)|0);
       $169 = HEAP8[$168>>0]|0;
       HEAP8[76656] = $169;
       $170 = 76512;
       $171 = $170;
       $172 = HEAP32[$171>>2]|0;
       $173 = (($170) + 4)|0;
       $174 = $173;
       $175 = HEAP32[$174>>2]|0;
       $176 = ($$sink441|0)<(0);
       $177 = $176 << 31 >> 31;
       $178 = (_i64Add(($172|0),($175|0),($$sink441|0),($177|0))|0);
       $179 = tempRet0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($178,$179,$instruccion$byval_copy27,1,0);
       $180 = HEAP32[199591]|0;
       $181 = (($180) + 1)|0;
       HEAP32[199591] = $181;
       $182 = (_strlen($$3263)|0);
       $183 = (($182) + 1)|0;
       $184 = ($181>>>0)>($183>>>0);
       if ($184) {
        break;
       } else {
        $$sink441 = $181;
       }
      }
      $185 = 76512;
      $186 = $185;
      $187 = HEAP32[$186>>2]|0;
      $188 = (($185) + 4)|0;
      $189 = $188;
      $190 = HEAP32[$189>>2]|0;
      $191 = (_i64Add(($187|0),($190|0),($183|0),0)|0);
      $192 = tempRet0;
      $193 = 76512;
      $194 = $193;
      HEAP32[$194>>2] = $191;
      $195 = (($193) + 4)|0;
      $196 = $195;
      HEAP32[$196>>2] = $192;
      $197 = ($192|0)>(0);
      $198 = ($191>>>0)>(16384);
      $199 = ($192|0)==(0);
      $200 = $199 & $198;
      $201 = $197 | $200;
      if ($201) {
       label = 67;
       break L1;
      } else {
       $1556 = $68;$1559 = $71;
      }
      break;
     }
     case 62:  {
      $789 = HEAP32[199588]|0;
      $790 = ($789|0)==(2);
      if (!($790)) {
       label = 151;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $791 = ((($$3263)) + -768|0);
      $792 = $791;
      $793 = $792;
      $794 = HEAP32[$793>>2]|0;
      $795 = (($792) + 4)|0;
      $796 = $795;
      $797 = HEAP32[$796>>2]|0;
      $798 = $794&255;
      HEAP8[798380] = $798;
      HEAP32[(798384)>>2] = 1;
      $799 = ((($$3263)) + -640|0);
      $800 = $799;
      $801 = $800;
      $802 = HEAP32[$801>>2]|0;
      $803 = (($800) + 4)|0;
      $804 = $803;
      $805 = HEAP32[$804>>2]|0;
      $806 = $802&255;
      HEAP8[(798390)>>0] = $806;
      $807 = ((($$3263)) + -128|0);
      $808 = $807;
      $809 = $808;
      $810 = HEAP32[$809>>2]|0;
      $811 = (($808) + 4)|0;
      $812 = $811;
      $813 = HEAP32[$812>>2]|0;
      $814 = $810&255;
      HEAP8[(798388)>>0] = $814;
      HEAP8[(798389)>>0] = 0;
      $815 = ((($$3263)) + -384|0);
      $816 = $815;
      $817 = $816;
      $818 = HEAP32[$817>>2]|0;
      $819 = (($816) + 4)|0;
      $820 = $819;
      $821 = HEAP32[$820>>2]|0;
      $822 = $818&65535;
      HEAP16[(798392)>>1] = $822;
      $strlen280 = (_strlen(841993)|0);
      $leninc281 = (($strlen280) + 1)|0;
      _memcpy(((798394)|0),(841993|0),($leninc281|0))|0;
      $823 = 76520;
      $824 = $823;
      $825 = HEAP32[$824>>2]|0;
      $826 = (($823) + 4)|0;
      $827 = $826;
      $828 = HEAP32[$827>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($825,$828,$instruccion$byval_copy27);
      $829 = 76520;
      $830 = $829;
      $831 = HEAP32[$830>>2]|0;
      $832 = (($829) + 4)|0;
      $833 = $832;
      $834 = HEAP32[$833>>2]|0;
      $835 = (_i64Add(($831|0),($834|0),4,0)|0);
      $836 = tempRet0;
      $837 = 76520;
      $838 = $837;
      HEAP32[$838>>2] = $835;
      $839 = (($837) + 4)|0;
      $840 = $839;
      HEAP32[$840>>2] = $836;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 61:  {
      $737 = HEAP32[199588]|0;
      $738 = ($737|0)==(2);
      if (!($738)) {
       label = 148;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $739 = ((($$3263)) + -768|0);
      $740 = $739;
      $741 = $740;
      $742 = HEAP32[$741>>2]|0;
      $743 = (($740) + 4)|0;
      $744 = $743;
      $745 = HEAP32[$744>>2]|0;
      $746 = $742&255;
      HEAP8[798380] = $746;
      HEAP32[(798384)>>2] = 1;
      $747 = ((($$3263)) + -640|0);
      $748 = $747;
      $749 = $748;
      $750 = HEAP32[$749>>2]|0;
      $751 = (($748) + 4)|0;
      $752 = $751;
      $753 = HEAP32[$752>>2]|0;
      $754 = $750&255;
      HEAP8[(798390)>>0] = $754;
      $755 = ((($$3263)) + -128|0);
      $756 = $755;
      $757 = $756;
      $758 = HEAP32[$757>>2]|0;
      $759 = (($756) + 4)|0;
      $760 = $759;
      $761 = HEAP32[$760>>2]|0;
      $762 = $758&255;
      HEAP8[(798388)>>0] = $762;
      HEAP8[(798389)>>0] = 0;
      $763 = ((($$3263)) + -384|0);
      $764 = $763;
      $765 = $764;
      $766 = HEAP32[$765>>2]|0;
      $767 = (($764) + 4)|0;
      $768 = $767;
      $769 = HEAP32[$768>>2]|0;
      $770 = $766&65535;
      HEAP16[(798392)>>1] = $770;
      $strlen278 = (_strlen(841993)|0);
      $leninc279 = (($strlen278) + 1)|0;
      _memcpy(((798394)|0),(841993|0),($leninc279|0))|0;
      $771 = 76520;
      $772 = $771;
      $773 = HEAP32[$772>>2]|0;
      $774 = (($771) + 4)|0;
      $775 = $774;
      $776 = HEAP32[$775>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($773,$776,$instruccion$byval_copy27);
      $777 = 76520;
      $778 = $777;
      $779 = HEAP32[$778>>2]|0;
      $780 = (($777) + 4)|0;
      $781 = $780;
      $782 = HEAP32[$781>>2]|0;
      $783 = (_i64Add(($779|0),($782|0),4,0)|0);
      $784 = tempRet0;
      $785 = 76520;
      $786 = $785;
      HEAP32[$786>>2] = $783;
      $787 = (($785) + 4)|0;
      $788 = $787;
      HEAP32[$788>>2] = $784;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 60:  {
      $710 = HEAP32[199588]|0;
      $711 = ($710|0)==(2);
      if (!($711)) {
       label = 145;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $712 = $$3263;
      $713 = $712;
      $714 = HEAP32[$713>>2]|0;
      $715 = (($712) + 4)|0;
      $716 = $715;
      $717 = HEAP32[$716>>2]|0;
      $718 = $714&255;
      HEAP8[798380] = $718;
      HEAP16[(798392)>>1] = 0;
      ;HEAP32[(798384)>>2]=0|0;HEAP16[(798384)+4>>1]=0|0;HEAP8[(798384)+6>>0]=0|0;
      $719 = 76520;
      $720 = $719;
      $721 = HEAP32[$720>>2]|0;
      $722 = (($719) + 4)|0;
      $723 = $722;
      $724 = HEAP32[$723>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($721,$724,$instruccion$byval_copy27);
      $725 = 76520;
      $726 = $725;
      $727 = HEAP32[$726>>2]|0;
      $728 = (($725) + 4)|0;
      $729 = $728;
      $730 = HEAP32[$729>>2]|0;
      $731 = (_i64Add(($727|0),($730|0),4,0)|0);
      $732 = tempRet0;
      $733 = 76520;
      $734 = $733;
      HEAP32[$734>>2] = $731;
      $735 = (($733) + 4)|0;
      $736 = $735;
      HEAP32[$736>>2] = $732;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 33:  {
      $202 = HEAP32[84]|0;
      switch ($202|0) {
      case 2:  {
       $203 = $$3263;
       $204 = $203;
       $205 = HEAP32[$204>>2]|0;
       $206 = (($203) + 4)|0;
       $207 = $206;
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)>(0);
       $210 = ($205>>>0)>(255);
       $211 = ($208|0)==(0);
       $212 = $211 & $210;
       $213 = $209 | $212;
       if ($213) {
        label = 70;
        break L1;
       }
       $214 = HEAP32[199592]|0;
       $215 = ($214|0)==(0);
       if (!($215)) {
        $216 = 76512;
        $217 = $216;
        $218 = HEAP32[$217>>2]|0;
        $219 = (($216) + 4)|0;
        $220 = $219;
        $221 = HEAP32[$220>>2]|0;
        _te_inserta(841737,$218,$221,1);
        HEAP32[199592] = 0;
       }
       $222 = $$3263;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $225 = (($222) + 4)|0;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $228 = $224&255;
       HEAP8[76656] = $228;
       $229 = 76512;
       $230 = $229;
       $231 = HEAP32[$230>>2]|0;
       $232 = (($229) + 4)|0;
       $233 = $232;
       $234 = HEAP32[$233>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($231,$234,$instruccion$byval_copy27,2,0);
       $388 = 1;$389 = 0;
       break;
      }
      case 3:  {
       $235 = 76512;
       $236 = $235;
       $237 = HEAP32[$236>>2]|0;
       $238 = (($235) + 4)|0;
       $239 = $238;
       $240 = HEAP32[$239>>2]|0;
       $241 = $237 & 1;
       $242 = ($241|0)==(0);
       $243 = (0)==(0);
       $244 = $242 & $243;
       if (!($244)) {
        $245 = (___divdi3(($237|0),($240|0),2,0)|0);
        $246 = tempRet0;
        $247 = (_bitshift64Shl(($245|0),($246|0),1)|0);
        $248 = tempRet0;
        $249 = (_i64Add(($247|0),($248|0),2,0)|0);
        $250 = tempRet0;
        $251 = 76512;
        $252 = $251;
        HEAP32[$252>>2] = $249;
        $253 = (($251) + 4)|0;
        $254 = $253;
        HEAP32[$254>>2] = $250;
       }
       $255 = $$3263;
       $256 = $255;
       $257 = HEAP32[$256>>2]|0;
       $258 = (($255) + 4)|0;
       $259 = $258;
       $260 = HEAP32[$259>>2]|0;
       $261 = ($260|0)>(0);
       $262 = ($257>>>0)>(65535);
       $263 = ($260|0)==(0);
       $264 = $263 & $262;
       $265 = $261 | $264;
       if ($265) {
        label = 77;
        break L1;
       }
       $266 = HEAP32[199592]|0;
       $267 = ($266|0)==(0);
       if (!($267)) {
        $268 = 76512;
        $269 = $268;
        $270 = HEAP32[$269>>2]|0;
        $271 = (($268) + 4)|0;
        $272 = $271;
        $273 = HEAP32[$272>>2]|0;
        _te_inserta(841737,$270,$273,1);
        HEAP32[199592] = 0;
       }
       $274 = $$3263;
       $275 = $274;
       $276 = HEAP32[$275>>2]|0;
       $277 = (($274) + 4)|0;
       $278 = $277;
       $279 = HEAP32[$278>>2]|0;
       $280 = $276&65535;
       HEAP16[38328] = $280;
       $281 = 76512;
       $282 = $281;
       $283 = HEAP32[$282>>2]|0;
       $284 = (($281) + 4)|0;
       $285 = $284;
       $286 = HEAP32[$285>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($283,$286,$instruccion$byval_copy27,3,0);
       $388 = 2;$389 = 0;
       break;
      }
      case 4:  {
       $287 = 76512;
       $288 = $287;
       $289 = HEAP32[$288>>2]|0;
       $290 = (($287) + 4)|0;
       $291 = $290;
       $292 = HEAP32[$291>>2]|0;
       $293 = $289 & 3;
       $294 = ($293|0)==(0);
       $295 = (0)==(0);
       $296 = $294 & $295;
       if (!($296)) {
        $297 = (___divdi3(($289|0),($292|0),4,0)|0);
        $298 = tempRet0;
        $299 = (_bitshift64Shl(($297|0),($298|0),2)|0);
        $300 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),4,0)|0);
        $302 = tempRet0;
        $303 = 76512;
        $304 = $303;
        HEAP32[$304>>2] = $301;
        $305 = (($303) + 4)|0;
        $306 = $305;
        HEAP32[$306>>2] = $302;
       }
       $307 = $$3263;
       $308 = $307;
       $309 = HEAP32[$308>>2]|0;
       $310 = (($307) + 4)|0;
       $311 = $310;
       $312 = HEAP32[$311>>2]|0;
       $313 = ($312|0)>(0);
       $314 = ($309>>>0)>(4294967295);
       $315 = ($312|0)==(0);
       $316 = $315 & $314;
       $317 = $313 | $316;
       if ($317) {
        label = 84;
        break L1;
       }
       $318 = HEAP32[199592]|0;
       $319 = ($318|0)==(0);
       if (!($319)) {
        $320 = 76512;
        $321 = $320;
        $322 = HEAP32[$321>>2]|0;
        $323 = (($320) + 4)|0;
        $324 = $323;
        $325 = HEAP32[$324>>2]|0;
        _te_inserta(841737,$322,$325,1);
        HEAP32[199592] = 0;
       }
       $326 = $$3263;
       $327 = $326;
       $328 = HEAP32[$327>>2]|0;
       $329 = (($326) + 4)|0;
       $330 = $329;
       $331 = HEAP32[$330>>2]|0;
       HEAP32[19164] = $328;
       $332 = 76512;
       $333 = $332;
       $334 = HEAP32[$333>>2]|0;
       $335 = (($332) + 4)|0;
       $336 = $335;
       $337 = HEAP32[$336>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($334,$337,$instruccion$byval_copy27,4,0);
       $388 = 4;$389 = 0;
       break;
      }
      case 5:  {
       $338 = 76512;
       $339 = $338;
       $340 = HEAP32[$339>>2]|0;
       $341 = (($338) + 4)|0;
       $342 = $341;
       $343 = HEAP32[$342>>2]|0;
       $344 = $340 & 7;
       $345 = ($344|0)==(0);
       $346 = (0)==(0);
       $347 = $345 & $346;
       if (!($347)) {
        $348 = (___divdi3(($340|0),($343|0),8,0)|0);
        $349 = tempRet0;
        $350 = (_bitshift64Shl(($348|0),($349|0),3)|0);
        $351 = tempRet0;
        $352 = (_i64Add(($350|0),($351|0),8,0)|0);
        $353 = tempRet0;
        $354 = 76512;
        $355 = $354;
        HEAP32[$355>>2] = $352;
        $356 = (($354) + 4)|0;
        $357 = $356;
        HEAP32[$357>>2] = $353;
       }
       $358 = HEAP32[199592]|0;
       $359 = ($358|0)==(0);
       if (!($359)) {
        $360 = 76512;
        $361 = $360;
        $362 = HEAP32[$361>>2]|0;
        $363 = (($360) + 4)|0;
        $364 = $363;
        $365 = HEAP32[$364>>2]|0;
        _te_inserta(841737,$362,$365,1);
        HEAP32[199592] = 0;
       }
       $366 = $$3263;
       $367 = $366;
       $368 = HEAP32[$367>>2]|0;
       $369 = (($366) + 4)|0;
       $370 = $369;
       $371 = HEAP32[$370>>2]|0;
       $372 = 76656;
       $373 = $372;
       HEAP32[$373>>2] = $368;
       $374 = (($372) + 4)|0;
       $375 = $374;
       HEAP32[$375>>2] = $371;
       $376 = 76512;
       $377 = $376;
       $378 = HEAP32[$377>>2]|0;
       $379 = (($376) + 4)|0;
       $380 = $379;
       $381 = HEAP32[$380>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($378,$381,$instruccion$byval_copy27,5,0);
       $388 = 8;$389 = 0;
       break;
      }
      default: {
       label = 93;
       break L1;
      }
      }
      $382 = 76512;
      $383 = $382;
      $384 = HEAP32[$383>>2]|0;
      $385 = (($382) + 4)|0;
      $386 = $385;
      $387 = HEAP32[$386>>2]|0;
      $390 = (_i64Add(($384|0),($387|0),($388|0),($389|0))|0);
      $391 = tempRet0;
      $392 = 76512;
      $393 = $392;
      HEAP32[$393>>2] = $390;
      $394 = (($392) + 4)|0;
      $395 = $394;
      HEAP32[$395>>2] = $391;
      $396 = ($391|0)>(0);
      $397 = ($390>>>0)>(16384);
      $398 = ($391|0)==(0);
      $399 = $398 & $397;
      $400 = $396 | $399;
      if ($400) {
       label = 95;
       break L1;
      } else {
       $1556 = $68;$1559 = $71;
      }
      break;
     }
     case 59:  {
      $683 = HEAP32[199588]|0;
      $684 = ($683|0)==(2);
      if (!($684)) {
       label = 142;
       break L1;
      }
      _memset((798380|0),0,144)|0;
      $685 = $$3263;
      $686 = $685;
      $687 = HEAP32[$686>>2]|0;
      $688 = (($685) + 4)|0;
      $689 = $688;
      $690 = HEAP32[$689>>2]|0;
      $691 = $687&255;
      HEAP8[798380] = $691;
      HEAP16[(798392)>>1] = 0;
      ;HEAP32[(798384)>>2]=0|0;HEAP16[(798384)+4>>1]=0|0;HEAP8[(798384)+6>>0]=0|0;
      $692 = 76520;
      $693 = $692;
      $694 = HEAP32[$693>>2]|0;
      $695 = (($692) + 4)|0;
      $696 = $695;
      $697 = HEAP32[$696>>2]|0;
      _memcpy(($instruccion$byval_copy27|0),(798380|0),144)|0;
      _escribe_mem_instruc($694,$697,$instruccion$byval_copy27);
      $698 = 76520;
      $699 = $698;
      $700 = HEAP32[$699>>2]|0;
      $701 = (($698) + 4)|0;
      $702 = $701;
      $703 = HEAP32[$702>>2]|0;
      $704 = (_i64Add(($700|0),($703|0),4,0)|0);
      $705 = tempRet0;
      $706 = 76520;
      $707 = $706;
      HEAP32[$707>>2] = $704;
      $708 = (($706) + 4)|0;
      $709 = $708;
      HEAP32[$709>>2] = $705;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 58:  {
      $673 = HEAP32[83]|0;
      $674 = 76520;
      $675 = $674;
      $676 = HEAP32[$675>>2]|0;
      $677 = (($674) + 4)|0;
      $678 = $677;
      $679 = HEAP32[$678>>2]|0;
      $680 = (_te_resuelve($$3263,$673,$676,$679,2)|0);
      $681 = ($680|0)<(0);
      $682 = $681 << 31 >> 31;
      $1556 = $680;$1559 = $682;
      break;
     }
     case 57:  {
      $667 = $$3263;
      $668 = $667;
      $669 = HEAP32[$668>>2]|0;
      $670 = (($667) + 4)|0;
      $671 = $670;
      $672 = HEAP32[$671>>2]|0;
      $1556 = $669;$1559 = $672;
      break;
     }
     case 37:  {
      $401 = HEAP32[84]|0;
      switch ($401|0) {
      case 6:  {
       $402 = 76512;
       $403 = $402;
       $404 = HEAP32[$403>>2]|0;
       $405 = (($402) + 4)|0;
       $406 = $405;
       $407 = HEAP32[$406>>2]|0;
       $408 = $404 & 3;
       $409 = ($408|0)==(0);
       $410 = (0)==(0);
       $411 = $409 & $410;
       if (!($411)) {
        $412 = (___divdi3(($404|0),($407|0),4,0)|0);
        $413 = tempRet0;
        $414 = (_bitshift64Shl(($412|0),($413|0),2)|0);
        $415 = tempRet0;
        $416 = (_i64Add(($414|0),($415|0),4,0)|0);
        $417 = tempRet0;
        $418 = 76512;
        $419 = $418;
        HEAP32[$419>>2] = $416;
        $420 = (($418) + 4)|0;
        $421 = $420;
        HEAP32[$421>>2] = $417;
       }
       $422 = HEAP32[199592]|0;
       $423 = ($422|0)==(0);
       if (!($423)) {
        $424 = 76512;
        $425 = $424;
        $426 = HEAP32[$425>>2]|0;
        $427 = (($424) + 4)|0;
        $428 = $427;
        $429 = HEAP32[$428>>2]|0;
        _te_inserta(841737,$426,$429,1);
        HEAP32[199592] = 0;
       }
       $430 = +HEAPF64[$$3263>>3];
       $431 = $430;
       HEAPF32[19164] = $431;
       $432 = 76512;
       $433 = $432;
       $434 = HEAP32[$433>>2]|0;
       $435 = (($432) + 4)|0;
       $436 = $435;
       $437 = HEAP32[$436>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($434,$437,$instruccion$byval_copy27,6,0);
       $479 = 4;$480 = 0;
       break;
      }
      case 8:  {
       $438 = 76512;
       $439 = $438;
       $440 = HEAP32[$439>>2]|0;
       $441 = (($438) + 4)|0;
       $442 = $441;
       $443 = HEAP32[$442>>2]|0;
       $444 = $440 & 7;
       $445 = ($444|0)==(0);
       $446 = (0)==(0);
       $447 = $445 & $446;
       if (!($447)) {
        $448 = (___divdi3(($440|0),($443|0),8,0)|0);
        $449 = tempRet0;
        $450 = (_bitshift64Shl(($448|0),($449|0),3)|0);
        $451 = tempRet0;
        $452 = (_i64Add(($450|0),($451|0),8,0)|0);
        $453 = tempRet0;
        $454 = 76512;
        $455 = $454;
        HEAP32[$455>>2] = $452;
        $456 = (($454) + 4)|0;
        $457 = $456;
        HEAP32[$457>>2] = $453;
       }
       $458 = HEAP32[199592]|0;
       $459 = ($458|0)==(0);
       if (!($459)) {
        $460 = 76512;
        $461 = $460;
        $462 = HEAP32[$461>>2]|0;
        $463 = (($460) + 4)|0;
        $464 = $463;
        $465 = HEAP32[$464>>2]|0;
        _te_inserta(841737,$462,$465,1);
        HEAP32[199592] = 0;
       }
       $466 = +HEAPF64[$$3263>>3];
       HEAPF64[9582] = $466;
       $467 = 76512;
       $468 = $467;
       $469 = HEAP32[$468>>2]|0;
       $470 = (($467) + 4)|0;
       $471 = $470;
       $472 = HEAP32[$471>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($469,$472,$instruccion$byval_copy27,8,0);
       $479 = 8;$480 = 0;
       break;
      }
      default: {
       label = 107;
       break L1;
      }
      }
      $473 = 76512;
      $474 = $473;
      $475 = HEAP32[$474>>2]|0;
      $476 = (($473) + 4)|0;
      $477 = $476;
      $478 = HEAP32[$477>>2]|0;
      $481 = (_i64Add(($475|0),($478|0),($479|0),($480|0))|0);
      $482 = tempRet0;
      $483 = 76512;
      $484 = $483;
      HEAP32[$484>>2] = $481;
      $485 = (($483) + 4)|0;
      $486 = $485;
      HEAP32[$486>>2] = $482;
      $487 = ($482|0)>(0);
      $488 = ($481>>>0)>(16384);
      $489 = ($482|0)==(0);
      $490 = $489 & $488;
      $491 = $487 | $490;
      if ($491) {
       label = 109;
       break L1;
      } else {
       $1556 = $68;$1559 = $71;
      }
      break;
     }
     case 56:  {
      HEAP32[199586] = 0;
      $strlen = (_strlen($$3263)|0);
      $leninc = (($strlen) + 1)|0;
      _memcpy((841993|0),($$3263|0),($leninc|0))|0;
      $657 = HEAP32[83]|0;
      $658 = 76520;
      $659 = $658;
      $660 = HEAP32[$659>>2]|0;
      $661 = (($658) + 4)|0;
      $662 = $661;
      $663 = HEAP32[$662>>2]|0;
      $664 = (_te_resuelve($$3263,$657,$660,$663,1)|0);
      $665 = ($664|0)<(0);
      $666 = $665 << 31 >> 31;
      $1556 = $664;$1559 = $666;
      break;
     }
     case 39:  {
      $492 = HEAP32[84]|0;
      switch ($492|0) {
      case 6:  {
       $493 = 76512;
       $494 = $493;
       $495 = HEAP32[$494>>2]|0;
       $496 = (($493) + 4)|0;
       $497 = $496;
       $498 = HEAP32[$497>>2]|0;
       $499 = $495 & 3;
       $500 = ($499|0)==(0);
       $501 = (0)==(0);
       $502 = $500 & $501;
       if (!($502)) {
        $503 = (___divdi3(($495|0),($498|0),4,0)|0);
        $504 = tempRet0;
        $505 = (_bitshift64Shl(($503|0),($504|0),2)|0);
        $506 = tempRet0;
        $507 = (_i64Add(($505|0),($506|0),4,0)|0);
        $508 = tempRet0;
        $509 = 76512;
        $510 = $509;
        HEAP32[$510>>2] = $507;
        $511 = (($509) + 4)|0;
        $512 = $511;
        HEAP32[$512>>2] = $508;
       }
       $513 = HEAP32[199592]|0;
       $514 = ($513|0)==(0);
       if (!($514)) {
        $515 = 76512;
        $516 = $515;
        $517 = HEAP32[$516>>2]|0;
        $518 = (($515) + 4)|0;
        $519 = $518;
        $520 = HEAP32[$519>>2]|0;
        _te_inserta(841737,$517,$520,1);
        HEAP32[199592] = 0;
       }
       $521 = $$3263;
       $522 = $521;
       $523 = HEAP32[$522>>2]|0;
       $524 = (($521) + 4)|0;
       $525 = $524;
       $526 = HEAP32[$525>>2]|0;
       $527 = (+($523>>>0)) + (4294967296.0*(+($526|0)));
       HEAPF32[19164] = $527;
       $528 = 76512;
       $529 = $528;
       $530 = HEAP32[$529>>2]|0;
       $531 = (($528) + 4)|0;
       $532 = $531;
       $533 = HEAP32[$532>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($530,$533,$instruccion$byval_copy27,6,0);
       $581 = 4;$582 = 0;
       break;
      }
      case 8:  {
       $534 = 76512;
       $535 = $534;
       $536 = HEAP32[$535>>2]|0;
       $537 = (($534) + 4)|0;
       $538 = $537;
       $539 = HEAP32[$538>>2]|0;
       $540 = $536 & 7;
       $541 = ($540|0)==(0);
       $542 = (0)==(0);
       $543 = $541 & $542;
       if (!($543)) {
        $544 = (___divdi3(($536|0),($539|0),8,0)|0);
        $545 = tempRet0;
        $546 = (_bitshift64Shl(($544|0),($545|0),3)|0);
        $547 = tempRet0;
        $548 = (_i64Add(($546|0),($547|0),8,0)|0);
        $549 = tempRet0;
        $550 = 76512;
        $551 = $550;
        HEAP32[$551>>2] = $548;
        $552 = (($550) + 4)|0;
        $553 = $552;
        HEAP32[$553>>2] = $549;
       }
       $554 = HEAP32[199592]|0;
       $555 = ($554|0)==(0);
       if (!($555)) {
        $556 = 76512;
        $557 = $556;
        $558 = HEAP32[$557>>2]|0;
        $559 = (($556) + 4)|0;
        $560 = $559;
        $561 = HEAP32[$560>>2]|0;
        _te_inserta(841737,$558,$561,1);
        HEAP32[199592] = 0;
       }
       $562 = $$3263;
       $563 = $562;
       $564 = HEAP32[$563>>2]|0;
       $565 = (($562) + 4)|0;
       $566 = $565;
       $567 = HEAP32[$566>>2]|0;
       $568 = (+($564>>>0)) + (4294967296.0*(+($567|0)));
       HEAPF64[9582] = $568;
       $569 = 76512;
       $570 = $569;
       $571 = HEAP32[$570>>2]|0;
       $572 = (($569) + 4)|0;
       $573 = $572;
       $574 = HEAP32[$573>>2]|0;
       ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76656>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76656+4>>2]|0;
       _escribe_mem_datos($571,$574,$instruccion$byval_copy27,8,0);
       $581 = 8;$582 = 0;
       break;
      }
      default: {
       label = 121;
       break L1;
      }
      }
      $575 = 76512;
      $576 = $575;
      $577 = HEAP32[$576>>2]|0;
      $578 = (($575) + 4)|0;
      $579 = $578;
      $580 = HEAP32[$579>>2]|0;
      $583 = (_i64Add(($577|0),($580|0),($581|0),($582|0))|0);
      $584 = tempRet0;
      $585 = 76512;
      $586 = $585;
      HEAP32[$586>>2] = $583;
      $587 = (($585) + 4)|0;
      $588 = $587;
      HEAP32[$588>>2] = $584;
      $589 = ($584|0)>(0);
      $590 = ($583>>>0)>(16384);
      $591 = ($584|0)==(0);
      $592 = $591 & $590;
      $593 = $589 | $592;
      if ($593) {
       label = 123;
       break L1;
      } else {
       $1556 = $68;$1559 = $71;
      }
      break;
     }
     case 55:  {
      $641 = $$3263;
      $642 = $641;
      $643 = HEAP32[$642>>2]|0;
      $644 = (($641) + 4)|0;
      $645 = $644;
      $646 = HEAP32[$645>>2]|0;
      $647 = $vararg_buffer;
      $648 = $647;
      HEAP32[$648>>2] = $643;
      $649 = (($647) + 4)|0;
      $650 = $649;
      HEAP32[$650>>2] = $646;
      (_sprintf(841993,29196,$vararg_buffer)|0);
      $651 = $$3263;
      $652 = $651;
      $653 = HEAP32[$652>>2]|0;
      $654 = (($651) + 4)|0;
      $655 = $654;
      $656 = HEAP32[$655>>2]|0;
      $1556 = $653;$1559 = $656;
      break;
     }
     case 51:  {
      $617 = HEAP32[199590]|0;
      $618 = ($617|0)==(6);
      if ($618) {
       label = 131;
       break L1;
      }
      $619 = (($617|0) % 3)&-1;
      $620 = $$3263;
      $621 = $620;
      $622 = HEAP32[$621>>2]|0;
      $623 = (($620) + 4)|0;
      $624 = $623;
      $625 = HEAP32[$624>>2]|0;
      $626 = (($617|0) / 3)&-1;
      switch ($619|0) {
      case 0:  {
       $627 = (76000 + ($626<<5)|0);
       $628 = $627;
       $629 = $628;
       HEAP32[$629>>2] = $622;
       $630 = (($628) + 4)|0;
       $631 = $630;
       HEAP32[$631>>2] = $625;
       $632 = (((76000 + ($626<<5)|0)) + 24|0);
       HEAP32[$632>>2] = 1;
       break;
      }
      case 1:  {
       $633 = (((76000 + ($626<<5)|0)) + 8|0);
       HEAP32[$633>>2] = $622;
       break;
      }
      default: {
       $634 = (((76000 + ($626<<5)|0)) + 16|0);
       $635 = $634;
       $636 = $635;
       HEAP32[$636>>2] = $622;
       $637 = (($635) + 4)|0;
       $638 = $637;
       HEAP32[$638>>2] = $625;
      }
      }
      $639 = HEAP32[199590]|0;
      $640 = (($639) + 1)|0;
      HEAP32[199590] = $640;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 47:  {
      $606 = HEAP32[199589]|0;
      $607 = ($606|0)>(31);
      if ($607) {
       label = 128;
       break L1;
      }
      $608 = +HEAPF64[$$3263>>3];
      $609 = (~~$608)>>>0;
      $610 = +Math_abs($608) >= 1.0 ? $608 > 0.0 ? (~~+Math_min(+Math_floor($608 / 4294967296.0), 4294967295.0)) >>> 0 : ~~+Math_ceil(($608 - +(~~$608 >>> 0)) / 4294967296.0) >>> 0 : 0;
      $611 = (+($609>>>0)) + (4294967296.0*(+($610|0)));
      HEAPF64[9583] = $611;
      $612 = HEAP32[199589]|0;
      $613 = ($612|0)<(0);
      $614 = $613 << 31 >> 31;
      ;HEAP32[$instruccion$byval_copy27>>2]=HEAP32[76664>>2]|0;HEAP32[$instruccion$byval_copy27+4>>2]=HEAP32[76664+4>>2]|0;
      _escribe_fp_reg($612,$614,$instruccion$byval_copy27,8,0);
      $615 = HEAP32[199589]|0;
      $616 = (($615) + 1)|0;
      HEAP32[199589] = $616;
      $1556 = $68;$1559 = $71;
      break;
     }
     case 43:  {
      $594 = HEAP32[85]|0;
      $595 = ($594|0)>(31);
      if ($595) {
       label = 125;
       break L1;
      }
      $596 = ($594|0)<(0);
      $597 = $596 << 31 >> 31;
      $598 = $$3263;
      $599 = $598;
      $600 = HEAP32[$599>>2]|0;
      $601 = (($598) + 4)|0;
      $602 = $601;
      $603 = HEAP32[$602>>2]|0;
      _escribe_int_reg($594,$597,$600,$603,5,0);
      $604 = HEAP32[85]|0;
      $605 = (($604) + 1)|0;
      HEAP32[85] = $605;
      $1556 = $68;$1559 = $71;
      break;
     }
     default: {
      $1556 = $68;$1559 = $71;
     }
     }
    } while(0);
    $1550 = (0 - ($63))|0;
    $1551 = (($$3263) + ($1550<<7)|0);
    $1552 = (($$3273) + ($1550<<1)|0);
    $1553 = ((($1551)) + 128|0);
    $1554 = $1553;
    $1555 = $1554;
    HEAP32[$1555>>2] = $1556;
    $1557 = (($1554) + 4)|0;
    $1558 = $1557;
    HEAP32[$1558>>2] = $1559;
    $$sroa$8$0$$sroa_idx45 = ((($1551)) + 136|0);
    dest=$$sroa$8$0$$sroa_idx45; src=$$sroa$8; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $1560 = (28975 + ($$0256)|0);
    $1561 = HEAP8[$1560>>0]|0;
    $1562 = $1561&255;
    $1563 = (($1562) + -50)|0;
    $1564 = (29054 + ($1563)|0);
    $1565 = HEAP8[$1564>>0]|0;
    $1566 = $1565 << 24 >> 24;
    $1567 = HEAP16[$1552>>1]|0;
    $1568 = $1567 << 16 >> 16;
    $1569 = (($1568) + ($1566))|0;
    $1570 = ($1569>>>0)<(182);
    if ($1570) {
     $1571 = (2882 + ($1569<<1)|0);
     $1572 = HEAP16[$1571>>1]|0;
     $1573 = ($1572<<16>>16)==($1567<<16>>16);
     if ($1573) {
      $1574 = (28185 + ($1569)|0);
      $1575 = HEAP8[$1574>>0]|0;
      $1576 = $1575&255;
      $$0244 = $1576;$$0260 = $1553;$$0270 = $1552;
      break;
     }
    }
    $1577 = (3246 + ($1563<<1)|0);
    $1578 = HEAP16[$1577>>1]|0;
    $1579 = $1578 << 16 >> 16;
    $$0244 = $1579;$$0260 = $1553;$$0270 = $1552;
   }
  } while(0);
  $2 = ((($$0270)) + 2|0);
  $$0249 = $$3;$$0257 = $$2259;$$0266 = $$3269;$$1245 = $$0244;$$1261 = $$0260;$$1271 = $2;
 }
 switch (label|0) {
  case 25: {
   (_yyerror(28607)|0);
   // unreachable;
   break;
  }
  case 32: {
   (_yyerror(28627)|0);
   // unreachable;
   break;
  }
  case 36: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 39: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 42: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 45: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 48: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 51: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 55: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 59: {
   (_yyerror(28672)|0);
   // unreachable;
   break;
  }
  case 61: {
   (_yyerror(28635)|0);
   // unreachable;
   break;
  }
  case 67: {
   (_yyerror(28715)|0);
   // unreachable;
   break;
  }
  case 70: {
   (_yyerror(28758)|0);
   // unreachable;
   break;
  }
  case 77: {
   (_yyerror(28798)|0);
   // unreachable;
   break;
  }
  case 84: {
   (_yyerror(28838)|0);
   // unreachable;
   break;
  }
  case 93: {
   (_yyerror(28627)|0);
   // unreachable;
   break;
  }
  case 95: {
   (_yyerror(28672)|0);
   // unreachable;
   break;
  }
  case 107: {
   (_yyerror(28627)|0);
   // unreachable;
   break;
  }
  case 109: {
   (_yyerror(28672)|0);
   // unreachable;
   break;
  }
  case 121: {
   (_yyerror(28627)|0);
   // unreachable;
   break;
  }
  case 123: {
   (_yyerror(28672)|0);
   // unreachable;
   break;
  }
  case 125: {
   (_yyerror(28878)|0);
   // unreachable;
   break;
  }
  case 128: {
   (_yyerror(28878)|0);
   // unreachable;
   break;
  }
  case 131: {
   (_yyerror(28910)|0);
   // unreachable;
   break;
  }
  case 142: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 145: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 148: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 151: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 154: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 157: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 160: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 163: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 166: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 169: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 172: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 175: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 178: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 181: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 184: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 187: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 190: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 193: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 196: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 199: {
   (_yyerror(28930)|0);
   // unreachable;
   break;
  }
  case 205: {
   $1580 = HEAP32[199593]|0;
   $1581 = (($1580) + 1)|0;
   HEAP32[199593] = $1581;
   (_yyerror(29086)|0);
   // unreachable;
   break;
  }
  case 206: {
   (_yyerror(29099)|0);
   // unreachable;
   break;
  }
  case 207: {
   $1582 = ($$5$ph|0)==($0|0);
   if ($1582) {
    $$0243 = $$0255$ph;
    STACKTOP = sp;return ($$0243|0);
   }
   _free($$5$ph);
   $$0243 = $$0255$ph;
   STACKTOP = sp;return ($$0243|0);
   break;
  }
  case 209: {
   STACKTOP = sp;return ($$0243|0);
   break;
  }
 }
 return (0)|0;
}
function _yyerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[482]|0;
 $2 = HEAP32[83]|0;
 HEAP32[$vararg_buffer>>2] = 840457;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $0;
 (_fprintf($1,29116,$vararg_buffer)|0);
 _exit(1);
 // unreachable;
 return (0)|0;
}
function _ensamblador($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[83] = 1;
 HEAP32[199586] = 0;
 HEAP32[199587] = 0;
 HEAP32[85] = 1;
 HEAP32[199589] = 0;
 HEAP32[199590] = 0;
 $1 = 76512;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = 76520;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 HEAP32[199591] = 0;
 $9 = (_fopen($0,29135)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = HEAP32[482]|0;
  HEAP32[$vararg_buffer>>2] = $0;
  (_fprintf($11,29137,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 } else {
  HEAP32[199631] = $9;
  _te_borra();
  _te_inserta(29170,0,0,2);
  _te_inserta(29176,0,0,1);
  (_yyparse()|0);
  _te_confirma();
  HEAP32[19190] = 0;
  $12 = (54256);
  $13 = $12;
  HEAP32[$13>>2] = 0;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = 0;
  $16 = 76512;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  HEAP32[(76764)>>2] = $18;
  HEAP32[19192] = 0;
  $22 = 76520;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (_i64Add(($24|0),($27|0),4,0)|0);
  $29 = tempRet0;
  HEAP32[(76772)>>2] = $28;
  _te_inserta(29182,$24,$27,2);
  $30 = 76512;
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + 4)|0;
  $34 = $33;
  $35 = HEAP32[$34>>2]|0;
  _te_inserta(29189,$32,$35,1);
  (_fclose($9)|0);
  STACKTOP = sp;return;
 }
}
function _yylex() {
 var $$0 = 0, $$045 = 0, $$048$ph = 0, $$049 = 0, $$052 = 0, $$056 = 0, $$1 = 0, $$150 = 0, $$153$ph = 0, $$157 = 0, $$2 = 0, $$2$ph = 0, $$258 = 0, $$258$ph = 0, $$3 = 0, $$3$ph = 0, $$359 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer40 = sp + 112|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[199635]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[199635] = 1;
  $2 = HEAP32[199636]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   HEAP32[199636] = 1;
  }
  $4 = HEAP32[199631]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $6 = HEAP32[514]|0;
   HEAP32[199631] = $6;
  }
  $7 = HEAP32[199632]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = HEAP32[388]|0;
   HEAP32[199632] = $9;
  }
  $10 = HEAP32[199637]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   label = 10;
  } else {
   $12 = HEAP32[199638]|0;
   $13 = (($10) + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    label = 10;
   }
  }
  if ((label|0) == 10) {
   _yyensure_buffer_stack();
   $16 = HEAP32[199631]|0;
   $17 = (_yy_create_buffer($16,16384)|0);
   $18 = HEAP32[199637]|0;
   $19 = HEAP32[199638]|0;
   $20 = (($18) + ($19<<2)|0);
   HEAP32[$20>>2] = $17;
  }
  _yy_load_buffer_state();
 }
 L17: while(1) {
  $21 = HEAP32[199639]|0;
  $22 = HEAP8[842121]|0;
  HEAP8[$21>>0] = $22;
  $23 = HEAP32[199636]|0;
  $$045 = $23;$$052 = $21;$$056 = $21;
  L19: while(1) {
   $$1 = $$045;$$157 = $$056;
   while(1) {
    $24 = HEAP8[$$157>>0]|0;
    $25 = $24&255;
    $26 = (344 + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (3310 + ($$1<<1)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = ($29<<16>>16)==(0);
    if ($30) {
     $$048$ph = $27;$$2$ph = $$1;
    } else {
     HEAP32[199640] = $$1;
     HEAP32[199641] = $$157;
     $$048$ph = $27;$$2$ph = $$1;
    }
    L25: while(1) {
     $31 = $$048$ph & 255;
     $$2 = $$2$ph;
     while(1) {
      $32 = (3938 + ($$2<<1)|0);
      $33 = HEAP16[$32>>1]|0;
      $34 = $33 << 16 >> 16;
      $35 = (($34) + ($31))|0;
      $36 = (4584 + ($35<<1)|0);
      $37 = HEAP16[$36>>1]|0;
      $38 = $37 << 16 >> 16;
      $39 = ($38|0)==($$2|0);
      if ($39) {
       break L25;
      }
      $40 = (5926 + ($$2<<1)|0);
      $41 = HEAP16[$40>>1]|0;
      $42 = $41 << 16 >> 16;
      $43 = ($41<<16>>16)>(313);
      if ($43) {
       break;
      } else {
       $$2 = $42;
      }
     }
     $44 = (1368 + ($31<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $$048$ph = $45;$$2$ph = $42;
    }
    $46 = (6572 + ($35<<1)|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47 << 16 >> 16;
    $49 = ((($$157)) + 1|0);
    $50 = (3938 + ($48<<1)|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = ($51<<16>>16)==(625);
    if ($52) {
     $$153$ph = $$052;$$258$ph = $49;$$3$ph = $48;
     break;
    } else {
     $$1 = $48;$$157 = $49;
    }
   }
   L32: while(1) {
    $53 = $$153$ph;
    $$258 = $$258$ph;$$3 = $$3$ph;
    L34: while(1) {
     $54 = (3310 + ($$3<<1)|0);
     $55 = HEAP16[$54>>1]|0;
     $56 = $55 << 16 >> 16;
     $57 = ($55<<16>>16)==(0);
     if ($57) {
      $58 = HEAP32[199641]|0;
      $59 = HEAP32[199640]|0;
      $60 = (3310 + ($59<<1)|0);
      $61 = HEAP16[$60>>1]|0;
      $62 = $61 << 16 >> 16;
      $$049 = $62;$$359 = $58;
     } else {
      $$049 = $56;$$359 = $$258;
     }
     HEAP32[199633] = $$153$ph;
     $63 = $$359;
     $64 = (($63) - ($53))|0;
     HEAP32[199634] = $64;
     $65 = HEAP8[$$359>>0]|0;
     HEAP8[842121] = $65;
     HEAP8[$$359>>0] = 0;
     HEAP32[199639] = $$359;
     $$150 = $$049;
     L39: while(1) {
      switch ($$150|0) {
      case 2: case 1:  {
       continue L17;
       break;
      }
      case 4:  {
       label = 28;
       break L17;
       break;
      }
      case 5:  {
       label = 29;
       break L17;
       break;
      }
      case 6:  {
       label = 30;
       break L17;
       break;
      }
      case 7:  {
       label = 31;
       break L17;
       break;
      }
      case 8:  {
       label = 32;
       break L17;
       break;
      }
      case 9:  {
       label = 33;
       break L17;
       break;
      }
      case 10:  {
       label = 34;
       break L17;
       break;
      }
      case 11:  {
       label = 35;
       break L17;
       break;
      }
      case 12:  {
       label = 36;
       break L17;
       break;
      }
      case 13:  {
       label = 38;
       break L17;
       break;
      }
      case 14:  {
       label = 40;
       break L17;
       break;
      }
      case 15:  {
       label = 41;
       break L17;
       break;
      }
      case 16:  {
       label = 42;
       break L17;
       break;
      }
      case 17:  {
       label = 44;
       break L17;
       break;
      }
      case 18:  {
       label = 46;
       break L17;
       break;
      }
      case 19:  {
       label = 48;
       break L17;
       break;
      }
      case 20:  {
       label = 50;
       break L17;
       break;
      }
      case 21:  {
       label = 52;
       break L17;
       break;
      }
      case 22:  {
       label = 54;
       break L17;
       break;
      }
      case 23:  {
       label = 55;
       break L17;
       break;
      }
      case 24:  {
       label = 56;
       break L17;
       break;
      }
      case 25:  {
       label = 57;
       break L17;
       break;
      }
      case 26:  {
       label = 58;
       break L17;
       break;
      }
      case 27:  {
       label = 59;
       break L17;
       break;
      }
      case 28:  {
       label = 174;
       break L17;
       break;
      }
      case 29:  {
       label = 175;
       break L17;
       break;
      }
      case 30:  {
       label = 176;
       break L17;
       break;
      }
      case 31:  {
       label = 177;
       break L17;
       break;
      }
      case 32:  {
       label = 60;
       break L17;
       break;
      }
      case 33:  {
       label = 61;
       break L17;
       break;
      }
      case 34:  {
       label = 62;
       break L17;
       break;
      }
      case 35:  {
       label = 63;
       break L17;
       break;
      }
      case 36:  {
       label = 64;
       break L17;
       break;
      }
      case 37:  {
       label = 65;
       break L17;
       break;
      }
      case 38:  {
       label = 178;
       break L17;
       break;
      }
      case 39:  {
       label = 66;
       break L17;
       break;
      }
      case 40:  {
       label = 67;
       break L17;
       break;
      }
      case 41:  {
       label = 68;
       break L17;
       break;
      }
      case 42:  {
       label = 69;
       break L17;
       break;
      }
      case 43:  {
       label = 70;
       break L17;
       break;
      }
      case 44:  {
       label = 71;
       break L17;
       break;
      }
      case 45:  {
       label = 72;
       break L17;
       break;
      }
      case 46:  {
       label = 73;
       break L17;
       break;
      }
      case 47:  {
       label = 74;
       break L17;
       break;
      }
      case 48:  {
       label = 75;
       break L17;
       break;
      }
      case 49:  {
       label = 76;
       break L17;
       break;
      }
      case 50:  {
       label = 77;
       break L17;
       break;
      }
      case 51:  {
       label = 78;
       break L17;
       break;
      }
      case 52:  {
       label = 79;
       break L17;
       break;
      }
      case 53:  {
       label = 80;
       break L17;
       break;
      }
      case 54:  {
       label = 81;
       break L17;
       break;
      }
      case 55:  {
       label = 82;
       break L17;
       break;
      }
      case 56:  {
       label = 83;
       break L17;
       break;
      }
      case 57:  {
       label = 84;
       break L17;
       break;
      }
      case 58:  {
       label = 85;
       break L17;
       break;
      }
      case 59:  {
       label = 86;
       break L17;
       break;
      }
      case 60:  {
       label = 87;
       break L17;
       break;
      }
      case 61:  {
       label = 88;
       break L17;
       break;
      }
      case 62:  {
       label = 89;
       break L17;
       break;
      }
      case 63:  {
       label = 90;
       break L17;
       break;
      }
      case 64:  {
       label = 91;
       break L17;
       break;
      }
      case 65:  {
       label = 92;
       break L17;
       break;
      }
      case 66:  {
       label = 93;
       break L17;
       break;
      }
      case 67:  {
       label = 94;
       break L17;
       break;
      }
      case 68:  {
       label = 95;
       break L17;
       break;
      }
      case 69:  {
       label = 96;
       break L17;
       break;
      }
      case 70:  {
       label = 97;
       break L17;
       break;
      }
      case 71:  {
       label = 98;
       break L17;
       break;
      }
      case 72:  {
       label = 99;
       break L17;
       break;
      }
      case 73:  {
       label = 100;
       break L17;
       break;
      }
      case 74:  {
       label = 101;
       break L17;
       break;
      }
      case 75:  {
       label = 102;
       break L17;
       break;
      }
      case 76:  {
       label = 103;
       break L17;
       break;
      }
      case 77:  {
       label = 104;
       break L17;
       break;
      }
      case 78:  {
       label = 105;
       break L17;
       break;
      }
      case 79:  {
       label = 106;
       break L17;
       break;
      }
      case 80:  {
       label = 107;
       break L17;
       break;
      }
      case 81:  {
       label = 108;
       break L17;
       break;
      }
      case 82:  {
       label = 109;
       break L17;
       break;
      }
      case 83:  {
       label = 110;
       break L17;
       break;
      }
      case 84:  {
       label = 111;
       break L17;
       break;
      }
      case 85:  {
       label = 112;
       break L17;
       break;
      }
      case 86:  {
       label = 113;
       break L17;
       break;
      }
      case 87:  {
       label = 114;
       break L17;
       break;
      }
      case 88:  {
       label = 115;
       break L17;
       break;
      }
      case 89:  {
       label = 116;
       break L17;
       break;
      }
      case 90:  {
       label = 117;
       break L17;
       break;
      }
      case 91:  {
       label = 118;
       break L17;
       break;
      }
      case 92:  {
       label = 119;
       break L17;
       break;
      }
      case 93:  {
       label = 120;
       break L17;
       break;
      }
      case 94:  {
       label = 121;
       break L17;
       break;
      }
      case 95:  {
       label = 122;
       break L17;
       break;
      }
      case 96:  {
       label = 123;
       break L17;
       break;
      }
      case 97:  {
       label = 124;
       break L17;
       break;
      }
      case 98:  {
       label = 125;
       break L17;
       break;
      }
      case 99:  {
       label = 126;
       break L17;
       break;
      }
      case 100:  {
       label = 127;
       break L17;
       break;
      }
      case 101:  {
       label = 128;
       break L17;
       break;
      }
      case 102:  {
       label = 129;
       break L17;
       break;
      }
      case 103:  {
       label = 130;
       break L17;
       break;
      }
      case 104:  {
       label = 131;
       break L17;
       break;
      }
      case 105:  {
       label = 132;
       break L17;
       break;
      }
      case 106:  {
       label = 133;
       break L17;
       break;
      }
      case 107:  {
       label = 134;
       break L17;
       break;
      }
      case 108:  {
       label = 135;
       break L17;
       break;
      }
      case 109:  {
       label = 136;
       break L17;
       break;
      }
      case 110:  {
       label = 137;
       break L17;
       break;
      }
      case 111:  {
       label = 138;
       break L17;
       break;
      }
      case 112:  {
       label = 139;
       break L17;
       break;
      }
      case 113:  {
       label = 140;
       break L17;
       break;
      }
      case 114:  {
       label = 141;
       break L17;
       break;
      }
      case 115:  {
       label = 142;
       break L17;
       break;
      }
      case 116:  {
       label = 143;
       break L17;
       break;
      }
      case 117:  {
       label = 144;
       break L17;
       break;
      }
      case 118:  {
       label = 145;
       break L17;
       break;
      }
      case 119:  {
       label = 146;
       break L17;
       break;
      }
      case 120:  {
       label = 147;
       break L17;
       break;
      }
      case 121:  {
       label = 148;
       break L17;
       break;
      }
      case 122:  {
       label = 149;
       break L17;
       break;
      }
      case 123:  {
       label = 150;
       break L17;
       break;
      }
      case 124:  {
       label = 151;
       break L17;
       break;
      }
      case 125:  {
       label = 152;
       break L17;
       break;
      }
      case 126:  {
       label = 153;
       break L17;
       break;
      }
      case 127:  {
       label = 154;
       break L17;
       break;
      }
      case 128:  {
       label = 155;
       break L17;
       break;
      }
      case 129:  {
       label = 156;
       break L17;
       break;
      }
      case 130:  {
       label = 157;
       break L17;
       break;
      }
      case 131:  {
       label = 158;
       break L17;
       break;
      }
      case 132:  {
       label = 159;
       break L17;
       break;
      }
      case 133:  {
       label = 160;
       break L17;
       break;
      }
      case 134:  {
       label = 161;
       break L17;
       break;
      }
      case 135:  {
       label = 162;
       break L17;
       break;
      }
      case 138:  {
       $$0 = 0;
       break L17;
       break;
      }
      case 3:  {
       label = 27;
       break L19;
       break;
      }
      case 136:  {
       label = 163;
       break L19;
       break;
      }
      case 0:  {
       break L39;
       break;
      }
      case 137:  {
       break;
      }
      default: {
       label = 173;
       break L17;
      }
      }
      $585 = HEAP32[199633]|0;
      $586 = HEAP8[842121]|0;
      HEAP8[$$359>>0] = $586;
      $587 = HEAP32[199637]|0;
      $588 = HEAP32[199638]|0;
      $589 = (($587) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = ((($590)) + 44|0);
      $592 = HEAP32[$591>>2]|0;
      $593 = ($592|0)==(0);
      if ($593) {
       $594 = ((($590)) + 16|0);
       $595 = HEAP32[$594>>2]|0;
       HEAP32[199642] = $595;
       $596 = HEAP32[199631]|0;
       HEAP32[$590>>2] = $596;
       $597 = HEAP32[199637]|0;
       $598 = (($597) + ($588<<2)|0);
       $599 = HEAP32[$598>>2]|0;
       $600 = ((($599)) + 44|0);
       HEAP32[$600>>2] = 1;
      }
      $601 = HEAP32[199639]|0;
      $602 = HEAP32[199637]|0;
      $603 = (($602) + ($588<<2)|0);
      $604 = HEAP32[$603>>2]|0;
      $605 = ((($604)) + 4|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = HEAP32[199642]|0;
      $608 = (($606) + ($607)|0);
      $609 = ($601>>>0)>($608>>>0);
      if (!($609)) {
       label = 167;
       break L34;
      }
      $620 = (_yy_get_next_buffer()|0);
      switch ($620|0) {
      case 0:  {
       label = 171;
       break L32;
       break;
      }
      case 2:  {
       label = 172;
       break L34;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       continue L17;
      }
      }
      $621 = HEAP32[199633]|0;
      HEAP32[199639] = $621;
      $622 = HEAP32[199636]|0;
      $623 = (($622) + -1)|0;
      $624 = (($623|0) / 2)&-1;
      $625 = (($624) + 138)|0;
      $$150 = $625;
     }
     $66 = HEAP8[842121]|0;
     HEAP8[$$359>>0] = $66;
     $67 = HEAP32[199641]|0;
     $68 = HEAP32[199640]|0;
     $$258 = $67;$$3 = $68;
    }
    if ((label|0) == 167) {
     label = 0;
     $610 = $$359;
     $611 = (($610) - ($585))|0;
     $612 = (($611) + -1)|0;
     $613 = HEAP32[199633]|0;
     $614 = (($613) + ($612)|0);
     HEAP32[199639] = $614;
     $615 = (_yy_get_previous_state()|0);
     $616 = (_yy_try_NUL_trans($615)|0);
     $617 = HEAP32[199633]|0;
     $618 = ($616|0)==(0);
     if ($618) {
      $$153$ph = $617;$$258$ph = $614;$$3$ph = $615;
      continue;
     } else {
      label = 168;
      break;
     }
    }
    else if ((label|0) == 172) {
     label = 0;
     $633 = HEAP32[199637]|0;
     $634 = HEAP32[199638]|0;
     $635 = (($633) + ($634<<2)|0);
     $636 = HEAP32[$635>>2]|0;
     $637 = ((($636)) + 4|0);
     $638 = HEAP32[$637>>2]|0;
     $639 = HEAP32[199642]|0;
     $640 = (($638) + ($639)|0);
     HEAP32[199639] = $640;
     $641 = (_yy_get_previous_state()|0);
     $642 = HEAP32[199633]|0;
     $$153$ph = $642;$$258$ph = $640;$$3$ph = $641;
     continue;
    }
   }
   if ((label|0) == 168) {
    label = 0;
    $619 = ((($614)) + 1|0);
    HEAP32[199639] = $619;
    $$045 = $616;$$052 = $617;$$056 = $619;
    continue;
   }
   else if ((label|0) == 171) {
    label = 0;
    $626 = $$359;
    $627 = (($626) - ($585))|0;
    $628 = (($627) + -1)|0;
    $629 = HEAP32[199633]|0;
    $630 = (($629) + ($628)|0);
    HEAP32[199639] = $630;
    $631 = (_yy_get_previous_state()|0);
    $632 = HEAP32[199633]|0;
    $$045 = $631;$$052 = $632;$$056 = $630;
    continue;
   }
  }
  if ((label|0) == 27) {
   label = 0;
   $69 = HEAP32[199633]|0;
   $70 = HEAP8[$69>>0]|0;
   $71 = $70 << 24 >> 24;
   $72 = (_tolower($71)|0);
   _yyunput($72,$69);
   continue;
  }
  else if ((label|0) == 163) {
   label = 0;
   $582 = HEAP32[199633]|0;
   $583 = HEAP32[199634]|0;
   $584 = HEAP32[199632]|0;
   (_fwrite($582,$583,1,$584)|0);
   continue;
  }
 }
 switch (label|0) {
  case 28: {
   $73 = HEAP32[83]|0;
   $74 = (($73) + 1)|0;
   HEAP32[83] = $74;
   $$0 = 258;
   break;
  }
  case 29: {
   $75 = HEAP32[199633]|0;
   HEAP32[$vararg_buffer>>2] = 76528;
   (_sscanf($75,29196,$vararg_buffer)|0);
   $$0 = 259;
   break;
  }
  case 30: {
   $76 = HEAP32[199633]|0;
   HEAP32[$vararg_buffer1>>2] = 76528;
   (_sscanf($76,29201,$vararg_buffer1)|0);
   $$0 = 259;
   break;
  }
  case 31: {
   $77 = HEAP32[199633]|0;
   HEAP32[$vararg_buffer4>>2] = 76528;
   (_sscanf($77,29206,$vararg_buffer4)|0);
   $$0 = 259;
   break;
  }
  case 32: {
   $78 = HEAP32[199633]|0;
   $79 = ((($78)) + 1|0);
   HEAP32[$vararg_buffer7>>2] = 76528;
   (_sscanf($79,29196,$vararg_buffer7)|0);
   $$0 = 259;
   break;
  }
  case 33: {
   $80 = HEAP32[199633]|0;
   $81 = ((($80)) + 1|0);
   HEAP32[$vararg_buffer10>>2] = 76528;
   (_sscanf($81,29201,$vararg_buffer10)|0);
   $$0 = 259;
   break;
  }
  case 34: {
   $82 = HEAP32[199633]|0;
   $83 = ((($82)) + 1|0);
   HEAP32[$vararg_buffer13>>2] = 76528;
   (_sscanf($83,29206,$vararg_buffer13)|0);
   $$0 = 259;
   break;
  }
  case 35: {
   $84 = HEAP32[199633]|0;
   HEAP32[$vararg_buffer16>>2] = 76528;
   (_sscanf($84,29211,$vararg_buffer16)|0);
   $$0 = 260;
   break;
  }
  case 36: {
   $85 = HEAP32[199633]|0;
   $86 = ((($85)) + 1|0);
   $87 = (_atoi($86)|0);
   $88 = ($87|0)<(0);
   $89 = $88 << 31 >> 31;
   $90 = 76528;
   $91 = $90;
   HEAP32[$91>>2] = $87;
   $92 = (($90) + 4)|0;
   $93 = $92;
   HEAP32[$93>>2] = $89;
   $94 = ($87|0)>(31);
   if ($94) {
    HEAP32[$vararg_buffer19>>2] = 31;
    (_sprintf(842122,29215,$vararg_buffer19)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 264;
   }
   break;
  }
  case 38: {
   $95 = HEAP32[199633]|0;
   $96 = ((($95)) + 1|0);
   $97 = (_atoi($96)|0);
   $98 = ($97|0)<(0);
   $99 = $98 << 31 >> 31;
   $100 = 76528;
   $101 = $100;
   HEAP32[$101>>2] = $97;
   $102 = (($100) + 4)|0;
   $103 = $102;
   HEAP32[$103>>2] = $99;
   $104 = ($97|0)>(31);
   if ($104) {
    HEAP32[$vararg_buffer22>>2] = 31;
    (_sprintf(842122,29264,$vararg_buffer22)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 263;
   }
   break;
  }
  case 40: {
   $105 = 76528;
   $106 = $105;
   HEAP32[$106>>2] = 0;
   $107 = (($105) + 4)|0;
   $108 = $107;
   HEAP32[$108>>2] = 0;
   $$0 = 263;
   break;
  }
  case 41: {
   $109 = 76528;
   $110 = $109;
   HEAP32[$110>>2] = 1;
   $111 = (($109) + 4)|0;
   $112 = $111;
   HEAP32[$112>>2] = 0;
   $$0 = 263;
   break;
  }
  case 42: {
   $113 = HEAP32[199633]|0;
   $114 = ((($113)) + 1|0);
   $115 = (_atoi($114)|0);
   $116 = (($115) + 2)|0;
   $117 = ($116|0)<(0);
   $118 = $117 << 31 >> 31;
   $119 = 76528;
   $120 = $119;
   HEAP32[$120>>2] = $116;
   $121 = (($119) + 4)|0;
   $122 = $121;
   HEAP32[$122>>2] = $118;
   $123 = ($116|0)>(3);
   if ($123) {
    HEAP32[$vararg_buffer25>>2] = 31;
    (_sprintf(842122,29264,$vararg_buffer25)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 263;
   }
   break;
  }
  case 44: {
   $124 = HEAP32[199633]|0;
   $125 = ((($124)) + 2|0);
   $126 = (_atoi($125)|0);
   $127 = (($126) + 4)|0;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = 76528;
   $131 = $130;
   HEAP32[$131>>2] = $127;
   $132 = (($130) + 4)|0;
   $133 = $132;
   HEAP32[$133>>2] = $129;
   $134 = ($127|0)>(7);
   if ($134) {
    HEAP32[$vararg_buffer28>>2] = 31;
    (_sprintf(842122,29264,$vararg_buffer28)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 263;
   }
   break;
  }
  case 46: {
   $135 = HEAP32[199633]|0;
   $136 = ((($135)) + 2|0);
   $137 = (_atoi($136)|0);
   $138 = (($137) + 8)|0;
   $139 = ($138|0)<(0);
   $140 = $139 << 31 >> 31;
   $141 = 76528;
   $142 = $141;
   HEAP32[$142>>2] = $138;
   $143 = (($141) + 4)|0;
   $144 = $143;
   HEAP32[$144>>2] = $140;
   $145 = ($138|0)>(15);
   if ($145) {
    HEAP32[$vararg_buffer31>>2] = 31;
    (_sprintf(842122,29264,$vararg_buffer31)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 263;
   }
   break;
  }
  case 48: {
   $146 = HEAP32[199633]|0;
   $147 = ((($146)) + 2|0);
   $148 = (_atoi($147)|0);
   $149 = (($148) + 16)|0;
   $150 = ($149|0)<(0);
   $151 = $150 << 31 >> 31;
   $152 = 76528;
   $153 = $152;
   HEAP32[$153>>2] = $149;
   $154 = (($152) + 4)|0;
   $155 = $154;
   HEAP32[$155>>2] = $151;
   $156 = ($149|0)>(23);
   if ($156) {
    HEAP32[$vararg_buffer34>>2] = 31;
    (_sprintf(842122,29264,$vararg_buffer34)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 263;
   }
   break;
  }
  case 50: {
   $157 = HEAP32[199633]|0;
   $158 = ((($157)) + 2|0);
   $159 = (_atoi($158)|0);
   $160 = (($159) + 16)|0;
   $161 = ($160|0)<(0);
   $162 = $161 << 31 >> 31;
   $163 = 76528;
   $164 = $163;
   HEAP32[$164>>2] = $160;
   $165 = (($163) + 4)|0;
   $166 = $165;
   HEAP32[$166>>2] = $162;
   $167 = ($160|0)>(25);
   if ($167) {
    HEAP32[$vararg_buffer37>>2] = 31;
    (_sprintf(842122,29264,$vararg_buffer37)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 263;
   }
   break;
  }
  case 52: {
   $168 = HEAP32[199633]|0;
   $169 = ((($168)) + 2|0);
   $170 = (_atoi($169)|0);
   $171 = (($170) + 26)|0;
   $172 = ($171|0)<(0);
   $173 = $172 << 31 >> 31;
   $174 = 76528;
   $175 = $174;
   HEAP32[$175>>2] = $171;
   $176 = (($174) + 4)|0;
   $177 = $176;
   HEAP32[$177>>2] = $173;
   $178 = ($171|0)>(27);
   if ($178) {
    HEAP32[$vararg_buffer40>>2] = 31;
    (_sprintf(842122,29264,$vararg_buffer40)|0);
    (_yyerror(842122)|0);
    // unreachable;
   } else {
    $$0 = 263;
   }
   break;
  }
  case 54: {
   $179 = 76528;
   $180 = $179;
   HEAP32[$180>>2] = 28;
   $181 = (($179) + 4)|0;
   $182 = $181;
   HEAP32[$182>>2] = 0;
   $$0 = 263;
   break;
  }
  case 55: {
   $183 = 76528;
   $184 = $183;
   HEAP32[$184>>2] = 29;
   $185 = (($183) + 4)|0;
   $186 = $185;
   HEAP32[$186>>2] = 0;
   $$0 = 263;
   break;
  }
  case 56: {
   $187 = 76528;
   $188 = $187;
   HEAP32[$188>>2] = 30;
   $189 = (($187) + 4)|0;
   $190 = $189;
   HEAP32[$190>>2] = 0;
   $$0 = 263;
   break;
  }
  case 57: {
   $191 = 76528;
   $192 = $191;
   HEAP32[$192>>2] = 31;
   $193 = (($191) + 4)|0;
   $194 = $193;
   HEAP32[$194>>2] = 0;
   $$0 = 263;
   break;
  }
  case 58: {
   $195 = HEAP32[199633]|0;
   (_strcpy(76528,$195)|0);
   $196 = HEAP32[199634]|0;
   $197 = (($196) + -1)|0;
   $198 = (76528 + ($197)|0);
   HEAP8[$198>>0] = 0;
   $$0 = 301;
   break;
  }
  case 59: {
   $199 = HEAP32[199633]|0;
   $200 = ((($199)) + 1|0);
   $201 = (_strlen($199)|0);
   $202 = (($201) + -2)|0;
   (_strncpy(76528,$200,$202)|0);
   $203 = HEAP32[199634]|0;
   $204 = (($203) + -2)|0;
   $205 = (76528 + ($204)|0);
   HEAP8[$205>>0] = 0;
   $$0 = 262;
   break;
  }
  case 60: {
   HEAP32[19173] = 1;
   $$0 = 273;
   break;
  }
  case 61: {
   HEAP32[19172] = 1;
   $$0 = 274;
   break;
  }
  case 62: {
   HEAP32[19171] = 1;
   $$0 = 275;
   break;
  }
  case 63: {
   HEAP32[19170] = 1;
   $$0 = 276;
   break;
  }
  case 64: {
   HEAP32[19169] = 1;
   $$0 = 277;
   break;
  }
  case 65: {
   HEAP32[19168] = 1;
   $$0 = 278;
   break;
  }
  case 66: {
   HEAP32[19174] = 1;
   $$0 = 270;
   break;
  }
  case 67: {
   $206 = 76528;
   $207 = $206;
   HEAP32[$207>>2] = 64;
   $208 = (($206) + 4)|0;
   $209 = $208;
   HEAP32[$209>>2] = 0;
   $$0 = 280;
   break;
  }
  case 68: {
   $210 = 76528;
   $211 = $210;
   HEAP32[$211>>2] = 14;
   $212 = (($210) + 4)|0;
   $213 = $212;
   HEAP32[$213>>2] = 0;
   $$0 = 280;
   break;
  }
  case 69: {
   $214 = 76528;
   $215 = $214;
   HEAP32[$215>>2] = 12;
   $216 = (($214) + 4)|0;
   $217 = $216;
   HEAP32[$217>>2] = 0;
   $$0 = 280;
   break;
  }
  case 70: {
   $218 = 76528;
   $219 = $218;
   HEAP32[$219>>2] = 10;
   $220 = (($218) + 4)|0;
   $221 = $220;
   HEAP32[$221>>2] = 0;
   $$0 = 280;
   break;
  }
  case 71: {
   $222 = 76528;
   $223 = $222;
   HEAP32[$223>>2] = 15;
   $224 = (($222) + 4)|0;
   $225 = $224;
   HEAP32[$225>>2] = 0;
   $$0 = 280;
   break;
  }
  case 72: {
   $226 = 76528;
   $227 = $226;
   HEAP32[$227>>2] = 13;
   $228 = (($226) + 4)|0;
   $229 = $228;
   HEAP32[$229>>2] = 0;
   $$0 = 280;
   break;
  }
  case 73: {
   $230 = 76528;
   $231 = $230;
   HEAP32[$231>>2] = 11;
   $232 = (($230) + 4)|0;
   $233 = $232;
   HEAP32[$233>>2] = 0;
   $$0 = 280;
   break;
  }
  case 74: {
   $234 = 76528;
   $235 = $234;
   HEAP32[$235>>2] = 65;
   $236 = (($234) + 4)|0;
   $237 = $236;
   HEAP32[$237>>2] = 0;
   $$0 = 281;
   break;
  }
  case 75: {
   $238 = 76528;
   $239 = $238;
   HEAP32[$239>>2] = 18;
   $240 = (($238) + 4)|0;
   $241 = $240;
   HEAP32[$241>>2] = 0;
   $$0 = 281;
   break;
  }
  case 76: {
   $242 = 76528;
   $243 = $242;
   HEAP32[$243>>2] = 17;
   $244 = (($242) + 4)|0;
   $245 = $244;
   HEAP32[$245>>2] = 0;
   $$0 = 281;
   break;
  }
  case 77: {
   $246 = 76528;
   $247 = $246;
   HEAP32[$247>>2] = 16;
   $248 = (($246) + 4)|0;
   $249 = $248;
   HEAP32[$249>>2] = 0;
   $$0 = 281;
   break;
  }
  case 78: {
   $250 = 76528;
   $251 = $250;
   HEAP32[$251>>2] = 83;
   $252 = (($250) + 4)|0;
   $253 = $252;
   HEAP32[$253>>2] = 0;
   $$0 = 282;
   break;
  }
  case 79: {
   $254 = 76528;
   $255 = $254;
   HEAP32[$255>>2] = 70;
   $256 = (($254) + 4)|0;
   $257 = $256;
   HEAP32[$257>>2] = 0;
   $$0 = 290;
   break;
  }
  case 80: {
   $258 = 76528;
   $259 = $258;
   HEAP32[$259>>2] = 74;
   $260 = (($258) + 4)|0;
   $261 = $260;
   HEAP32[$261>>2] = 0;
   $$0 = 290;
   break;
  }
  case 81: {
   $262 = 76528;
   $263 = $262;
   HEAP32[$263>>2] = 78;
   $264 = (($262) + 4)|0;
   $265 = $264;
   HEAP32[$265>>2] = 0;
   $$0 = 290;
   break;
  }
  case 82: {
   $266 = 76528;
   $267 = $266;
   HEAP32[$267>>2] = 80;
   $268 = (($266) + 4)|0;
   $269 = $268;
   HEAP32[$269>>2] = 0;
   $$0 = 290;
   break;
  }
  case 83: {
   $270 = 76528;
   $271 = $270;
   HEAP32[$271>>2] = 20;
   $272 = (($270) + 4)|0;
   $273 = $272;
   HEAP32[$273>>2] = 0;
   $$0 = 290;
   break;
  }
  case 84: {
   $274 = 76528;
   $275 = $274;
   HEAP32[$275>>2] = 22;
   $276 = (($274) + 4)|0;
   $277 = $276;
   HEAP32[$277>>2] = 0;
   $$0 = 290;
   break;
  }
  case 85: {
   $278 = 76528;
   $279 = $278;
   HEAP32[$279>>2] = 24;
   $280 = (($278) + 4)|0;
   $281 = $280;
   HEAP32[$281>>2] = 0;
   $$0 = 290;
   break;
  }
  case 86: {
   $282 = 76528;
   $283 = $282;
   HEAP32[$283>>2] = 86;
   $284 = (($282) + 4)|0;
   $285 = $284;
   HEAP32[$285>>2] = 0;
   $$0 = 290;
   break;
  }
  case 87: {
   $286 = 76528;
   $287 = $286;
   HEAP32[$287>>2] = 84;
   $288 = (($286) + 4)|0;
   $289 = $288;
   HEAP32[$289>>2] = 0;
   $$0 = 290;
   break;
  }
  case 88: {
   $290 = 76528;
   $291 = $290;
   HEAP32[$291>>2] = 88;
   $292 = (($290) + 4)|0;
   $293 = $292;
   HEAP32[$293>>2] = 0;
   $$0 = 290;
   break;
  }
  case 89: {
   $294 = 76528;
   $295 = $294;
   HEAP32[$295>>2] = 40;
   $296 = (($294) + 4)|0;
   $297 = $296;
   HEAP32[$297>>2] = 0;
   $$0 = 290;
   break;
  }
  case 90: {
   $298 = 76528;
   $299 = $298;
   HEAP32[$299>>2] = 60;
   $300 = (($298) + 4)|0;
   $301 = $300;
   HEAP32[$301>>2] = 0;
   $$0 = 290;
   break;
  }
  case 91: {
   $302 = 76528;
   $303 = $302;
   HEAP32[$303>>2] = 48;
   $304 = (($302) + 4)|0;
   $305 = $304;
   HEAP32[$305>>2] = 0;
   $$0 = 290;
   break;
  }
  case 92: {
   $306 = 76528;
   $307 = $306;
   HEAP32[$307>>2] = 56;
   $308 = (($306) + 4)|0;
   $309 = $308;
   HEAP32[$309>>2] = 0;
   $$0 = 290;
   break;
  }
  case 93: {
   $310 = 76528;
   $311 = $310;
   HEAP32[$311>>2] = 44;
   $312 = (($310) + 4)|0;
   $313 = $312;
   HEAP32[$313>>2] = 0;
   $$0 = 290;
   break;
  }
  case 94: {
   $314 = 76528;
   $315 = $314;
   HEAP32[$315>>2] = 52;
   $316 = (($314) + 4)|0;
   $317 = $316;
   HEAP32[$317>>2] = 0;
   $$0 = 290;
   break;
  }
  case 95: {
   $318 = 76528;
   $319 = $318;
   HEAP32[$319>>2] = 71;
   $320 = (($318) + 4)|0;
   $321 = $320;
   HEAP32[$321>>2] = 0;
   $$0 = 279;
   break;
  }
  case 96: {
   $322 = 76528;
   $323 = $322;
   HEAP32[$323>>2] = 75;
   $324 = (($322) + 4)|0;
   $325 = $324;
   HEAP32[$325>>2] = 0;
   $$0 = 279;
   break;
  }
  case 97: {
   $326 = 76528;
   $327 = $326;
   HEAP32[$327>>2] = 21;
   $328 = (($326) + 4)|0;
   $329 = $328;
   HEAP32[$329>>2] = 0;
   $$0 = 279;
   break;
  }
  case 98: {
   $330 = 76528;
   $331 = $330;
   HEAP32[$331>>2] = 23;
   $332 = (($330) + 4)|0;
   $333 = $332;
   HEAP32[$333>>2] = 0;
   $$0 = 279;
   break;
  }
  case 99: {
   $334 = 76528;
   $335 = $334;
   HEAP32[$335>>2] = 25;
   $336 = (($334) + 4)|0;
   $337 = $336;
   HEAP32[$337>>2] = 0;
   $$0 = 279;
   break;
  }
  case 100: {
   $338 = 76528;
   $339 = $338;
   HEAP32[$339>>2] = 87;
   $340 = (($338) + 4)|0;
   $341 = $340;
   HEAP32[$341>>2] = 0;
   $$0 = 279;
   break;
  }
  case 101: {
   $342 = 76528;
   $343 = $342;
   HEAP32[$343>>2] = 85;
   $344 = (($342) + 4)|0;
   $345 = $344;
   HEAP32[$345>>2] = 0;
   $$0 = 279;
   break;
  }
  case 102: {
   $346 = 76528;
   $347 = $346;
   HEAP32[$347>>2] = 89;
   $348 = (($346) + 4)|0;
   $349 = $348;
   HEAP32[$349>>2] = 0;
   $$0 = 279;
   break;
  }
  case 103: {
   $350 = 76528;
   $351 = $350;
   HEAP32[$351>>2] = 41;
   $352 = (($350) + 4)|0;
   $353 = $352;
   HEAP32[$353>>2] = 0;
   $$0 = 279;
   break;
  }
  case 104: {
   $354 = 76528;
   $355 = $354;
   HEAP32[$355>>2] = 61;
   $356 = (($354) + 4)|0;
   $357 = $356;
   HEAP32[$357>>2] = 0;
   $$0 = 279;
   break;
  }
  case 105: {
   $358 = 76528;
   $359 = $358;
   HEAP32[$359>>2] = 49;
   $360 = (($358) + 4)|0;
   $361 = $360;
   HEAP32[$361>>2] = 0;
   $$0 = 279;
   break;
  }
  case 106: {
   $362 = 76528;
   $363 = $362;
   HEAP32[$363>>2] = 57;
   $364 = (($362) + 4)|0;
   $365 = $364;
   HEAP32[$365>>2] = 0;
   $$0 = 279;
   break;
  }
  case 107: {
   $366 = 76528;
   $367 = $366;
   HEAP32[$367>>2] = 45;
   $368 = (($366) + 4)|0;
   $369 = $368;
   HEAP32[$369>>2] = 0;
   $$0 = 279;
   break;
  }
  case 108: {
   $370 = 76528;
   $371 = $370;
   HEAP32[$371>>2] = 53;
   $372 = (($370) + 4)|0;
   $373 = $372;
   HEAP32[$373>>2] = 0;
   $$0 = 279;
   break;
  }
  case 109: {
   $374 = 76528;
   $375 = $374;
   HEAP32[$375>>2] = 101;
   $376 = (($374) + 4)|0;
   $377 = $376;
   HEAP32[$377>>2] = 0;
   $$0 = 284;
   break;
  }
  case 110: {
   $378 = 76528;
   $379 = $378;
   HEAP32[$379>>2] = 100;
   $380 = (($378) + 4)|0;
   $381 = $380;
   HEAP32[$381>>2] = 0;
   $$0 = 284;
   break;
  }
  case 111: {
   $382 = 76528;
   $383 = $382;
   HEAP32[$383>>2] = 102;
   $384 = (($382) + 4)|0;
   $385 = $384;
   HEAP32[$385>>2] = 0;
   $$0 = 285;
   break;
  }
  case 112: {
   $386 = 76528;
   $387 = $386;
   HEAP32[$387>>2] = 103;
   $388 = (($386) + 4)|0;
   $389 = $388;
   HEAP32[$389>>2] = 0;
   $$0 = 285;
   break;
  }
  case 113: {
   $390 = 76528;
   $391 = $390;
   HEAP32[$391>>2] = 106;
   $392 = (($390) + 4)|0;
   $393 = $392;
   HEAP32[$393>>2] = 0;
   $$0 = 290;
   break;
  }
  case 114: {
   $394 = 76528;
   $395 = $394;
   HEAP32[$395>>2] = 107;
   $396 = (($394) + 4)|0;
   $397 = $396;
   HEAP32[$397>>2] = 0;
   $$0 = 290;
   break;
  }
  case 115: {
   $398 = 76528;
   $399 = $398;
   HEAP32[$399>>2] = 108;
   $400 = (($398) + 4)|0;
   $401 = $400;
   HEAP32[$401>>2] = 0;
   $$0 = 299;
   break;
  }
  case 116: {
   $402 = 76528;
   $403 = $402;
   HEAP32[$403>>2] = 109;
   $404 = (($402) + 4)|0;
   $405 = $404;
   HEAP32[$405>>2] = 0;
   $$0 = 300;
   break;
  }
  case 117: {
   $406 = 76528;
   $407 = $406;
   HEAP32[$407>>2] = 110;
   $408 = (($406) + 4)|0;
   $409 = $408;
   HEAP32[$409>>2] = 0;
   $$0 = 299;
   break;
  }
  case 118: {
   $410 = 76528;
   $411 = $410;
   HEAP32[$411>>2] = 110;
   $412 = (($410) + 4)|0;
   $413 = $412;
   HEAP32[$413>>2] = 0;
   $$0 = 299;
   break;
  }
  case 119: {
   $414 = 76528;
   $415 = $414;
   HEAP32[$415>>2] = 111;
   $416 = (($414) + 4)|0;
   $417 = $416;
   HEAP32[$417>>2] = 0;
   $$0 = 300;
   break;
  }
  case 120: {
   $418 = 76528;
   $419 = $418;
   HEAP32[$419>>2] = 0;
   $420 = (($418) + 4)|0;
   $421 = $420;
   HEAP32[$421>>2] = 0;
   $$0 = 288;
   break;
  }
  case 121: {
   $422 = 76528;
   $423 = $422;
   HEAP32[$423>>2] = 0;
   $424 = (($422) + 4)|0;
   $425 = $424;
   HEAP32[$425>>2] = 0;
   $$0 = 287;
   break;
  }
  case 122: {
   $426 = 76528;
   $427 = $426;
   HEAP32[$427>>2] = 1;
   $428 = (($426) + 4)|0;
   $429 = $428;
   HEAP32[$429>>2] = 0;
   $$0 = 286;
   break;
  }
  case 123: {
   $430 = 76528;
   $431 = $430;
   HEAP32[$431>>2] = 120;
   $432 = (($430) + 4)|0;
   $433 = $432;
   HEAP32[$433>>2] = 0;
   $$0 = 289;
   break;
  }
  case 124: {
   $434 = 76528;
   $435 = $434;
   HEAP32[$435>>2] = 130;
   $436 = (($434) + 4)|0;
   $437 = $436;
   HEAP32[$437>>2] = 0;
   $$0 = 294;
   break;
  }
  case 125: {
   $438 = 76528;
   $439 = $438;
   HEAP32[$439>>2] = 131;
   $440 = (($438) + 4)|0;
   $441 = $440;
   HEAP32[$441>>2] = 0;
   $$0 = 294;
   break;
  }
  case 126: {
   $442 = 76528;
   $443 = $442;
   HEAP32[$443>>2] = 132;
   $444 = (($442) + 4)|0;
   $445 = $444;
   HEAP32[$445>>2] = 0;
   $$0 = 294;
   break;
  }
  case 127: {
   $446 = 76528;
   $447 = $446;
   HEAP32[$447>>2] = 133;
   $448 = (($446) + 4)|0;
   $449 = $448;
   HEAP32[$449>>2] = 0;
   $$0 = 294;
   break;
  }
  case 128: {
   $450 = 76528;
   $451 = $450;
   HEAP32[$451>>2] = 143;
   $452 = (($450) + 4)|0;
   $453 = $452;
   HEAP32[$453>>2] = 0;
   $$0 = 294;
   break;
  }
  case 129: {
   $454 = 76528;
   $455 = $454;
   HEAP32[$455>>2] = 144;
   $456 = (($454) + 4)|0;
   $457 = $456;
   HEAP32[$457>>2] = 0;
   $$0 = 294;
   break;
  }
  case 130: {
   $458 = 76528;
   $459 = $458;
   HEAP32[$459>>2] = 145;
   $460 = (($458) + 4)|0;
   $461 = $460;
   HEAP32[$461>>2] = 0;
   $$0 = 294;
   break;
  }
  case 131: {
   $462 = 76528;
   $463 = $462;
   HEAP32[$463>>2] = 146;
   $464 = (($462) + 4)|0;
   $465 = $464;
   HEAP32[$465>>2] = 0;
   $$0 = 294;
   break;
  }
  case 132: {
   $466 = 76528;
   $467 = $466;
   HEAP32[$467>>2] = 154;
   $468 = (($466) + 4)|0;
   $469 = $468;
   HEAP32[$469>>2] = 0;
   $$0 = 294;
   break;
  }
  case 133: {
   $470 = 76528;
   $471 = $470;
   HEAP32[$471>>2] = 155;
   $472 = (($470) + 4)|0;
   $473 = $472;
   HEAP32[$473>>2] = 0;
   $$0 = 294;
   break;
  }
  case 134: {
   $474 = 76528;
   $475 = $474;
   HEAP32[$475>>2] = 156;
   $476 = (($474) + 4)|0;
   $477 = $476;
   HEAP32[$477>>2] = 0;
   $$0 = 294;
   break;
  }
  case 135: {
   $478 = 76528;
   $479 = $478;
   HEAP32[$479>>2] = 157;
   $480 = (($478) + 4)|0;
   $481 = $480;
   HEAP32[$481>>2] = 0;
   $$0 = 294;
   break;
  }
  case 136: {
   $482 = 76528;
   $483 = $482;
   HEAP32[$483>>2] = 128;
   $484 = (($482) + 4)|0;
   $485 = $484;
   HEAP32[$485>>2] = 0;
   $$0 = 292;
   break;
  }
  case 137: {
   $486 = 76528;
   $487 = $486;
   HEAP32[$487>>2] = 129;
   $488 = (($486) + 4)|0;
   $489 = $488;
   HEAP32[$489>>2] = 0;
   $$0 = 293;
   break;
  }
  case 138: {
   $490 = 76528;
   $491 = $490;
   HEAP32[$491>>2] = 141;
   $492 = (($490) + 4)|0;
   $493 = $492;
   HEAP32[$493>>2] = 0;
   $$0 = 292;
   break;
  }
  case 139: {
   $494 = 76528;
   $495 = $494;
   HEAP32[$495>>2] = 142;
   $496 = (($494) + 4)|0;
   $497 = $496;
   HEAP32[$497>>2] = 0;
   $$0 = 293;
   break;
  }
  case 140: {
   $498 = 76528;
   $499 = $498;
   HEAP32[$499>>2] = 180;
   $500 = (($498) + 4)|0;
   $501 = $500;
   HEAP32[$501>>2] = 0;
   $$0 = 292;
   break;
  }
  case 141: {
   $502 = 76528;
   $503 = $502;
   HEAP32[$503>>2] = 181;
   $504 = (($502) + 4)|0;
   $505 = $504;
   HEAP32[$505>>2] = 0;
   $$0 = 293;
   break;
  }
  case 142: {
   $506 = 76528;
   $507 = $506;
   HEAP32[$507>>2] = 137;
   $508 = (($506) + 4)|0;
   $509 = $508;
   HEAP32[$509>>2] = 0;
   $$0 = 295;
   break;
  }
  case 143: {
   $510 = 76528;
   $511 = $510;
   HEAP32[$511>>2] = 138;
   $512 = (($510) + 4)|0;
   $513 = $512;
   HEAP32[$513>>2] = 0;
   $$0 = 295;
   break;
  }
  case 144: {
   $514 = 76528;
   $515 = $514;
   HEAP32[$515>>2] = 136;
   $516 = (($514) + 4)|0;
   $517 = $516;
   HEAP32[$517>>2] = 0;
   $$0 = 295;
   break;
  }
  case 145: {
   $518 = 76528;
   $519 = $518;
   HEAP32[$519>>2] = 139;
   $520 = (($518) + 4)|0;
   $521 = $520;
   HEAP32[$521>>2] = 0;
   $$0 = 295;
   break;
  }
  case 146: {
   $522 = 76528;
   $523 = $522;
   HEAP32[$523>>2] = 135;
   $524 = (($522) + 4)|0;
   $525 = $524;
   HEAP32[$525>>2] = 0;
   $$0 = 295;
   break;
  }
  case 147: {
   $526 = 76528;
   $527 = $526;
   HEAP32[$527>>2] = 140;
   $528 = (($526) + 4)|0;
   $529 = $528;
   HEAP32[$529>>2] = 0;
   $$0 = 295;
   break;
  }
  case 148: {
   $530 = 76528;
   $531 = $530;
   HEAP32[$531>>2] = 150;
   $532 = (($530) + 4)|0;
   $533 = $532;
   HEAP32[$533>>2] = 0;
   $$0 = 295;
   break;
  }
  case 149: {
   $534 = 76528;
   $535 = $534;
   HEAP32[$535>>2] = 151;
   $536 = (($534) + 4)|0;
   $537 = $536;
   HEAP32[$537>>2] = 0;
   $$0 = 295;
   break;
  }
  case 150: {
   $538 = 76528;
   $539 = $538;
   HEAP32[$539>>2] = 149;
   $540 = (($538) + 4)|0;
   $541 = $540;
   HEAP32[$541>>2] = 0;
   $$0 = 295;
   break;
  }
  case 151: {
   $542 = 76528;
   $543 = $542;
   HEAP32[$543>>2] = 152;
   $544 = (($542) + 4)|0;
   $545 = $544;
   HEAP32[$545>>2] = 0;
   $$0 = 295;
   break;
  }
  case 152: {
   $546 = 76528;
   $547 = $546;
   HEAP32[$547>>2] = 148;
   $548 = (($546) + 4)|0;
   $549 = $548;
   HEAP32[$549>>2] = 0;
   $$0 = 295;
   break;
  }
  case 153: {
   $550 = 76528;
   $551 = $550;
   HEAP32[$551>>2] = 153;
   $552 = (($550) + 4)|0;
   $553 = $552;
   HEAP32[$553>>2] = 0;
   $$0 = 295;
   break;
  }
  case 154: {
   $554 = 76528;
   $555 = $554;
   HEAP32[$555>>2] = 183;
   $556 = (($554) + 4)|0;
   $557 = $556;
   HEAP32[$557>>2] = 0;
   $$0 = 296;
   break;
  }
  case 155: {
   $558 = 76528;
   $559 = $558;
   HEAP32[$559>>2] = 182;
   $560 = (($558) + 4)|0;
   $561 = $560;
   HEAP32[$561>>2] = 0;
   $$0 = 296;
   break;
  }
  case 156: {
   $562 = 76528;
   $563 = $562;
   HEAP32[$563>>2] = 184;
   $564 = (($562) + 4)|0;
   $565 = $564;
   HEAP32[$565>>2] = 0;
   $$0 = 297;
   break;
  }
  case 157: {
   $566 = 76528;
   $567 = $566;
   HEAP32[$567>>2] = 185;
   $568 = (($566) + 4)|0;
   $569 = $568;
   HEAP32[$569>>2] = 0;
   $$0 = 298;
   break;
  }
  case 158: {
   $570 = 76528;
   $571 = $570;
   HEAP32[$571>>2] = 104;
   $572 = (($570) + 4)|0;
   $573 = $572;
   HEAP32[$573>>2] = 0;
   $$0 = 283;
   break;
  }
  case 159: {
   $574 = 76528;
   $575 = $574;
   HEAP32[$575>>2] = 105;
   $576 = (($574) + 4)|0;
   $577 = $576;
   HEAP32[$577>>2] = 0;
   $$0 = 283;
   break;
  }
  case 160: {
   $578 = HEAP32[199633]|0;
   (_strcpy(76528,$578)|0);
   $$0 = 261;
   break;
  }
  case 161: {
   (_yyerror(29304)|0);
   // unreachable;
   break;
  }
  case 162: {
   $579 = HEAP32[199633]|0;
   $580 = HEAP8[$579>>0]|0;
   $581 = $580 << 24 >> 24;
   $$0 = $581;
   break;
  }
  case 173: {
   _yy_fatal_error(29341);
   // unreachable;
   break;
  }
  case 174: {
   $$0 = 265;
   break;
  }
  case 175: {
   $$0 = 266;
   break;
  }
  case 176: {
   $$0 = 268;
   break;
  }
  case 177: {
   $$0 = 269;
   break;
  }
  case 178: {
   $$0 = 267;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _yyensure_buffer_stack() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[199637]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_yyalloc(4)|0);
  HEAP32[199637] = $2;
  $3 = ($2|0)==(0|0);
  if ($3) {
   _yy_fatal_error(29647);
   // unreachable;
  }
  $4 = HEAP32[199637]|0;
  HEAP32[$4>>2] = 0;
  HEAP32[199643] = 1;
  HEAP32[199638] = 0;
  return;
 }
 $5 = HEAP32[199638]|0;
 $6 = HEAP32[199643]|0;
 $7 = (($6) + -1)|0;
 $8 = ($5>>>0)<($7>>>0);
 if ($8) {
  return;
 }
 $9 = (($6) + 8)|0;
 $10 = $9 << 2;
 $11 = (_yyrealloc($0,$10)|0);
 HEAP32[199637] = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  _yy_fatal_error(29647);
  // unreachable;
 }
 $13 = HEAP32[199637]|0;
 $14 = HEAP32[199643]|0;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;HEAP32[$15+16>>2]=0|0;HEAP32[$15+20>>2]=0|0;HEAP32[$15+24>>2]=0|0;HEAP32[$15+28>>2]=0|0;
 HEAP32[199643] = $9;
 return;
}
function _yy_create_buffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_yyalloc(48)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _yy_fatal_error(29603);
  // unreachable;
 }
 $4 = ((($2)) + 12|0);
 HEAP32[$4>>2] = $1;
 $5 = (($1) + 2)|0;
 $6 = (_yyalloc($5)|0);
 $7 = ((($2)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ($6|0)==(0|0);
 if ($8) {
  _yy_fatal_error(29603);
  // unreachable;
 } else {
  $9 = ((($2)) + 20|0);
  HEAP32[$9>>2] = 1;
  _yy_init_buffer($2,$0);
  return ($2|0);
 }
 return (0)|0;
}
function _yy_load_buffer_state() {
 var $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[199637]|0;
 $1 = HEAP32[199638]|0;
 $2 = (($0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[199642] = $5;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[199639] = $7;
 HEAP32[199633] = $7;
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[199631] = $9;
 $$cast = $7;
 $10 = HEAP8[$$cast>>0]|0;
 HEAP8[842121] = $10;
 return;
}
function _yyunput($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$024$lcssa = 0, $$02428 = 0, $$025 = 0, $$026 = 0, $$029 = 0, $$lcssa = 0, $$lcssa27 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[199639]|0;
 $3 = HEAP8[842121]|0;
 HEAP8[$2>>0] = $3;
 $4 = HEAP32[199637]|0;
 $5 = HEAP32[199638]|0;
 $6 = (($4) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 2|0);
 $11 = ($2>>>0)<($10>>>0);
 if (!($11)) {
  $$025 = $1;$$026 = $2;
  $46 = $0&255;
  $47 = ((($$026)) + -1|0);
  HEAP8[$47>>0] = $46;
  HEAP32[199633] = $$025;
  $48 = HEAP8[$47>>0]|0;
  HEAP8[842121] = $48;
  HEAP32[199639] = $47;
  return;
 }
 $12 = HEAP32[199642]|0;
 $13 = (($12) + 2)|0;
 $14 = ((($7)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 2)|0;
 $17 = (($9) + ($16)|0);
 $18 = (($9) + ($13)|0);
 $19 = HEAP32[199637]|0;
 $20 = HEAP32[199638]|0;
 $21 = (($19) + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($18>>>0)>($24>>>0);
 if ($25) {
  $26 = HEAP32[199637]|0;
  $27 = HEAP32[199638]|0;
  $28 = (($26) + ($27<<2)|0);
  $$02428 = $17;$$029 = $18;
  while(1) {
   $29 = ((($$029)) + -1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = ((($$02428)) + -1|0);
   HEAP8[$31>>0] = $30;
   $32 = HEAP32[$28>>2]|0;
   $33 = ((($32)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($29>>>0)>($34>>>0);
   if ($35) {
    $$02428 = $31;$$029 = $29;
   } else {
    $$0$lcssa = $29;$$024$lcssa = $31;$$lcssa = $34;$$lcssa27 = $32;
    break;
   }
  }
 } else {
  $$0$lcssa = $18;$$024$lcssa = $17;$$lcssa = $24;$$lcssa27 = $22;
 }
 $36 = $$024$lcssa;
 $37 = $$0$lcssa;
 $38 = (($36) - ($37))|0;
 $39 = (($2) + ($38)|0);
 $40 = (($1) + ($38)|0);
 $41 = ((($$lcssa27)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 HEAP32[199642] = $42;
 $43 = ((($$lcssa27)) + 16|0);
 HEAP32[$43>>2] = $42;
 $44 = ((($$lcssa)) + 2|0);
 $45 = ($39>>>0)<($44>>>0);
 if ($45) {
  _yy_fatal_error(29571);
  // unreachable;
 } else {
  $$025 = $40;$$026 = $39;
  $46 = $0&255;
  $47 = ((($$026)) + -1|0);
  HEAP8[$47>>0] = $46;
  HEAP32[199633] = $$025;
  $48 = HEAP8[$47>>0]|0;
  HEAP8[842121] = $48;
  HEAP32[199639] = $47;
  return;
 }
}
function _yy_get_previous_state() {
 var $$0$ph = 0, $$01724 = 0, $$018$lcssa = 0, $$01823 = 0, $$1 = 0, $$1$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[199636]|0;
 $1 = HEAP32[199633]|0;
 $2 = HEAP32[199639]|0;
 $3 = ($1>>>0)<($2>>>0);
 if (!($3)) {
  $$018$lcssa = $0;
  return ($$018$lcssa|0);
 }
 $4 = HEAP32[199639]|0;
 $$01724 = $1;$$01823 = $0;
 while(1) {
  $5 = HEAP8[$$01724>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $33 = 1;
  } else {
   $7 = $5&255;
   $8 = (344 + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $33 = $9;
  }
  $10 = (3310 + ($$01823<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11<<16>>16)==(0);
  if ($12) {
   $$0$ph = $33;$$1$ph = $$01823;
  } else {
   HEAP32[199640] = $$01823;
   HEAP32[199641] = $$01724;
   $$0$ph = $33;$$1$ph = $$01823;
  }
  L11: while(1) {
   $13 = $$0$ph & 255;
   $$1 = $$1$ph;
   while(1) {
    $14 = (3938 + ($$1<<1)|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = $15 << 16 >> 16;
    $17 = (($16) + ($13))|0;
    $18 = (4584 + ($17<<1)|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = $19 << 16 >> 16;
    $21 = ($20|0)==($$1|0);
    if ($21) {
     break L11;
    }
    $22 = (5926 + ($$1<<1)|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23 << 16 >> 16;
    $25 = ($23<<16>>16)>(313);
    if ($25) {
     break;
    } else {
     $$1 = $24;
    }
   }
   $26 = (1368 + ($13<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $$0$ph = $27;$$1$ph = $24;
  }
  $28 = (6572 + ($17<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = ((($$01724)) + 1|0);
  $32 = ($31>>>0)<($4>>>0);
  if ($32) {
   $$01724 = $31;$$01823 = $30;
  } else {
   $$018$lcssa = $30;
   break;
  }
 }
 return ($$018$lcssa|0);
}
function _yy_try_NUL_trans($0) {
 $0 = $0|0;
 var $$01516 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (3310 + ($0<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if (!($3)) {
  $4 = HEAP32[199639]|0;
  HEAP32[199640] = $0;
  HEAP32[199641] = $4;
 }
 $5 = (3938 + ($0<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($7) + 1)|0;
 $9 = (4584 + ($8<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ($11|0)==($0|0);
 if ($12) {
  $$lcssa = $8;
  $23 = (6572 + ($$lcssa<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = ($24<<16>>16)==(313);
  $27 = $26 ? 0 : $25;
  return ($27|0);
 } else {
  $$01516 = $0;
 }
 while(1) {
  $13 = (5926 + ($$01516<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  $16 = (3938 + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = (($18) + 1)|0;
  $20 = (4584 + ($19<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = ($21<<16>>16)==($14<<16>>16);
  if ($22) {
   $$lcssa = $19;
   break;
  } else {
   $$01516 = $15;
  }
 }
 $23 = (6572 + ($$lcssa<<1)|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 $26 = ($24<<16>>16)==(313);
 $27 = $26 ? 0 : $25;
 return ($27|0);
}
function _yy_get_next_buffer() {
 var $$ = 0, $$$071 = 0, $$0 = 0, $$065$lcssa = 0, $$06588 = 0, $$068105 = 0, $$069104 = 0, $$070103 = 0, $$071 = 0, $$071$in = 0, $$071$in99 = 0, $$071$lcssa = 0, $$071100 = 0, $$073 = 0, $$182 = 0, $$pn = 0, $$pn$in = 0, $$pn$in97 = 0, $$pn98 = 0, $$sink = 0;
 var $$sink77 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[199637]|0;
 $1 = HEAP32[199638]|0;
 $2 = (($0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[199633]|0;
 $7 = HEAP32[199639]|0;
 $8 = HEAP32[199642]|0;
 $9 = (($8) + 1)|0;
 $10 = (($5) + ($9)|0);
 $11 = ($7>>>0)>($10>>>0);
 if ($11) {
  _yy_fatal_error(29396);
  // unreachable;
 }
 $12 = ((($3)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 $15 = HEAP32[199639]|0;
 $16 = HEAP32[199633]|0;
 $17 = (($15) - ($16))|0;
 if ($14) {
  $18 = ($17|0)==(1);
  $$ = $18 ? 1 : 2;
  $$0 = $$;
  return ($$0|0);
 }
 $19 = (($17) + -1)|0;
 $20 = ($17|0)>(1);
 if ($20) {
  $$068105 = $5;$$069104 = $6;$$070103 = 0;
  while(1) {
   $21 = ((($$069104)) + 1|0);
   $22 = HEAP8[$$069104>>0]|0;
   $23 = ((($$068105)) + 1|0);
   HEAP8[$$068105>>0] = $22;
   $24 = (($$070103) + 1)|0;
   $25 = ($24|0)<($19|0);
   if ($25) {
    $$068105 = $23;$$069104 = $21;$$070103 = $24;
   } else {
    break;
   }
  }
 }
 $26 = HEAP32[199637]|0;
 $27 = HEAP32[199638]|0;
 $28 = (($26) + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(2);
 if ($32) {
  HEAP32[199642] = 0;
  $$sink = 0;$$sink77 = $29;
 } else {
  $$pn$in97 = ((($29)) + 12|0);
  $$pn98 = HEAP32[$$pn$in97>>2]|0;
  $$071$in99 = (($$pn98) - ($19))|0;
  $$071100 = (($$071$in99) + -1)|0;
  $33 = ($$071100|0)<(1);
  L15: do {
   if ($33) {
    while(1) {
     $34 = HEAP32[199637]|0;
     $35 = HEAP32[199638]|0;
     $36 = (($34) + ($35<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = HEAP32[199639]|0;
     $39 = ((($37)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $40;
     $42 = (($38) - ($41))|0;
     $43 = ((($37)) + 20|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break;
     }
     $46 = ((($37)) + 12|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $47 << 1;
     $49 = ($48|0)==(0);
     $50 = $47 >>> 3;
     $51 = (($50) + ($47))|0;
     $storemerge74 = $49 ? $51 : $48;
     HEAP32[$46>>2] = $storemerge74;
     $52 = (($storemerge74) + 2)|0;
     $53 = (_yyrealloc($40,$52)|0);
     HEAP32[$39>>2] = $53;
     $54 = ($53|0)==(0|0);
     if ($54) {
      label = 13;
      break;
     }
     $55 = (($53) + ($42)|0);
     HEAP32[199639] = $55;
     $56 = HEAP32[199637]|0;
     $57 = HEAP32[199638]|0;
     $58 = (($56) + ($57<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $$pn$in = ((($59)) + 12|0);
     $$pn = HEAP32[$$pn$in>>2]|0;
     $$071$in = (($$pn) - ($19))|0;
     $$071 = (($$071$in) + -1)|0;
     $60 = ($$071|0)<(1);
     if (!($60)) {
      $$071$lcssa = $$071;
      break L15;
     }
    }
    if ((label|0) == 13) {
     _yy_fatal_error(29452);
     // unreachable;
    }
    HEAP32[$39>>2] = 0;
    _yy_fatal_error(29452);
    // unreachable;
   } else {
    $$071$lcssa = $$071100;
   }
  } while(0);
  $61 = ($$071$lcssa|0)<(8192);
  $$$071 = $61 ? $$071$lcssa : 8192;
  $62 = HEAP32[199637]|0;
  $63 = HEAP32[199638]|0;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)==(0);
  L25: do {
   if ($68) {
    $95 = (___errno_location()|0);
    HEAP32[$95>>2] = 0;
    $96 = HEAP32[199637]|0;
    $97 = HEAP32[199638]|0;
    $98 = (($96) + ($97<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ((($99)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($19)|0);
    $103 = HEAP32[199631]|0;
    $104 = (_fread($102,1,$$$071,$103)|0);
    HEAP32[199642] = $104;
    $105 = ($104|0)==(0);
    if ($105) {
     while(1) {
      $106 = HEAP32[199631]|0;
      $107 = (_ferror($106)|0);
      $108 = ($107|0)==(0);
      if ($108) {
       break L25;
      }
      $109 = (___errno_location()|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($110|0)==(4);
      if (!($111)) {
       break;
      }
      $112 = (___errno_location()|0);
      HEAP32[$112>>2] = 0;
      $113 = HEAP32[199631]|0;
      _clearerr($113);
      $114 = HEAP32[199637]|0;
      $115 = HEAP32[199638]|0;
      $116 = (($114) + ($115<<2)|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = ((($117)) + 4|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (($119) + ($19)|0);
      $121 = HEAP32[199631]|0;
      $122 = (_fread($120,1,$$$071,$121)|0);
      HEAP32[199642] = $122;
      $123 = ($122|0)==(0);
      if (!($123)) {
       break L25;
      }
     }
     _yy_fatal_error(29496);
     // unreachable;
    }
   } else {
    $$06588 = 0;
    L32: while(1) {
     $69 = HEAP32[199631]|0;
     $70 = (_getc($69)|0);
     switch ($70|0) {
     case 10: case -1:  {
      $$065$lcssa = $$06588;
      break L32;
      break;
     }
     default: {
     }
     }
     $71 = $70&255;
     $72 = HEAP32[199637]|0;
     $73 = HEAP32[199638]|0;
     $74 = (($72) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($75)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($19)|0);
     $79 = (($78) + ($$06588)|0);
     HEAP8[$79>>0] = $71;
     $80 = (($$06588) + 1)|0;
     $81 = ($80|0)<($$$071|0);
     if ($81) {
      $$06588 = $80;
     } else {
      $$065$lcssa = $80;
      break;
     }
    }
    switch ($70|0) {
    case 10:  {
     $82 = $70&255;
     $83 = HEAP32[199637]|0;
     $84 = HEAP32[199638]|0;
     $85 = (($83) + ($84<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($86)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($88) + ($19)|0);
     $90 = (($$065$lcssa) + 1)|0;
     $91 = (($89) + ($$065$lcssa)|0);
     HEAP8[$91>>0] = $82;
     $$182 = $90;
     break;
    }
    case -1:  {
     $92 = HEAP32[199631]|0;
     $93 = (_ferror($92)|0);
     $94 = ($93|0)==(0);
     if ($94) {
      $$182 = $$065$lcssa;
     } else {
      _yy_fatal_error(29496);
      // unreachable;
     }
     break;
    }
    default: {
     $$182 = $$065$lcssa;
    }
    }
    HEAP32[199642] = $$182;
   }
  } while(0);
  $124 = HEAP32[199642]|0;
  $125 = HEAP32[199637]|0;
  $126 = HEAP32[199638]|0;
  $127 = (($125) + ($126<<2)|0);
  $128 = HEAP32[$127>>2]|0;
  $$sink = $124;$$sink77 = $128;
 }
 $129 = ((($$sink77)) + 16|0);
 HEAP32[$129>>2] = $$sink;
 $130 = HEAP32[199642]|0;
 $131 = ($130|0)==(0);
 do {
  if ($131) {
   $132 = ($19|0)==(0);
   if ($132) {
    $133 = HEAP32[199631]|0;
    _yyrestart($133);
    $$073 = 1;
    break;
   } else {
    $134 = HEAP32[199637]|0;
    $135 = HEAP32[199638]|0;
    $136 = (($134) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ((($137)) + 44|0);
    HEAP32[$138>>2] = 2;
    $$073 = 2;
    break;
   }
  } else {
   $$073 = 0;
  }
 } while(0);
 $139 = HEAP32[199642]|0;
 $140 = (($139) + ($19))|0;
 $141 = HEAP32[199637]|0;
 $142 = HEAP32[199638]|0;
 $143 = (($141) + ($142<<2)|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($144)) + 12|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($140>>>0)>($146>>>0);
 if ($147) {
  $148 = $139 >>> 1;
  $149 = (($140) + ($148))|0;
  $150 = ((($144)) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (_yyrealloc($151,$149)|0);
  $153 = HEAP32[199637]|0;
  $154 = HEAP32[199638]|0;
  $155 = (($153) + ($154<<2)|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ((($156)) + 4|0);
  HEAP32[$157>>2] = $152;
  $158 = HEAP32[$155>>2]|0;
  $159 = ((($158)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ($160|0)==(0|0);
  if ($161) {
   _yy_fatal_error(29525);
   // unreachable;
  }
 }
 $162 = HEAP32[199642]|0;
 $163 = (($162) + ($19))|0;
 HEAP32[199642] = $163;
 $164 = HEAP32[199637]|0;
 $165 = HEAP32[199638]|0;
 $166 = (($164) + ($165<<2)|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ((($167)) + 4|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = (($169) + ($163)|0);
 HEAP8[$170>>0] = 0;
 $171 = HEAP32[199637]|0;
 $172 = HEAP32[199638]|0;
 $173 = (($171) + ($172<<2)|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ((($174)) + 4|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = HEAP32[199642]|0;
 $178 = (($177) + 1)|0;
 $179 = (($176) + ($178)|0);
 HEAP8[$179>>0] = 0;
 $180 = HEAP32[199637]|0;
 $181 = HEAP32[199638]|0;
 $182 = (($180) + ($181<<2)|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ((($183)) + 4|0);
 $185 = HEAP32[$184>>2]|0;
 HEAP32[199633] = $185;
 $$0 = $$073;
 return ($$0|0);
}
function _yy_fatal_error($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[482]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 (_fprintf($1,29392,$vararg_buffer)|0);
 _exit(2);
 // unreachable;
}
function _yyrealloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_realloc($0,$1)|0);
 return ($2|0);
}
function _yyrestart($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[199637]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = HEAP32[199638]|0;
  $4 = (($1) + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _yyensure_buffer_stack();
  $7 = HEAP32[199631]|0;
  $8 = (_yy_create_buffer($7,16384)|0);
  $9 = HEAP32[199637]|0;
  $10 = HEAP32[199638]|0;
  $11 = (($9) + ($10<<2)|0);
  HEAP32[$11>>2] = $8;
 }
 $12 = HEAP32[199637]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $17 = 0;
  _yy_init_buffer($17,$0);
  _yy_load_buffer_state();
  return;
 }
 $14 = HEAP32[199638]|0;
 $15 = (($12) + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 _yy_init_buffer($17,$0);
 _yy_load_buffer_state();
 return;
}
function _yy_init_buffer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 _yy_flush_buffer($0);
 HEAP32[$0>>2] = $1;
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = 1;
 $5 = HEAP32[199637]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $10 = 0;
 } else {
  $7 = HEAP32[199638]|0;
  $8 = (($5) + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
 }
 $11 = ($10|0)==($0|0);
 if (!($11)) {
  $12 = ((($0)) + 32|0);
  HEAP32[$12>>2] = 1;
  $13 = ((($0)) + 36|0);
  HEAP32[$13>>2] = 0;
 }
 $14 = ($1|0)==(0|0);
 if ($14) {
  $20 = 0;
  $19 = ((($0)) + 24|0);
  HEAP32[$19>>2] = $20;
  $21 = (___errno_location()|0);
  HEAP32[$21>>2] = $3;
  return;
 }
 $15 = (_fileno($1)|0);
 $16 = (_isatty($15)|0);
 $17 = ($16|0)>(0);
 $18 = $17&1;
 $20 = $18;
 $19 = ((($0)) + 24|0);
 HEAP32[$19>>2] = $20;
 $21 = (___errno_location()|0);
 HEAP32[$21>>2] = $3;
 return;
}
function _yy_flush_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP8[$4>>0] = 0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($5)) + 1|0);
 HEAP8[$6>>0] = 0;
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 28|0);
 HEAP32[$9>>2] = 1;
 $10 = ((($0)) + 44|0);
 HEAP32[$10>>2] = 0;
 $11 = HEAP32[199637]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $16 = 0;
 } else {
  $13 = HEAP32[199638]|0;
  $14 = (($11) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15;
 }
 $17 = ($16|0)==($0|0);
 if (!($17)) {
  return;
 }
 _yy_load_buffer_state();
 return;
}
function _yyalloc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc($0)|0);
 return ($1|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[199644]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (798616 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[199644] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(798584)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (798616 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[199644] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(798596)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (798616 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[199644] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(798584)>>2] = $76;
     HEAP32[(798596)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(798580)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (798880 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (798880 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(798580)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(798596)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (798616 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[199644] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(798584)>>2] = $$0173$lcssa$i;
       HEAP32[(798596)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(798580)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (798880 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (798880 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(798584)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (798880 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(798580)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (798616 + ($383<<2)|0);
          $385 = HEAP32[199644]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[199644] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (798880 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(798580)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(798584)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(798596)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(798596)>>2] = $462;
   HEAP32[(798584)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(798584)>>2] = 0;
   HEAP32[(798596)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(798588)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(798588)>>2] = $477;
  $478 = HEAP32[(798600)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(798600)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[199762]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(799056)>>2] = 4096;
  HEAP32[(799052)>>2] = 4096;
  HEAP32[(799060)>>2] = -1;
  HEAP32[(799064)>>2] = -1;
  HEAP32[(799068)>>2] = 0;
  HEAP32[(799020)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[199762] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(799056)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(799016)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(799008)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(799020)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(798600)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (799024);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(799052)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(799008)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(799016)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(799056)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(799020)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(799020)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(799008)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(799008)>>2] = $578;
  $579 = HEAP32[(799012)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(799012)>>2] = $578;
  }
  $581 = HEAP32[(798600)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(798592)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(798592)>>2] = $$748$i;
    }
    HEAP32[(799024)>>2] = $$748$i;
    HEAP32[(799028)>>2] = $$723947$i;
    HEAP32[(799036)>>2] = 0;
    $586 = HEAP32[199762]|0;
    HEAP32[(798612)>>2] = $586;
    HEAP32[(798608)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (798616 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(798600)>>2] = $600;
    HEAP32[(798588)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(799064)>>2]|0;
    HEAP32[(798604)>>2] = $606;
   } else {
    $$024370$i = (799024);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(798588)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(798600)>>2] = $630;
       HEAP32[(798588)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(799064)>>2]|0;
       HEAP32[(798604)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(798592)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(798592)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (799024);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(798588)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(798588)>>2] = $678;
        HEAP32[(798600)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(798596)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(798584)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(798584)>>2] = $684;
         HEAP32[(798596)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[199644]|0;
            $703 = $702 & $701;
            HEAP32[199644] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (798880 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(798580)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(798580)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (798616 + ($762<<2)|0);
         $764 = HEAP32[199644]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[199644] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (798880 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(798580)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(798580)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (799024);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(798600)>>2] = $865;
    HEAP32[(798588)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(799064)>>2]|0;
    HEAP32[(798604)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(799024)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(799024)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(799024)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(799024)+12>>2]|0;
    HEAP32[(799024)>>2] = $$748$i;
    HEAP32[(799028)>>2] = $$723947$i;
    HEAP32[(799036)>>2] = 0;
    HEAP32[(799032)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (798616 + ($887<<2)|0);
      $889 = HEAP32[199644]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[199644] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (798880 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(798580)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(798580)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(798588)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(798588)>>2] = $962;
   $963 = HEAP32[(798600)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(798600)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(798592)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(798596)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(798584)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[199644]|0;
     $29 = $28 & $27;
     HEAP32[199644] = $29;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$86 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$86 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (798880 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(798580)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(798580)>>2] = $62;
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$86 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$86 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$86 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$86 = $2;
  }
 } while(0);
 $87 = ($86>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(798600)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(798596)>>2]|0;
  if ($95) {
   $97 = HEAP32[(798588)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(798588)>>2] = $98;
   HEAP32[(798600)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(798596)>>2] = 0;
   HEAP32[(798584)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(798584)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(798584)>>2] = $104;
   HEAP32[(798596)>>2] = $86;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($86) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[199644]|0;
     $120 = $119 & $118;
     HEAP32[199644] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (798880 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(798580)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(798580)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($86) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(798596)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(798584)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($86) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (798616 + ($180<<2)|0);
  $182 = HEAP32[199644]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[199644] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (798880 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(798580)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(798580)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(798608)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(798608)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (799032);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(798608)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1246 = 0, $$1249 = 0, $$2 = 0, $$3 = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $not$ = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(799056)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = (($18) + ($16)|0);
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 | 1;
  HEAP32[$25>>2] = $27;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $28 = HEAP32[(798600)>>2]|0;
 $29 = ($5|0)==($28|0);
 if ($29) {
  $30 = HEAP32[(798588)>>2]|0;
  $31 = (($30) + ($4))|0;
  $32 = ($31>>>0)>($1>>>0);
  $33 = (($31) - ($1))|0;
  $34 = (($0) + ($1)|0);
  if (!($32)) {
   $$2 = 0;
   return ($$2|0);
  }
  $35 = $33 | 1;
  $36 = ((($34)) + 4|0);
  $37 = $3 & 1;
  $38 = $37 | $1;
  $39 = $38 | 2;
  HEAP32[$2>>2] = $39;
  HEAP32[$36>>2] = $35;
  HEAP32[(798600)>>2] = $34;
  HEAP32[(798588)>>2] = $33;
  $$2 = $0;
  return ($$2|0);
 }
 $40 = HEAP32[(798596)>>2]|0;
 $41 = ($5|0)==($40|0);
 if ($41) {
  $42 = HEAP32[(798584)>>2]|0;
  $43 = (($42) + ($4))|0;
  $44 = ($43>>>0)<($1>>>0);
  if ($44) {
   $$2 = 0;
   return ($$2|0);
  }
  $45 = (($43) - ($1))|0;
  $46 = ($45>>>0)>(15);
  $47 = $3 & 1;
  if ($46) {
   $48 = (($0) + ($1)|0);
   $49 = (($48) + ($45)|0);
   $50 = $47 | $1;
   $51 = $50 | 2;
   HEAP32[$2>>2] = $51;
   $52 = ((($48)) + 4|0);
   $53 = $45 | 1;
   HEAP32[$52>>2] = $53;
   HEAP32[$49>>2] = $45;
   $54 = ((($49)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 & -2;
   HEAP32[$54>>2] = $56;
   $storemerge = $48;$storemerge1 = $45;
  } else {
   $57 = $47 | $43;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($43)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(798584)>>2] = $storemerge1;
  HEAP32[(798596)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[199644]|0;
    $81 = $80 & $79;
    HEAP32[199644] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1246 = $97;$$1249 = $93;
      }
     } else {
      $$1246 = $95;$$1249 = $94;
     }
     while(1) {
      $99 = ((($$1246)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if (!($101)) {
       $$1246 = $100;$$1249 = $99;
       continue;
      }
      $102 = ((($$1246)) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0|0);
      if ($104) {
       break;
      } else {
       $$1246 = $103;$$1249 = $102;
      }
     }
     HEAP32[$$1249>>2] = 0;
     $$3 = $$1246;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (798880 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($5|0)==($109|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(798580)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(798580)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $not$ = ($116|0)!=($5|0);
     $$sink1 = $not$&1;
     $117 = (((($85)) + 16|0) + ($$sink1<<2)|0);
     HEAP32[$117>>2] = $$3;
     $118 = ($$3|0)==(0|0);
     if ($118) {
      break;
     }
    }
    $119 = ((($$3)) + 24|0);
    HEAP32[$119>>2] = $85;
    $120 = ((($5)) + 16|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ($121|0)==(0|0);
    if (!($122)) {
     $123 = ((($$3)) + 16|0);
     HEAP32[$123>>2] = $121;
     $124 = ((($121)) + 24|0);
     HEAP32[$124>>2] = $$3;
    }
    $125 = ((($120)) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(0|0);
    if (!($127)) {
     $128 = ((($$3)) + 20|0);
     HEAP32[$128>>2] = $126;
     $129 = ((($126)) + 24|0);
     HEAP32[$129>>2] = $$3;
    }
   }
  }
 } while(0);
 $130 = ($70>>>0)<(16);
 $131 = $3 & 1;
 if ($130) {
  $132 = $68 | $131;
  $133 = $132 | 2;
  HEAP32[$2>>2] = $133;
  $134 = (($0) + ($68)|0);
  $135 = ((($134)) + 4|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $136 | 1;
  HEAP32[$135>>2] = $137;
  $$2 = $0;
  return ($$2|0);
 } else {
  $138 = (($0) + ($1)|0);
  $139 = $131 | $1;
  $140 = $139 | 2;
  HEAP32[$2>>2] = $140;
  $141 = ((($138)) + 4|0);
  $142 = $70 | 3;
  HEAP32[$141>>2] = $142;
  $143 = (($138) + ($70)|0);
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $145 | 1;
  HEAP32[$144>>2] = $146;
  _dispose_chunk($138,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0366 = 0, $$0367 = 0, $$0378 = 0, $$0385 = 0, $$1 = 0, $$1365 = 0, $$1373 = 0, $$1376 = 0, $$1380 = 0, $$1384 = 0, $$2 = 0, $$3 = 0, $$3382 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $cond5 = 0, $not$ = 0, $not$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(798596)>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $74 = ((($2)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $75 & 3;
    $77 = ($76|0)==(3);
    if (!($77)) {
     $$1 = $11;$$1365 = $12;
     break;
    }
    $78 = (($11) + ($12)|0);
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $75 & -2;
    HEAP32[(798584)>>2] = $12;
    HEAP32[$74>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$78>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[199644]|0;
     $25 = $24 & $23;
     HEAP32[199644] = $25;
     $$1 = $11;$$1365 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1365 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1373 = $41;$$1376 = $37;
      }
     } else {
      $$1373 = $39;$$1376 = $38;
     }
     while(1) {
      $43 = ((($$1373)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if (!($45)) {
       $$1373 = $44;$$1376 = $43;
       continue;
      }
      $46 = ((($$1373)) + 16|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(0|0);
      if ($48) {
       break;
      } else {
       $$1373 = $47;$$1376 = $46;
      }
     }
     HEAP32[$$1376>>2] = 0;
     $$3 = $$1373;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1365 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (798880 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($11|0)==($53|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(798580)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(798580)>>2] = $58;
      $$1 = $11;$$1365 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $not$1 = ($60|0)!=($11|0);
     $$sink2 = $not$1&1;
     $61 = (((($29)) + 16|0) + ($$sink2<<2)|0);
     HEAP32[$61>>2] = $$3;
     $62 = ($$3|0)==(0|0);
     if ($62) {
      $$1 = $11;$$1365 = $12;
      break;
     }
    }
    $63 = ((($$3)) + 24|0);
    HEAP32[$63>>2] = $29;
    $64 = ((($11)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = ((($$3)) + 16|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($65)) + 24|0);
     HEAP32[$68>>2] = $$3;
    }
    $69 = ((($64)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $$1 = $11;$$1365 = $12;
    } else {
     $72 = ((($$3)) + 20|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
     $$1 = $11;$$1365 = $12;
    }
   }
  } else {
   $$1 = $0;$$1365 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(798600)>>2]|0;
  $87 = ($2|0)==($86|0);
  $88 = HEAP32[(798596)>>2]|0;
  if ($87) {
   $89 = HEAP32[(798588)>>2]|0;
   $90 = (($89) + ($$1365))|0;
   HEAP32[(798588)>>2] = $90;
   HEAP32[(798600)>>2] = $$1;
   $91 = $90 | 1;
   $92 = ((($$1)) + 4|0);
   HEAP32[$92>>2] = $91;
   $93 = ($$1|0)==($88|0);
   if (!($93)) {
    return;
   }
   HEAP32[(798596)>>2] = 0;
   HEAP32[(798584)>>2] = 0;
   return;
  }
  $94 = ($2|0)==($88|0);
  if ($94) {
   $95 = HEAP32[(798584)>>2]|0;
   $96 = (($95) + ($$1365))|0;
   HEAP32[(798584)>>2] = $96;
   HEAP32[(798596)>>2] = $$1;
   $97 = $96 | 1;
   $98 = ((($$1)) + 4|0);
   HEAP32[$98>>2] = $97;
   $99 = (($$1) + ($96)|0);
   HEAP32[$99>>2] = $96;
   return;
  }
  $100 = $83 & -8;
  $101 = (($100) + ($$1365))|0;
  $102 = $83 >>> 3;
  $103 = ($83>>>0)<(256);
  do {
   if ($103) {
    $104 = ((($2)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($2)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==($105|0);
    if ($108) {
     $109 = 1 << $102;
     $110 = $109 ^ -1;
     $111 = HEAP32[199644]|0;
     $112 = $111 & $110;
     HEAP32[199644] = $112;
     break;
    } else {
     $113 = ((($105)) + 12|0);
     HEAP32[$113>>2] = $107;
     $114 = ((($107)) + 8|0);
     HEAP32[$114>>2] = $105;
     break;
    }
   } else {
    $115 = ((($2)) + 24|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ((($2)) + 12|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)==($2|0);
    do {
     if ($119) {
      $124 = ((($2)) + 16|0);
      $125 = ((($124)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = ($126|0)==(0|0);
      if ($127) {
       $128 = HEAP32[$124>>2]|0;
       $129 = ($128|0)==(0|0);
       if ($129) {
        $$3382 = 0;
        break;
       } else {
        $$1380 = $128;$$1384 = $124;
       }
      } else {
       $$1380 = $126;$$1384 = $125;
      }
      while(1) {
       $130 = ((($$1380)) + 20|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = ($131|0)==(0|0);
       if (!($132)) {
        $$1380 = $131;$$1384 = $130;
        continue;
       }
       $133 = ((($$1380)) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)==(0|0);
       if ($135) {
        break;
       } else {
        $$1380 = $134;$$1384 = $133;
       }
      }
      HEAP32[$$1384>>2] = 0;
      $$3382 = $$1380;
     } else {
      $120 = ((($2)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ((($121)) + 12|0);
      HEAP32[$122>>2] = $118;
      $123 = ((($118)) + 8|0);
      HEAP32[$123>>2] = $121;
      $$3382 = $118;
     }
    } while(0);
    $136 = ($116|0)==(0|0);
    if (!($136)) {
     $137 = ((($2)) + 28|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (798880 + ($138<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($2|0)==($140|0);
     if ($141) {
      HEAP32[$139>>2] = $$3382;
      $cond5 = ($$3382|0)==(0|0);
      if ($cond5) {
       $142 = 1 << $138;
       $143 = $142 ^ -1;
       $144 = HEAP32[(798580)>>2]|0;
       $145 = $144 & $143;
       HEAP32[(798580)>>2] = $145;
       break;
      }
     } else {
      $146 = ((($116)) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $not$ = ($147|0)!=($2|0);
      $$sink4 = $not$&1;
      $148 = (((($116)) + 16|0) + ($$sink4<<2)|0);
      HEAP32[$148>>2] = $$3382;
      $149 = ($$3382|0)==(0|0);
      if ($149) {
       break;
      }
     }
     $150 = ((($$3382)) + 24|0);
     HEAP32[$150>>2] = $116;
     $151 = ((($2)) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(0|0);
     if (!($153)) {
      $154 = ((($$3382)) + 16|0);
      HEAP32[$154>>2] = $152;
      $155 = ((($152)) + 24|0);
      HEAP32[$155>>2] = $$3382;
     }
     $156 = ((($151)) + 4|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==(0|0);
     if (!($158)) {
      $159 = ((($$3382)) + 20|0);
      HEAP32[$159>>2] = $157;
      $160 = ((($157)) + 24|0);
      HEAP32[$160>>2] = $$3382;
     }
    }
   }
  } while(0);
  $161 = $101 | 1;
  $162 = ((($$1)) + 4|0);
  HEAP32[$162>>2] = $161;
  $163 = (($$1) + ($101)|0);
  HEAP32[$163>>2] = $101;
  $164 = HEAP32[(798596)>>2]|0;
  $165 = ($$1|0)==($164|0);
  if ($165) {
   HEAP32[(798584)>>2] = $101;
   return;
  } else {
   $$2 = $101;
  }
 } else {
  $166 = $83 & -2;
  HEAP32[$82>>2] = $166;
  $167 = $$1365 | 1;
  $168 = ((($$1)) + 4|0);
  HEAP32[$168>>2] = $167;
  $169 = (($$1) + ($$1365)|0);
  HEAP32[$169>>2] = $$1365;
  $$2 = $$1365;
 }
 $170 = $$2 >>> 3;
 $171 = ($$2>>>0)<(256);
 if ($171) {
  $172 = $170 << 1;
  $173 = (798616 + ($172<<2)|0);
  $174 = HEAP32[199644]|0;
  $175 = 1 << $170;
  $176 = $174 & $175;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $174 | $175;
   HEAP32[199644] = $178;
   $$pre = ((($173)) + 8|0);
   $$0385 = $173;$$pre$phiZ2D = $$pre;
  } else {
   $179 = ((($173)) + 8|0);
   $180 = HEAP32[$179>>2]|0;
   $$0385 = $180;$$pre$phiZ2D = $179;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $181 = ((($$0385)) + 12|0);
  HEAP32[$181>>2] = $$1;
  $182 = ((($$1)) + 8|0);
  HEAP32[$182>>2] = $$0385;
  $183 = ((($$1)) + 12|0);
  HEAP32[$183>>2] = $173;
  return;
 }
 $184 = $$2 >>> 8;
 $185 = ($184|0)==(0);
 if ($185) {
  $$0378 = 0;
 } else {
  $186 = ($$2>>>0)>(16777215);
  if ($186) {
   $$0378 = 31;
  } else {
   $187 = (($184) + 1048320)|0;
   $188 = $187 >>> 16;
   $189 = $188 & 8;
   $190 = $184 << $189;
   $191 = (($190) + 520192)|0;
   $192 = $191 >>> 16;
   $193 = $192 & 4;
   $194 = $193 | $189;
   $195 = $190 << $193;
   $196 = (($195) + 245760)|0;
   $197 = $196 >>> 16;
   $198 = $197 & 2;
   $199 = $194 | $198;
   $200 = (14 - ($199))|0;
   $201 = $195 << $198;
   $202 = $201 >>> 15;
   $203 = (($200) + ($202))|0;
   $204 = $203 << 1;
   $205 = (($203) + 7)|0;
   $206 = $$2 >>> $205;
   $207 = $206 & 1;
   $208 = $207 | $204;
   $$0378 = $208;
  }
 }
 $209 = (798880 + ($$0378<<2)|0);
 $210 = ((($$1)) + 28|0);
 HEAP32[$210>>2] = $$0378;
 $211 = ((($$1)) + 16|0);
 $212 = ((($$1)) + 20|0);
 HEAP32[$212>>2] = 0;
 HEAP32[$211>>2] = 0;
 $213 = HEAP32[(798580)>>2]|0;
 $214 = 1 << $$0378;
 $215 = $213 & $214;
 $216 = ($215|0)==(0);
 if ($216) {
  $217 = $213 | $214;
  HEAP32[(798580)>>2] = $217;
  HEAP32[$209>>2] = $$1;
  $218 = ((($$1)) + 24|0);
  HEAP32[$218>>2] = $209;
  $219 = ((($$1)) + 12|0);
  HEAP32[$219>>2] = $$1;
  $220 = ((($$1)) + 8|0);
  HEAP32[$220>>2] = $$1;
  return;
 }
 $221 = HEAP32[$209>>2]|0;
 $222 = ($$0378|0)==(31);
 $223 = $$0378 >>> 1;
 $224 = (25 - ($223))|0;
 $225 = $222 ? 0 : $224;
 $226 = $$2 << $225;
 $$0366 = $226;$$0367 = $221;
 while(1) {
  $227 = ((($$0367)) + 4|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $228 & -8;
  $230 = ($229|0)==($$2|0);
  if ($230) {
   label = 69;
   break;
  }
  $231 = $$0366 >>> 31;
  $232 = (((($$0367)) + 16|0) + ($231<<2)|0);
  $233 = $$0366 << 1;
  $234 = HEAP32[$232>>2]|0;
  $235 = ($234|0)==(0|0);
  if ($235) {
   label = 68;
   break;
  } else {
   $$0366 = $233;$$0367 = $234;
  }
 }
 if ((label|0) == 68) {
  HEAP32[$232>>2] = $$1;
  $236 = ((($$1)) + 24|0);
  HEAP32[$236>>2] = $$0367;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$1;
  return;
 }
 else if ((label|0) == 69) {
  $239 = ((($$0367)) + 8|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = ((($240)) + 12|0);
  HEAP32[$241>>2] = $$1;
  HEAP32[$239>>2] = $$1;
  $242 = ((($$1)) + 8|0);
  HEAP32[$242>>2] = $240;
  $243 = ((($$1)) + 12|0);
  HEAP32[$243>>2] = $$0367;
  $244 = ((($$1)) + 24|0);
  HEAP32[$244>>2] = 0;
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_65($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 3;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_645()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_645() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1680|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$25 = $17;
   while(1) {
    $26 = ($25|0)<(0);
    if ($26) {
     break;
    }
    $34 = (($$04855) - ($25))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($25>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($25) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$25 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _dummy_65($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (799072|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $$01926 = 0, $$01926$in = 0, $$020 = 0, $$025 = 0, $$lcssa = 0, $$lcssa22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = $4&255;
  $6 = ($4<<24>>24)==(0);
  $7 = HEAP8[$1>>0]|0;
  $8 = $7&255;
  L3: do {
   if ($6) {
    $$lcssa = $8;$$lcssa22 = $5;
   } else {
    $$01824 = $0;$$01926$in = $2;$$025 = $1;$12 = $4;$22 = $8;$23 = $5;$9 = $7;
    while(1) {
     $$01926 = (($$01926$in) + -1)|0;
     $10 = ($9<<24>>24)!=(0);
     $11 = ($$01926|0)!=(0);
     $or$cond = $11 & $10;
     $13 = ($12<<24>>24)==($9<<24>>24);
     $or$cond21 = $13 & $or$cond;
     if (!($or$cond21)) {
      $$lcssa = $22;$$lcssa22 = $23;
      break L3;
     }
     $14 = ((($$01824)) + 1|0);
     $15 = ((($$025)) + 1|0);
     $16 = HEAP8[$14>>0]|0;
     $17 = $16&255;
     $18 = ($16<<24>>24)==(0);
     $19 = HEAP8[$15>>0]|0;
     $20 = $19&255;
     if ($18) {
      $$lcssa = $20;$$lcssa22 = $17;
      break;
     } else {
      $$01824 = $14;$$01926$in = $$01926;$$025 = $15;$12 = $16;$22 = $20;$23 = $17;$9 = $19;
     }
    }
   }
  } while(0);
  $21 = (($$lcssa22) - ($$lcssa))|0;
  $$020 = $21;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=2396; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 7]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((29696 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 30160;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$247 = $212;$249 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 30160;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 30160 : (30162);
     $$$ = $238 ? $$ : (30161);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 30160;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 30160;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 30170;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_96($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 30160;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (30160 + ($208)|0);
    $$289 = $or$cond283 ? 30160 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$247 = $197;$249 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$247 = $242;$249 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 30160;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_96($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $248 = ($247|0)!=(0);
   $250 = ($249|0)!=(0);
   $251 = $248 | $250;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_96($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_96($0,32,$$2261,$312,$$6268);
  _out($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_96($0,48,$$2261,$312,$314);
  _pad_96($0,48,$$$5,$310,0);
  _out($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_96($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $324 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $325 = ($324|0)<(10);
      if ($325) {
       $$3303 = $324;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (30208 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_648()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad_96($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 30177;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (30178) : (30183);
  $$$ = $16 ? $$ : (30180);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (30208 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_96($0,32,$2,$104,$4);
    _out($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_96($0,48,$2,$104,$105);
    _out($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_96($0,48,$106,0,0);
    _out($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_96($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$121 = $$pr;
    while(1) {
     $122 = ($121|0)<(29);
     $123 = $122 ? $121 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$121 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_96($0,32,$2,$320,$4);
   _out($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_96($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out($0,30224,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_96($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out($0,30224,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_96($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_96($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 30196 : 30200;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 32393 : 30204;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_96($0,32,$2,$32,$33);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_96($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_202()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_202() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_648() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (30226 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 30314;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 30314;
  } else {
   $$01214 = 30314;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 7]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 7]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = ((($0)) + 108|0);
 HEAP32[$10>>2] = $9;
 $11 = ($1|0)!=(0);
 $12 = ($9|0)>($1|0);
 $or$cond = $11 & $12;
 $13 = (($6) + ($1)|0);
 $$sink = $or$cond ? $13 : $4;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = $$sink;
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0;
 var $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond187 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((32119) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)!=(0|0);
      if ($54) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if (!($54)) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((32119) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154222 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154222*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$7>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$6>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $$2161$be = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $$2161$be = $81;
        }
        $82 = (($$2161$be) + -48)|0;
        $83 = ($82>>>0)<(10);
        $84 = ($73>>>0)<(429496729);
        $85 = $83 & $84;
        if ($85) {
         $$0154222 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
      } else {
       $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
      }
      $86 = (($$2161$lcssa) + -48)|0;
      $87 = ($86>>>0)<(10);
      if ($87) {
       $$3162215 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
       while(1) {
        $90 = (___muldi3(($88|0),($89|0),10,0)|0);
        $91 = tempRet0;
        $93 = ($92|0)<(0);
        $94 = $93 << 31 >> 31;
        $95 = $92 ^ -1;
        $96 = $94 ^ -1;
        $97 = ($91>>>0)>($96>>>0);
        $98 = ($90>>>0)>($95>>>0);
        $99 = ($91|0)==($96|0);
        $100 = $99 & $98;
        $101 = $97 | $100;
        if ($101) {
         $$1165167 = 10;$$8 = $$3162215;$293 = $88;$294 = $89;
         label = 72;
         break L43;
        }
        $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
        $103 = tempRet0;
        $104 = HEAP32[$6>>2]|0;
        $105 = HEAP32[$7>>2]|0;
        $106 = ($104>>>0)<($105>>>0);
        if ($106) {
         $107 = ((($104)) + 1|0);
         HEAP32[$6>>2] = $107;
         $108 = HEAP8[$104>>0]|0;
         $109 = $108&255;
         $$3162$be = $109;
        } else {
         $110 = (___shgetc($0)|0);
         $$3162$be = $110;
        }
        $111 = (($$3162$be) + -48)|0;
        $112 = ($111>>>0)<(10);
        $113 = ($103>>>0)<(429496729);
        $114 = ($102>>>0)<(2576980378);
        $115 = ($103|0)==(429496729);
        $116 = $115 & $114;
        $117 = $113 | $116;
        $or$cond7 = $112 & $117;
        if ($or$cond7) {
         $$3162215 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
        } else {
         break;
        }
       }
       $118 = ($111>>>0)>(9);
       if ($118) {
        $$1158 = $$0157;$262 = $103;$264 = $102;
       } else {
        $$1165167 = 10;$$8 = $$3162$be;$293 = $102;$294 = $103;
        label = 72;
       }
      } else {
       $$1158 = $$0157;$262 = $292;$264 = $291;
      }
     } else {
      $$1160169 = $$1160;$$1165168 = $$1165;
      label = 46;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (32375 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((32119) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155192 = 0;$138 = $134;
       while(1) {
        $136 = $$1155192 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((32119) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155192 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond187 = $156 | $163;
      if ($or$cond187) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$293 = $159;$294 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((32119) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$293 = $170;$294 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((32119) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156210 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156210, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((32119) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156210 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$295 = $188;$296 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$295 = 0;$296 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7198 = $$6$lcssa;$208 = $296;$210 = $295;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7198;$293 = $210;$294 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((32119) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7198 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$293 = $225;$294 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$293 = $295;$294 = $296;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((32119) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((32119) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $294;$264 = $293;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28$phi$trans$insert = 0, $$pre = 0, $$pre$phi34Z2D = 0, $$pre29$pre = 0, $$pre35 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   if ($11) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $$phi$trans$insert28$phi$trans$insert = ((($0)) + 4|0);
    $$pre29$pre = HEAP32[$$phi$trans$insert28$phi$trans$insert>>2]|0;
    $$pre35 = ((($0)) + 108|0);
    $$pre$phi34Z2D = $$pre35;$$sink = $$pre;$25 = $$pre;$28 = $$pre29$pre;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($12) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $12;
    if ($20) {
     $$pre$phi34Z2D = $17;$$sink = $21;$25 = $21;$28 = $14;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $$pre$phi34Z2D = $17;$$sink = $23;$25 = $21;$28 = $14;
    }
   }
   $24 = ((($0)) + 100|0);
   HEAP32[$24>>2] = $$sink;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = $25;
    $29 = $28;
    $30 = HEAP32[$$pre$phi34Z2D>>2]|0;
    $31 = (($27) + 1)|0;
    $32 = (($31) - ($29))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$$pre$phi34Z2D>>2] = $33;
   }
   $34 = ((($28)) + -1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)==($7|0);
   if ($37) {
    $$0 = $7;
   } else {
    $38 = $7&255;
    HEAP8[$34>>0] = $38;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 7]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 7]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0;
 var $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    label = 3;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
    $$01824 = $1;$13 = $3;
    while(1) {
     $12 = $13 & 31;
     $14 = $12&255;
     $15 = 1 << $14;
     $div20 = ($13&255) >>> 5;
     $16 = $div20&255;
     $17 = (($2) + ($16<<2)|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $18 | $15;
     HEAP32[$17>>2] = $19;
     $20 = ((($$01824)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      break;
     } else {
      $$01824 = $20;$13 = $21;
     }
    }
    $10 = HEAP8[$0>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$019$sink = $0;
    } else {
     $$01922 = $0;$23 = $10;
     while(1) {
      $div = ($23&255) >>> 5;
      $24 = $div&255;
      $25 = (($2) + ($24<<2)|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $23 & 31;
      $28 = $27&255;
      $29 = 1 << $28;
      $30 = $26 & $29;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $$019$sink = $$01922;
       break L1;
      }
      $32 = ((($$01922)) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       $$019$sink = $32;
       break;
      } else {
       $$01922 = $32;$23 = $33;
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $$019$sink = $9;
 }
 $35 = $$019$sink;
 $36 = $0;
 $37 = (($35) - ($36))|0;
 STACKTOP = sp;return ($37|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$old8 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0113 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0113 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0113 = 1;
    }
    }
   } while(0);
   $$0107127 = 0;$$1128 = $$0;
   while(1) {
    $26 = $$1128 | 32;
    $27 = (32384 + ($$0107127)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$0107$lcssa = $$0107127;$$1$lcssa = $$1128;
     break;
    }
    $31 = ($$0107127>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1128;
     }
    } while(0);
    $39 = (($$0107127) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0107127 = $39;$$1128 = $$2;
    } else {
     $$0107$lcssa = $39;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($$0107$lcssa>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($$0107$lcssa|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $56 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($56) {
       $$2109125 = 0;$$3126 = $$1$lcssa;
       while(1) {
        $57 = $$3126 | 32;
        $58 = (32393 + ($$2109125)|0);
        $59 = HEAP8[$58>>0]|0;
        $60 = $59 << 24 >> 24;
        $61 = ($57|0)==($60|0);
        if (!($61)) {
         $$3110 = $$2109125;$$5 = $$3126;
         break L34;
        }
        $62 = ($$2109125>>>0)<(2);
        do {
         if ($62) {
          $63 = HEAP32[$3>>2]|0;
          $64 = HEAP32[$4>>2]|0;
          $65 = ($63>>>0)<($64>>>0);
          if ($65) {
           $66 = ((($63)) + 1|0);
           HEAP32[$3>>2] = $66;
           $67 = HEAP8[$63>>0]|0;
           $68 = $67&255;
           $$4 = $68;
           break;
          } else {
           $69 = (___shgetc($0)|0);
           $$4 = $69;
           break;
          }
         } else {
          $$4 = $$3126;
         }
        } while(0);
        $70 = (($$2109125) + 1)|0;
        $71 = ($70>>>0)<(3);
        if ($71) {
         $$2109125 = $70;$$3126 = $$4;
        } else {
         $$3110 = $70;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $72 = HEAP32[$3>>2]|0;
      $73 = HEAP32[$4>>2]|0;
      $74 = ($72>>>0)<($73>>>0);
      if ($74) {
       $75 = ((($72)) + 1|0);
       HEAP32[$3>>2] = $75;
       $76 = HEAP8[$72>>0]|0;
       $77 = $76&255;
       $79 = $77;
      } else {
       $78 = (___shgetc($0)|0);
       $79 = $78;
      }
      $80 = ($79|0)==(40);
      if ($80) {
       $$4111 = 1;
      } else {
       $81 = HEAP32[$4>>2]|0;
       $82 = ($81|0)==(0|0);
       if ($82) {
        $$0114 = nan;
        break L4;
       }
       $83 = HEAP32[$3>>2]|0;
       $84 = ((($83)) + -1|0);
       HEAP32[$3>>2] = $84;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $85 = HEAP32[$3>>2]|0;
       $86 = HEAP32[$4>>2]|0;
       $87 = ($85>>>0)<($86>>>0);
       if ($87) {
        $88 = ((($85)) + 1|0);
        HEAP32[$3>>2] = $88;
        $89 = HEAP8[$85>>0]|0;
        $90 = $89&255;
        $93 = $90;
       } else {
        $91 = (___shgetc($0)|0);
        $93 = $91;
       }
       $92 = (($93) + -48)|0;
       $94 = ($92>>>0)<(10);
       $95 = (($93) + -65)|0;
       $96 = ($95>>>0)<(26);
       $or$cond = $94 | $96;
       if (!($or$cond)) {
        $97 = (($93) + -97)|0;
        $98 = ($97>>>0)<(26);
        $99 = ($93|0)==(95);
        $or$cond7 = $99 | $98;
        if (!($or$cond7)) {
         break;
        }
       }
       $111 = (($$4111) + 1)|0;
       $$4111 = $111;
      }
      $100 = ($93|0)==(41);
      if ($100) {
       $$0114 = nan;
       break L4;
      }
      $101 = HEAP32[$4>>2]|0;
      $102 = ($101|0)==(0|0);
      if (!($102)) {
       $103 = HEAP32[$3>>2]|0;
       $104 = ((($103)) + -1|0);
       HEAP32[$3>>2] = $104;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $105 = ($$4111|0)==(0);
      if ($105) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $107 = (($$in) + -1)|0;
       if (!($102)) {
        $108 = HEAP32[$3>>2]|0;
        $109 = ((($108)) + -1|0);
        HEAP32[$3>>2] = $109;
       }
       $110 = ($107|0)==(0);
       if ($110) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $107;
       }
      }
      break;
     }
     case 0:  {
      $117 = ($$5|0)==(48);
      if ($117) {
       $118 = HEAP32[$3>>2]|0;
       $119 = HEAP32[$4>>2]|0;
       $120 = ($118>>>0)<($119>>>0);
       if ($120) {
        $121 = ((($118)) + 1|0);
        HEAP32[$3>>2] = $121;
        $122 = HEAP8[$118>>0]|0;
        $123 = $122&255;
        $126 = $123;
       } else {
        $124 = (___shgetc($0)|0);
        $126 = $124;
       }
       $125 = $126 | 32;
       $127 = ($125|0)==(120);
       if ($127) {
        $128 = (+_hexfloat($0,$$0106$ph,$$0105$ph,$$0113,$2));
        $$0114 = $128;
        break L4;
       }
       $129 = HEAP32[$4>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$6 = 48;
       } else {
        $131 = HEAP32[$3>>2]|0;
        $132 = ((($131)) + -1|0);
        HEAP32[$3>>2] = $132;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $133 = (+_decfloat($0,$$6,$$0106$ph,$$0105$ph,$$0113,$2));
      $$0114 = $133;
      break L4;
      break;
     }
     default: {
      $112 = HEAP32[$4>>2]|0;
      $113 = ($112|0)==(0|0);
      if (!($113)) {
       $114 = HEAP32[$3>>2]|0;
       $115 = ((($114)) + -1|0);
       HEAP32[$3>>2] = $115;
      }
      $116 = (___errno_location()|0);
      HEAP32[$116>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $48 & $49;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1108) + -1)|0;
      $$old8 = ($52>>>0)>(3);
      if ($$old8) {
       $$1108 = $52;
      } else {
       break;
      }
     }
    }
   }
   $53 = (+($$0113|0));
   $54 = $53 * inf;
   $55 = $54;
   $$0114 = $55;
  }
 } while(0);
 return (+$$0114);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0148$ = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0155$ = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0;
 var $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5 = 0.0, $$5164 = 0, $$6 = 0, $$pn = 0.0;
 var $$pre = 0.0, $$pre$phiZ2D = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0.0;
 var $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0.0;
 var $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond168 = 0, $or$cond206 = 0, $or$cond4 = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0 = $12;$$0142 = 0;
 } else {
  $13 = (___shgetc($0)|0);
  $$0 = $13;$$0142 = 0;
 }
 L4: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 8;
   break L4;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0146 = 0;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$0;$$2144 = $$0142;$100 = 0;$52 = 0;$54 = 0;$98 = 0;
   break L4;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0 = $19;$$0142 = 1;
   continue;
  } else {
   $20 = (___shgetc($0)|0);
   $$0 = $20;$$0142 = 1;
   continue;
  }
 }
 if ((label|0) == 8) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $$1$ph = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $$1$ph = $27;
  }
  $28 = ($$1$ph|0)==(48);
  if ($28) {
   $36 = 0;$37 = 0;
   while(1) {
    $29 = HEAP32[$5>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$5>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $40 = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $40 = $35;
    }
    $38 = (_i64Add(($36|0),($37|0),-1,-1)|0);
    $39 = tempRet0;
    $41 = ($40|0)==(48);
    if ($41) {
     $36 = $38;$37 = $39;
    } else {
     $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $40;$$2144 = 1;$100 = $39;$52 = 0;$54 = 0;$98 = $38;
     break;
    }
   }
  } else {
   $$0146 = 1;$$0148 = 0;$$0152 = 1.0;$$0155 = 0.0;$$0159 = 0;$$2 = $$1$ph;$$2144 = $$0142;$100 = 0;$52 = 0;$54 = 0;$98 = 0;
  }
 }
 while(1) {
  $42 = (($$2) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($$2|0)==(46);
  if (!($43)) {
   $45 = $$2 | 32;
   $46 = (($45) + -97)|0;
   $47 = ($46>>>0)<(6);
   $or$cond6 = $44 | $47;
   if (!($or$cond6)) {
    $$2$lcssa = $$2;
    break;
   }
  }
  if ($44) {
   $48 = ($$0146|0)==(0);
   if ($48) {
    $$1147 = 1;$$2150 = $$0148;$$2154 = $$0152;$$2157 = $$0155;$$2161 = $$0159;$$3145 = $$2144;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
   } else {
    $$2$lcssa = 46;
    break;
   }
  } else {
   $49 = ($$2|0)>(57);
   $50 = $$2 | 32;
   $51 = (($50) + -87)|0;
   $$0133 = $49 ? $51 : $42;
   $53 = ($52|0)<(0);
   $55 = ($54>>>0)<(8);
   $56 = ($52|0)==(0);
   $57 = $56 & $55;
   $58 = $53 | $57;
   do {
    if ($58) {
     $59 = $$0159 << 4;
     $60 = (($$0133) + ($59))|0;
     $$1149 = $$0148;$$1153 = $$0152;$$1156 = $$0155;$$1160 = $60;
    } else {
     $61 = ($52|0)<(0);
     $62 = ($54>>>0)<(14);
     $63 = ($52|0)==(0);
     $64 = $63 & $62;
     $65 = $61 | $64;
     if ($65) {
      $66 = (+($$0133|0));
      $67 = $$0152 * 0.0625;
      $68 = $67 * $66;
      $69 = $$0155 + $68;
      $$1149 = $$0148;$$1153 = $67;$$1156 = $69;$$1160 = $$0159;
      break;
     } else {
      $70 = ($$0133|0)==(0);
      $71 = ($$0148|0)!=(0);
      $or$cond = $71 | $70;
      $72 = $$0152 * 0.5;
      $73 = $$0155 + $72;
      $$0155$ = $or$cond ? $$0155 : $73;
      $$0148$ = $or$cond ? $$0148 : 1;
      $$1149 = $$0148$;$$1153 = $$0152;$$1156 = $$0155$;$$1160 = $$0159;
      break;
     }
    }
   } while(0);
   $74 = (_i64Add(($54|0),($52|0),1,0)|0);
   $75 = tempRet0;
   $$1147 = $$0146;$$2150 = $$1149;$$2154 = $$1153;$$2157 = $$1156;$$2161 = $$1160;$$3145 = 1;$214 = $98;$215 = $100;$216 = $74;$217 = $75;
  }
  $76 = HEAP32[$5>>2]|0;
  $77 = HEAP32[$7>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $79 = ((($76)) + 1|0);
   HEAP32[$5>>2] = $79;
   $80 = HEAP8[$76>>0]|0;
   $81 = $80&255;
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $81;$$2144 = $$3145;$100 = $215;$52 = $217;$54 = $216;$98 = $214;
   continue;
  } else {
   $82 = (___shgetc($0)|0);
   $$0146 = $$1147;$$0148 = $$2150;$$0152 = $$2154;$$0155 = $$2157;$$0159 = $$2161;$$2 = $82;$$2144 = $$3145;$100 = $215;$52 = $217;$54 = $216;$98 = $214;
   continue;
  }
 }
 $83 = ($$2144|0)==(0);
 do {
  if ($83) {
   $84 = HEAP32[$7>>2]|0;
   $85 = ($84|0)!=(0|0);
   if ($85) {
    $86 = HEAP32[$5>>2]|0;
    $87 = ((($86)) + -1|0);
    HEAP32[$5>>2] = $87;
   }
   $88 = ($4|0)==(0);
   if ($88) {
    ___shlim($0,0);
   } else {
    if ($85) {
     $89 = HEAP32[$5>>2]|0;
     $90 = ((($89)) + -1|0);
     HEAP32[$5>>2] = $90;
    }
    $91 = ($$0146|0)==(0);
    $92 = ($84|0)==(0|0);
    $or$cond206 = $91 | $92;
    if (!($or$cond206)) {
     $93 = HEAP32[$5>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$5>>2] = $94;
    }
   }
   $95 = (+($3|0));
   $96 = $95 * 0.0;
   $$0165 = $96;
  } else {
   $97 = ($$0146|0)==(0);
   $99 = $97 ? $54 : $98;
   $101 = $97 ? $52 : $100;
   $102 = ($52|0)<(0);
   $103 = ($54>>>0)<(8);
   $104 = ($52|0)==(0);
   $105 = $104 & $103;
   $106 = $102 | $105;
   if ($106) {
    $$3162183 = $$0159;$108 = $54;$109 = $52;
    while(1) {
     $107 = $$3162183 << 4;
     $110 = (_i64Add(($108|0),($109|0),1,0)|0);
     $111 = tempRet0;
     $112 = ($111|0)<(0);
     $113 = ($110>>>0)<(8);
     $114 = ($111|0)==(0);
     $115 = $114 & $113;
     $116 = $112 | $115;
     if ($116) {
      $$3162183 = $107;$108 = $110;$109 = $111;
     } else {
      $$3162$lcssa = $107;
      break;
     }
    }
   } else {
    $$3162$lcssa = $$0159;
   }
   $117 = $$2$lcssa | 32;
   $118 = ($117|0)==(112);
   if ($118) {
    $119 = (_scanexp($0,$4)|0);
    $120 = tempRet0;
    $121 = ($119|0)==(0);
    $122 = ($120|0)==(-2147483648);
    $123 = $121 & $122;
    if ($123) {
     $124 = ($4|0)==(0);
     if ($124) {
      ___shlim($0,0);
      $$0165 = 0.0;
      break;
     }
     $125 = HEAP32[$7>>2]|0;
     $126 = ($125|0)==(0|0);
     if ($126) {
      $137 = 0;$138 = 0;
     } else {
      $127 = HEAP32[$5>>2]|0;
      $128 = ((($127)) + -1|0);
      HEAP32[$5>>2] = $128;
      $137 = 0;$138 = 0;
     }
    } else {
     $137 = $119;$138 = $120;
    }
   } else {
    $129 = HEAP32[$7>>2]|0;
    $130 = ($129|0)==(0|0);
    if ($130) {
     $137 = 0;$138 = 0;
    } else {
     $131 = HEAP32[$5>>2]|0;
     $132 = ((($131)) + -1|0);
     HEAP32[$5>>2] = $132;
     $137 = 0;$138 = 0;
    }
   }
   $133 = (_bitshift64Shl(($99|0),($101|0),2)|0);
   $134 = tempRet0;
   $135 = (_i64Add(($133|0),($134|0),-32,-1)|0);
   $136 = tempRet0;
   $139 = (_i64Add(($135|0),($136|0),($137|0),($138|0))|0);
   $140 = tempRet0;
   $141 = ($$3162$lcssa|0)==(0);
   if ($141) {
    $142 = (+($3|0));
    $143 = $142 * 0.0;
    $$0165 = $143;
    break;
   }
   $144 = (0 - ($2))|0;
   $145 = ($144|0)<(0);
   $146 = $145 << 31 >> 31;
   $147 = ($140|0)>($146|0);
   $148 = ($139>>>0)>($144>>>0);
   $149 = ($140|0)==($146|0);
   $150 = $149 & $148;
   $151 = $147 | $150;
   if ($151) {
    $152 = (___errno_location()|0);
    HEAP32[$152>>2] = 34;
    $153 = (+($3|0));
    $154 = $153 * 1.7976931348623157E+308;
    $155 = $154 * 1.7976931348623157E+308;
    $$0165 = $155;
    break;
   }
   $156 = (($2) + -106)|0;
   $157 = ($156|0)<(0);
   $158 = $157 << 31 >> 31;
   $159 = ($140|0)<($158|0);
   $160 = ($139>>>0)<($156>>>0);
   $161 = ($140|0)==($158|0);
   $162 = $161 & $160;
   $163 = $159 | $162;
   if ($163) {
    $165 = (___errno_location()|0);
    HEAP32[$165>>2] = 34;
    $166 = (+($3|0));
    $167 = $166 * 2.2250738585072014E-308;
    $168 = $167 * 2.2250738585072014E-308;
    $$0165 = $168;
    break;
   }
   $164 = ($$3162$lcssa|0)>(-1);
   if ($164) {
    $$3158179 = $$0155;$$4163178 = $$3162$lcssa;$173 = $139;$174 = $140;
    while(1) {
     $169 = !($$3158179 >= 0.5);
     $170 = $$4163178 << 1;
     $171 = $$3158179 + -1.0;
     $not$ = $169 ^ 1;
     $172 = $not$&1;
     $$5164 = $170 | $172;
     $$pn = $169 ? $$3158179 : $171;
     $$4 = $$3158179 + $$pn;
     $175 = (_i64Add(($173|0),($174|0),-1,-1)|0);
     $176 = tempRet0;
     $177 = ($$5164|0)>(-1);
     if ($177) {
      $$3158179 = $$4;$$4163178 = $$5164;$173 = $175;$174 = $176;
     } else {
      $$3158$lcssa = $$4;$$4163$lcssa = $$5164;$184 = $175;$185 = $176;
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155;$$4163$lcssa = $$3162$lcssa;$184 = $139;$185 = $140;
   }
   $178 = ($1|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = ($2|0)<(0);
   $181 = $180 << 31 >> 31;
   $182 = (_i64Subtract(32,0,($2|0),($181|0))|0);
   $183 = tempRet0;
   $186 = (_i64Add(($182|0),($183|0),($184|0),($185|0))|0);
   $187 = tempRet0;
   $188 = ($179|0)>($187|0);
   $189 = ($1>>>0)>($186>>>0);
   $190 = ($179|0)==($187|0);
   $191 = $190 & $189;
   $192 = $188 | $191;
   if ($192) {
    $193 = ($186|0)>(0);
    if ($193) {
     $$0166 = $186;
     label = 59;
    } else {
     $$0166170 = 0;$197 = 84;
     label = 61;
    }
   } else {
    $$0166 = $1;
    label = 59;
   }
   if ((label|0) == 59) {
    $194 = ($$0166|0)<(53);
    $195 = (84 - ($$0166))|0;
    if ($194) {
     $$0166170 = $$0166;$197 = $195;
     label = 61;
    } else {
     $$pre = (+($3|0));
     $$0151 = 0.0;$$0166169 = $$0166;$$pre$phiZ2D = $$pre;
    }
   }
   if ((label|0) == 61) {
    $196 = (+($3|0));
    $198 = (+_scalbn(1.0,$197));
    $199 = (+_copysignl($198,$196));
    $$0151 = $199;$$0166169 = $$0166170;$$pre$phiZ2D = $196;
   }
   $200 = ($$0166169|0)<(32);
   $201 = $$3158$lcssa != 0.0;
   $or$cond4 = $201 & $200;
   $202 = $$4163$lcssa & 1;
   $203 = ($202|0)==(0);
   $or$cond168 = $203 & $or$cond4;
   $204 = $or$cond168&1;
   $$6 = (($204) + ($$4163$lcssa))|0;
   $$5 = $or$cond168 ? 0.0 : $$3158$lcssa;
   $205 = (+($$6>>>0));
   $206 = $$pre$phiZ2D * $205;
   $207 = $$0151 + $206;
   $208 = $$pre$phiZ2D * $$5;
   $209 = $208 + $207;
   $210 = $209 - $$0151;
   $211 = $210 != 0.0;
   if (!($211)) {
    $212 = (___errno_location()|0);
    HEAP32[$212>>2] = 34;
   }
   $213 = (+_scalbnl($210,$184));
   $$0165 = $213;
  }
 } while(0);
 return (+$$0165);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$0345 = 0, $$$0350 = 0, $$$0385 = 0, $$$0401 = 0, $$$5355 = 0, $$$5390 = 0, $$0329 = 0, $$0332490 = 0, $$0333 = 0, $$0334 = 0, $$0336486 = 0, $$0340496 = 0, $$0341$lcssa = 0, $$0341463 = 0, $$0341464 = 0, $$0341465 = 0, $$0341513 = 0, $$0345$lcssa = 0, $$0345467 = 0;
 var $$0345468 = 0, $$0345469 = 0, $$0345512 = 0, $$0350$lcssa554 = 0, $$0350494 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365484 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa553 = 0, $$0385493 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401473 = 0, $$0401474 = 0, $$0401475 = 0, $$0401509 = 0;
 var $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph448 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph558 = 0, $$1394$lcssa = 0, $$1394511 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph449 = 0, $$2367 = 0.0;
 var $$2371$v = 0, $$2374 = 0, $$2387$ph447 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344503 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3375 = 0, $$3383 = 0, $$3399$lcssa = 0, $$3399510 = 0, $$3514 = 0, $$413 = 0, $$425 = 0, $$4349495 = 0;
 var $$4354 = 0, $$4354$ph = 0, $$4354$ph559 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph445 = 0, $$4400 = 0, $$4485 = 0, $$5 = 0, $$5$in = 0, $$5355488 = 0, $$5390487 = 0, $$6378$ph = 0, $$6489 = 0, $$9483 = 0, $$neg442 = 0, $$neg443 = 0, $$pre = 0, $$promoted = 0;
 var $$sink = 0, $$sink421$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0, $305 = 0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0.0, $335 = 0.0, $336 = 0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0;
 var $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $exitcond = 0, $exitcond551 = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0, $or$cond415 = 0, $or$cond417 = 0, $or$cond419 = 0, $or$cond420 = 0, $or$cond422 = 0, $or$cond422$not = 0, $or$cond423 = 0, $or$cond426 = 0, $or$cond5 = 0, $sum = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $6 = sp;
 $sum = (($3) + ($2))|0;
 $7 = (0 - ($sum))|0;
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 100|0);
 $$0329 = $1;$$0396 = 0;
 L1: while(1) {
  switch ($$0329|0) {
  case 46:  {
   label = 6;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0393 = 0;$$2 = $$0329;$$2398 = $$0396;$366 = 0;$367 = 0;
   break L1;
  }
  }
  $10 = HEAP32[$8>>2]|0;
  $11 = HEAP32[$9>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = ((($10)) + 1|0);
   HEAP32[$8>>2] = $13;
   $14 = HEAP8[$10>>0]|0;
   $15 = $14&255;
   $$0329 = $15;$$0396 = 1;
   continue;
  } else {
   $16 = (___shgetc($0)|0);
   $$0329 = $16;$$0396 = 1;
   continue;
  }
 }
 if ((label|0) == 6) {
  $17 = HEAP32[$8>>2]|0;
  $18 = HEAP32[$9>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $20 = ((($17)) + 1|0);
   HEAP32[$8>>2] = $20;
   $21 = HEAP8[$17>>0]|0;
   $22 = $21&255;
   $$1330$ph = $22;
  } else {
   $23 = (___shgetc($0)|0);
   $$1330$ph = $23;
  }
  $24 = ($$1330$ph|0)==(48);
  if ($24) {
   $25 = 0;$26 = 0;
   while(1) {
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$9>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = ((($29)) + 1|0);
     HEAP32[$8>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $$1330$be = $34;
    } else {
     $35 = (___shgetc($0)|0);
     $$1330$be = $35;
    }
    $36 = ($$1330$be|0)==(48);
    if ($36) {
     $25 = $27;$26 = $28;
    } else {
     $$0393 = 1;$$2 = $$1330$be;$$2398 = 1;$366 = $27;$367 = $28;
     break;
    }
   }
  } else {
   $$0393 = 1;$$2 = $$1330$ph;$$2398 = $$0396;$366 = 0;$367 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $37 = (($$2) + -48)|0;
 $38 = ($37>>>0)<(10);
 $39 = ($$2|0)==(46);
 $40 = $39 | $38;
 L20: do {
  if ($40) {
   $41 = ((($6)) + 496|0);
   $$0341513 = 0;$$0345512 = 0;$$0401509 = 0;$$1394511 = $$0393;$$3399510 = $$2398;$$3514 = $$2;$368 = $39;$369 = $37;$370 = $366;$371 = $367;$44 = 0;$45 = 0;
   L22: while(1) {
    do {
     if ($368) {
      $cond = ($$1394511|0)==(0);
      if ($cond) {
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = 1;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $44;$373 = $45;$374 = $44;$375 = $45;
      } else {
       break L22;
      }
     } else {
      $43 = ($$0345512|0)<(125);
      $46 = (_i64Add(($44|0),($45|0),1,0)|0);
      $47 = tempRet0;
      $48 = ($$3514|0)!=(48);
      if (!($43)) {
       if (!($48)) {
        $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
        break;
       }
       $57 = HEAP32[$41>>2]|0;
       $58 = $57 | 1;
       HEAP32[$41>>2] = $58;
       $$2343 = $$0341513;$$2347 = $$0345512;$$2395 = $$1394511;$$2403 = $$0401509;$$4400 = $$3399510;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
       break;
      }
      $$$0401 = $48 ? $46 : $$0401509;
      $49 = ($$0341513|0)==(0);
      $$pre = (($6) + ($$0345512<<2)|0);
      if ($49) {
       $$sink = $369;
      } else {
       $50 = HEAP32[$$pre>>2]|0;
       $51 = ($50*10)|0;
       $52 = (($$3514) + -48)|0;
       $53 = (($52) + ($51))|0;
       $$sink = $53;
      }
      HEAP32[$$pre>>2] = $$sink;
      $54 = (($$0341513) + 1)|0;
      $55 = ($54|0)==(9);
      $56 = $55&1;
      $$$0345 = (($56) + ($$0345512))|0;
      $$413 = $55 ? 0 : $54;
      $$2343 = $$413;$$2347 = $$$0345;$$2395 = $$1394511;$$2403 = $$$0401;$$4400 = 1;$372 = $370;$373 = $371;$374 = $46;$375 = $47;
     }
    } while(0);
    $59 = HEAP32[$8>>2]|0;
    $60 = HEAP32[$9>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if ($61) {
     $62 = ((($59)) + 1|0);
     HEAP32[$8>>2] = $62;
     $63 = HEAP8[$59>>0]|0;
     $64 = $63&255;
     $$3$be = $64;
    } else {
     $65 = (___shgetc($0)|0);
     $$3$be = $65;
    }
    $66 = (($$3$be) + -48)|0;
    $67 = ($66>>>0)<(10);
    $68 = ($$3$be|0)==(46);
    $69 = $68 | $67;
    if ($69) {
     $$0341513 = $$2343;$$0345512 = $$2347;$$0401509 = $$2403;$$1394511 = $$2395;$$3399510 = $$4400;$$3514 = $$3$be;$368 = $68;$369 = $66;$370 = $372;$371 = $373;$44 = $374;$45 = $375;
    } else {
     $$0341$lcssa = $$2343;$$0345$lcssa = $$2347;$$0401$lcssa = $$2403;$$1394$lcssa = $$2395;$$3$lcssa = $$3$be;$$3399$lcssa = $$4400;$71 = $372;$72 = $374;$74 = $373;$75 = $375;
     label = 29;
     break L20;
    }
   }
   $42 = ($$3399510|0)!=(0);
   $$0341465 = $$0341513;$$0345469 = $$0345512;$$0401475 = $$0401509;$376 = $44;$377 = $45;$378 = $370;$379 = $371;$380 = $42;
   label = 37;
  } else {
   $$0341$lcssa = 0;$$0345$lcssa = 0;$$0401$lcssa = 0;$$1394$lcssa = $$0393;$$3$lcssa = $$2;$$3399$lcssa = $$2398;$71 = $366;$72 = 0;$74 = $367;$75 = 0;
   label = 29;
  }
 } while(0);
 do {
  if ((label|0) == 29) {
   $70 = ($$1394$lcssa|0)==(0);
   $73 = $70 ? $72 : $71;
   $76 = $70 ? $75 : $74;
   $77 = ($$3399$lcssa|0)!=(0);
   $78 = $$3$lcssa | 32;
   $79 = ($78|0)==(101);
   $or$cond415 = $77 & $79;
   if (!($or$cond415)) {
    $94 = ($$3$lcssa|0)>(-1);
    if ($94) {
     $$0341465 = $$0341$lcssa;$$0345469 = $$0345$lcssa;$$0401475 = $$0401$lcssa;$376 = $72;$377 = $75;$378 = $73;$379 = $76;$380 = $77;
     label = 37;
     break;
    } else {
     $$0341464 = $$0341$lcssa;$$0345468 = $$0345$lcssa;$$0401474 = $$0401$lcssa;$381 = $72;$382 = $75;$383 = $77;$384 = $73;$385 = $76;
     label = 39;
     break;
    }
   }
   $80 = (_scanexp($0,$5)|0);
   $81 = tempRet0;
   $82 = ($80|0)==(0);
   $83 = ($81|0)==(-2147483648);
   $84 = $82 & $83;
   if ($84) {
    $85 = ($5|0)==(0);
    if ($85) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $86 = HEAP32[$9>>2]|0;
    $87 = ($86|0)==(0|0);
    if ($87) {
     $90 = 0;$91 = 0;
    } else {
     $88 = HEAP32[$8>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$8>>2] = $89;
     $90 = 0;$91 = 0;
    }
   } else {
    $90 = $80;$91 = $81;
   }
   $92 = (_i64Add(($90|0),($91|0),($73|0),($76|0))|0);
   $93 = tempRet0;
   $$0341463 = $$0341$lcssa;$$0345467 = $$0345$lcssa;$$0401473 = $$0401$lcssa;$104 = $92;$106 = $72;$107 = $93;$109 = $75;
   label = 41;
  }
 } while(0);
 if ((label|0) == 37) {
  $95 = HEAP32[$9>>2]|0;
  $96 = ($95|0)==(0|0);
  if ($96) {
   $$0341464 = $$0341465;$$0345468 = $$0345469;$$0401474 = $$0401475;$381 = $376;$382 = $377;$383 = $380;$384 = $378;$385 = $379;
   label = 39;
  } else {
   $97 = HEAP32[$8>>2]|0;
   $98 = ((($97)) + -1|0);
   HEAP32[$8>>2] = $98;
   if ($380) {
    $$0341463 = $$0341465;$$0345467 = $$0345469;$$0401473 = $$0401475;$104 = $378;$106 = $376;$107 = $379;$109 = $377;
    label = 41;
   } else {
    label = 40;
   }
  }
 }
 if ((label|0) == 39) {
  if ($383) {
   $$0341463 = $$0341464;$$0345467 = $$0345468;$$0401473 = $$0401474;$104 = $384;$106 = $381;$107 = $385;$109 = $382;
   label = 41;
  } else {
   label = 40;
  }
 }
 do {
  if ((label|0) == 40) {
   $99 = (___errno_location()|0);
   HEAP32[$99>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 41) {
   $100 = HEAP32[$6>>2]|0;
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (+($4|0));
    $103 = $102 * 0.0;
    $$1 = $103;
    break;
   }
   $105 = ($104|0)==($106|0);
   $108 = ($107|0)==($109|0);
   $110 = $105 & $108;
   $111 = ($109|0)<(0);
   $112 = ($106>>>0)<(10);
   $113 = ($109|0)==(0);
   $114 = $113 & $112;
   $115 = $111 | $114;
   $or$cond = $115 & $110;
   if ($or$cond) {
    $116 = ($2|0)>(30);
    $117 = $100 >>> $2;
    $118 = ($117|0)==(0);
    $or$cond417 = $116 | $118;
    if ($or$cond417) {
     $119 = (+($4|0));
     $120 = (+($100>>>0));
     $121 = $119 * $120;
     $$1 = $121;
     break;
    }
   }
   $122 = (($3|0) / -2)&-1;
   $123 = ($122|0)<(0);
   $124 = $123 << 31 >> 31;
   $125 = ($107|0)>($124|0);
   $126 = ($104>>>0)>($122>>>0);
   $127 = ($107|0)==($124|0);
   $128 = $127 & $126;
   $129 = $125 | $128;
   if ($129) {
    $130 = (___errno_location()|0);
    HEAP32[$130>>2] = 34;
    $131 = (+($4|0));
    $132 = $131 * 1.7976931348623157E+308;
    $133 = $132 * 1.7976931348623157E+308;
    $$1 = $133;
    break;
   }
   $134 = (($3) + -106)|0;
   $135 = ($134|0)<(0);
   $136 = $135 << 31 >> 31;
   $137 = ($107|0)<($136|0);
   $138 = ($104>>>0)<($134>>>0);
   $139 = ($107|0)==($136|0);
   $140 = $139 & $138;
   $141 = $137 | $140;
   if ($141) {
    $142 = (___errno_location()|0);
    HEAP32[$142>>2] = 34;
    $143 = (+($4|0));
    $144 = $143 * 2.2250738585072014E-308;
    $145 = $144 * 2.2250738585072014E-308;
    $$1 = $145;
    break;
   }
   $146 = ($$0341463|0)==(0);
   if ($146) {
    $$3348 = $$0345467;
   } else {
    $147 = ($$0341463|0)<(9);
    if ($147) {
     $148 = (($6) + ($$0345467<<2)|0);
     $$promoted = HEAP32[$148>>2]|0;
     $$3344503 = $$0341463;$150 = $$promoted;
     while(1) {
      $149 = ($150*10)|0;
      $151 = (($$3344503) + 1)|0;
      $exitcond551 = ($151|0)==(9);
      if ($exitcond551) {
       break;
      } else {
       $$3344503 = $151;$150 = $149;
      }
     }
     HEAP32[$148>>2] = $149;
    }
    $152 = (($$0345467) + 1)|0;
    $$3348 = $152;
   }
   $153 = ($$0401473|0)<(9);
   if ($153) {
    $154 = ($$0401473|0)<=($104|0);
    $155 = ($104|0)<(18);
    $or$cond5 = $154 & $155;
    if ($or$cond5) {
     $156 = ($104|0)==(9);
     $157 = HEAP32[$6>>2]|0;
     if ($156) {
      $158 = (+($4|0));
      $159 = (+($157>>>0));
      $160 = $158 * $159;
      $$1 = $160;
      break;
     }
     $161 = ($104|0)<(9);
     if ($161) {
      $162 = (+($4|0));
      $163 = (+($157>>>0));
      $164 = $162 * $163;
      $165 = (8 - ($104))|0;
      $166 = (2520 + ($165<<2)|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (+($167|0));
      $169 = $164 / $168;
      $$1 = $169;
      break;
     }
     $$neg442 = Math_imul($104, -3)|0;
     $$neg443 = (($2) + 27)|0;
     $170 = (($$neg443) + ($$neg442))|0;
     $171 = ($170|0)>(30);
     $172 = $157 >>> $170;
     $173 = ($172|0)==(0);
     $or$cond419 = $171 | $173;
     if ($or$cond419) {
      $174 = (($104) + -10)|0;
      $175 = (2520 + ($174<<2)|0);
      $176 = (+($4|0));
      $177 = (+($157>>>0));
      $178 = $176 * $177;
      $179 = HEAP32[$175>>2]|0;
      $180 = (+($179|0));
      $181 = $178 * $180;
      $$1 = $181;
      break;
     }
    }
   }
   $182 = (($104|0) % 9)&-1;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0380$ph = 0;$$1373$ph448 = $$3348;$$2352$ph449 = 0;$$2387$ph447 = $104;
   } else {
    $184 = ($104|0)>(-1);
    $185 = (($182) + 9)|0;
    $186 = $184 ? $182 : $185;
    $187 = (8 - ($186))|0;
    $188 = (2520 + ($187<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = ($$3348|0)==(0);
    if ($190) {
     $$0350$lcssa554 = 0;$$0372 = 0;$$0385$lcssa553 = $104;
    } else {
     $191 = (1000000000 / ($189|0))&-1;
     $$0340496 = 0;$$0350494 = 0;$$0385493 = $104;$$4349495 = 0;
     while(1) {
      $192 = (($6) + ($$4349495<<2)|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = (($193>>>0) % ($189>>>0))&-1;
      $195 = (($193>>>0) / ($189>>>0))&-1;
      $196 = (($195) + ($$0340496))|0;
      HEAP32[$192>>2] = $196;
      $197 = Math_imul($191, $194)|0;
      $198 = ($$4349495|0)==($$0350494|0);
      $199 = ($196|0)==(0);
      $or$cond420 = $198 & $199;
      $200 = (($$0350494) + 1)|0;
      $201 = $200 & 127;
      $202 = (($$0385493) + -9)|0;
      $$$0385 = $or$cond420 ? $202 : $$0385493;
      $$$0350 = $or$cond420 ? $201 : $$0350494;
      $203 = (($$4349495) + 1)|0;
      $204 = ($203|0)==($$3348|0);
      if ($204) {
       break;
      } else {
       $$0340496 = $197;$$0350494 = $$$0350;$$0385493 = $$$0385;$$4349495 = $203;
      }
     }
     $205 = ($197|0)==(0);
     if ($205) {
      $$0350$lcssa554 = $$$0350;$$0372 = $$3348;$$0385$lcssa553 = $$$0385;
     } else {
      $206 = (($6) + ($$3348<<2)|0);
      $207 = (($$3348) + 1)|0;
      HEAP32[$206>>2] = $197;
      $$0350$lcssa554 = $$$0350;$$0372 = $207;$$0385$lcssa553 = $$$0385;
     }
    }
    $208 = (9 - ($186))|0;
    $209 = (($208) + ($$0385$lcssa553))|0;
    $$0380$ph = 0;$$1373$ph448 = $$0372;$$2352$ph449 = $$0350$lcssa554;$$2387$ph447 = $209;
   }
   L101: while(1) {
    $210 = ($$2387$ph447|0)<(18);
    $211 = ($$2387$ph447|0)==(18);
    $212 = (($6) + ($$2352$ph449<<2)|0);
    $$0380 = $$0380$ph;$$1373 = $$1373$ph448;
    while(1) {
     if (!($210)) {
      if (!($211)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = $$2387$ph447;$$6378$ph = $$1373;
       break L101;
      }
      $213 = HEAP32[$212>>2]|0;
      $214 = ($213>>>0)<(9007199);
      if (!($214)) {
       $$1381$ph = $$0380;$$4354$ph = $$2352$ph449;$$4389$ph445 = 18;$$6378$ph = $$1373;
       break L101;
      }
     }
     $215 = (($$1373) + 127)|0;
     $$0334 = 0;$$2374 = $$1373;$$5$in = $215;
     while(1) {
      $$5 = $$5$in & 127;
      $216 = (($6) + ($$5<<2)|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = (_bitshift64Shl(($217|0),0,29)|0);
      $219 = tempRet0;
      $220 = (_i64Add(($218|0),($219|0),($$0334|0),0)|0);
      $221 = tempRet0;
      $222 = ($221>>>0)>(0);
      $223 = ($220>>>0)>(1000000000);
      $224 = ($221|0)==(0);
      $225 = $224 & $223;
      $226 = $222 | $225;
      if ($226) {
       $227 = (___udivdi3(($220|0),($221|0),1000000000,0)|0);
       $228 = tempRet0;
       $229 = (___uremdi3(($220|0),($221|0),1000000000,0)|0);
       $230 = tempRet0;
       $$1335 = $227;$$sink421$off0 = $229;
      } else {
       $$1335 = 0;$$sink421$off0 = $220;
      }
      HEAP32[$216>>2] = $$sink421$off0;
      $231 = (($$2374) + 127)|0;
      $232 = $231 & 127;
      $233 = ($$5|0)!=($232|0);
      $234 = ($$5|0)==($$2352$ph449|0);
      $or$cond422 = $233 | $234;
      $or$cond422$not = $or$cond422 ^ 1;
      $235 = ($$sink421$off0|0)==(0);
      $or$cond423 = $235 & $or$cond422$not;
      $$3375 = $or$cond423 ? $$5 : $$2374;
      $236 = (($$5) + -1)|0;
      if ($234) {
       break;
      } else {
       $$0334 = $$1335;$$2374 = $$3375;$$5$in = $236;
      }
     }
     $237 = (($$0380) + -29)|0;
     $238 = ($$1335|0)==(0);
     if ($238) {
      $$0380 = $237;$$1373 = $$3375;
     } else {
      break;
     }
    }
    $239 = (($$2387$ph447) + 9)|0;
    $240 = (($$2352$ph449) + 127)|0;
    $241 = $240 & 127;
    $242 = ($241|0)==($$3375|0);
    $243 = (($$3375) + 127)|0;
    $244 = $243 & 127;
    $245 = (($$3375) + 126)|0;
    $246 = $245 & 127;
    $247 = (($6) + ($246<<2)|0);
    if ($242) {
     $248 = (($6) + ($244<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = HEAP32[$247>>2]|0;
     $251 = $250 | $249;
     HEAP32[$247>>2] = $251;
     $$4376 = $244;
    } else {
     $$4376 = $$3375;
    }
    $252 = (($6) + ($241<<2)|0);
    HEAP32[$252>>2] = $$1335;
    $$0380$ph = $237;$$1373$ph448 = $$4376;$$2352$ph449 = $241;$$2387$ph447 = $239;
   }
   L119: while(1) {
    $289 = (($$6378$ph) + 1)|0;
    $286 = $289 & 127;
    $290 = (($$6378$ph) + 127)|0;
    $291 = $290 & 127;
    $292 = (($6) + ($291<<2)|0);
    $$1381$ph558 = $$1381$ph;$$4354$ph559 = $$4354$ph;$$4389$ph = $$4389$ph445;
    while(1) {
     $265 = ($$4389$ph|0)==(18);
     $293 = ($$4389$ph|0)>(27);
     $$425 = $293 ? 9 : 1;
     $$1381 = $$1381$ph558;$$4354 = $$4354$ph559;
     while(1) {
      $$0336486 = 0;
      while(1) {
       $253 = (($$0336486) + ($$4354))|0;
       $254 = $253 & 127;
       $255 = ($254|0)==($$6378$ph|0);
       if ($255) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $256 = (($6) + ($254<<2)|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = (2552 + ($$0336486<<2)|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257>>>0)<($259>>>0);
       if ($260) {
        $$1337 = 2;
        label = 88;
        break;
       }
       $261 = ($257>>>0)>($259>>>0);
       if ($261) {
        break;
       }
       $262 = (($$0336486) + 1)|0;
       $263 = ($262|0)<(2);
       if ($263) {
        $$0336486 = $262;
       } else {
        $$1337 = $262;
        label = 88;
        break;
       }
      }
      if ((label|0) == 88) {
       label = 0;
       $264 = ($$1337|0)==(2);
       $or$cond11 = $265 & $264;
       if ($or$cond11) {
        $$0365484 = 0.0;$$4485 = 0;$$9483 = $$6378$ph;
        break L119;
       }
      }
      $266 = (($$425) + ($$1381))|0;
      $267 = ($$4354|0)==($$6378$ph|0);
      if ($267) {
       $$1381 = $266;$$4354 = $$6378$ph;
      } else {
       break;
      }
     }
     $268 = 1 << $$425;
     $269 = (($268) + -1)|0;
     $270 = 1000000000 >>> $$425;
     $$0332490 = 0;$$5355488 = $$4354;$$5390487 = $$4389$ph;$$6489 = $$4354;
     while(1) {
      $271 = (($6) + ($$6489<<2)|0);
      $272 = HEAP32[$271>>2]|0;
      $273 = $272 & $269;
      $274 = $272 >>> $$425;
      $275 = (($274) + ($$0332490))|0;
      HEAP32[$271>>2] = $275;
      $276 = Math_imul($273, $270)|0;
      $277 = ($$6489|0)==($$5355488|0);
      $278 = ($275|0)==(0);
      $or$cond426 = $277 & $278;
      $279 = (($$5355488) + 1)|0;
      $280 = $279 & 127;
      $281 = (($$5390487) + -9)|0;
      $$$5390 = $or$cond426 ? $281 : $$5390487;
      $$$5355 = $or$cond426 ? $280 : $$5355488;
      $282 = (($$6489) + 1)|0;
      $283 = $282 & 127;
      $284 = ($283|0)==($$6378$ph|0);
      if ($284) {
       break;
      } else {
       $$0332490 = $276;$$5355488 = $$$5355;$$5390487 = $$$5390;$$6489 = $283;
      }
     }
     $285 = ($276|0)==(0);
     if ($285) {
      $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
      continue;
     }
     $287 = ($286|0)==($$$5355|0);
     if (!($287)) {
      break;
     }
     $294 = HEAP32[$292>>2]|0;
     $295 = $294 | 1;
     HEAP32[$292>>2] = $295;
     $$1381$ph558 = $266;$$4354$ph559 = $$$5355;$$4389$ph = $$$5390;
    }
    $288 = (($6) + ($$6378$ph<<2)|0);
    HEAP32[$288>>2] = $276;
    $$1381$ph = $266;$$4354$ph = $$$5355;$$4389$ph445 = $$$5390;$$6378$ph = $286;
   }
   while(1) {
    $296 = (($$4485) + ($$4354))|0;
    $297 = $296 & 127;
    $298 = ($297|0)==($$9483|0);
    $299 = (($$9483) + 1)|0;
    $300 = $299 & 127;
    if ($298) {
     $301 = (($300) + -1)|0;
     $302 = (($6) + ($301<<2)|0);
     HEAP32[$302>>2] = 0;
     $$10 = $300;
    } else {
     $$10 = $$9483;
    }
    $303 = $$0365484 * 1.0E+9;
    $304 = (($6) + ($297<<2)|0);
    $305 = HEAP32[$304>>2]|0;
    $306 = (+($305>>>0));
    $307 = $303 + $306;
    $308 = (($$4485) + 1)|0;
    $exitcond = ($308|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0365484 = $307;$$4485 = $308;$$9483 = $$10;
    }
   }
   $309 = (+($4|0));
   $310 = $309 * $307;
   $311 = (($$1381) + 53)|0;
   $312 = (($311) - ($3))|0;
   $313 = ($312|0)<($2|0);
   $314 = ($312|0)>(0);
   $$ = $314 ? $312 : 0;
   $$0333 = $313 ? $$ : $2;
   $315 = ($$0333|0)<(53);
   if ($315) {
    $316 = (105 - ($$0333))|0;
    $317 = (+_scalbn(1.0,$316));
    $318 = (+_copysignl($317,$310));
    $319 = (53 - ($$0333))|0;
    $320 = (+_scalbn(1.0,$319));
    $321 = (+_fmodl($310,$320));
    $322 = $310 - $321;
    $323 = $318 + $322;
    $$0360 = $318;$$0361 = $321;$$1366 = $323;
   } else {
    $$0360 = 0.0;$$0361 = 0.0;$$1366 = $310;
   }
   $324 = (($$4354) + 2)|0;
   $325 = $324 & 127;
   $326 = ($325|0)==($$10|0);
   if ($326) {
    $$3364 = $$0361;
   } else {
    $327 = (($6) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = ($328>>>0)<(500000000);
    do {
     if ($329) {
      $330 = ($328|0)==(0);
      if ($330) {
       $331 = (($$4354) + 3)|0;
       $332 = $331 & 127;
       $333 = ($332|0)==($$10|0);
       if ($333) {
        $$1362 = $$0361;
        break;
       }
      }
      $334 = $309 * 0.25;
      $335 = $334 + $$0361;
      $$1362 = $335;
     } else {
      $336 = ($328|0)==(500000000);
      if (!($336)) {
       $337 = $309 * 0.75;
       $338 = $337 + $$0361;
       $$1362 = $338;
       break;
      }
      $339 = (($$4354) + 3)|0;
      $340 = $339 & 127;
      $341 = ($340|0)==($$10|0);
      if ($341) {
       $342 = $309 * 0.5;
       $343 = $342 + $$0361;
       $$1362 = $343;
       break;
      } else {
       $344 = $309 * 0.75;
       $345 = $344 + $$0361;
       $$1362 = $345;
       break;
      }
     }
    } while(0);
    $346 = (53 - ($$0333))|0;
    $347 = ($346|0)>(1);
    if ($347) {
     $348 = (+_fmodl($$1362,1.0));
     $349 = $348 != 0.0;
     if ($349) {
      $$3364 = $$1362;
     } else {
      $350 = $$1362 + 1.0;
      $$3364 = $350;
     }
    } else {
     $$3364 = $$1362;
    }
   }
   $351 = $$1366 + $$3364;
   $352 = $351 - $$0360;
   $353 = $311 & 2147483647;
   $354 = (-2 - ($sum))|0;
   $355 = ($353|0)>($354|0);
   do {
    if ($355) {
     $356 = (+Math_abs((+$352)));
     $357 = !($356 >= 9007199254740992.0);
     $358 = $352 * 0.5;
     $not$ = $357 ^ 1;
     $359 = $not$&1;
     $$3383 = (($359) + ($$1381))|0;
     $$2367 = $357 ? $352 : $358;
     $360 = (($$3383) + 50)|0;
     $361 = ($360|0)>($7|0);
     if (!($361)) {
      $362 = ($$0333|0)!=($312|0);
      $narrow = $362 | $357;
      $$2371$v = $313 & $narrow;
      $363 = $$3364 != 0.0;
      $or$cond14 = $363 & $$2371$v;
      if (!($or$cond14)) {
       $$3368 = $$2367;$$4384 = $$3383;
       break;
      }
     }
     $364 = (___errno_location()|0);
     HEAP32[$364>>2] = 34;
     $$3368 = $$2367;$$4384 = $$3383;
    } else {
     $$3368 = $352;$$4384 = $$1381;
    }
   } while(0);
   $365 = (+_scalbnl($$3368,$$4384));
   $$1 = $365;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04861 = 0, $$049 = 0, $$1$be = 0, $$160 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $$lcssa = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04861 = 0;$$160 = $$049;
  while(1) {
   $35 = ($$04861*10)|0;
   $36 = (($$160) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04861 = $37;$$160 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$56 = $37;$57 = $50;
   while(1) {
    $58 = (___muldi3(($56|0),($57|0),10,0)|0);
    $59 = tempRet0;
    $60 = ($$254|0)<(0);
    $61 = $60 << 31 >> 31;
    $62 = (_i64Add(($$254|0),($61|0),-48,-1)|0);
    $63 = tempRet0;
    $64 = (_i64Add(($62|0),($63|0),($58|0),($59|0))|0);
    $65 = tempRet0;
    $66 = HEAP32[$2>>2]|0;
    $67 = HEAP32[$4>>2]|0;
    $68 = ($66>>>0)<($67>>>0);
    if ($68) {
     $69 = ((($66)) + 1|0);
     HEAP32[$2>>2] = $69;
     $70 = HEAP8[$66>>0]|0;
     $71 = $70&255;
     $$2$be = $71;
    } else {
     $72 = (___shgetc($0)|0);
     $$2$be = $72;
    }
    $73 = (($$2$be) + -48)|0;
    $74 = ($73>>>0)<(10);
    $75 = ($65|0)<(21474836);
    $76 = ($64>>>0)<(2061584302);
    $77 = ($65|0)==(21474836);
    $78 = $77 & $76;
    $79 = $75 | $78;
    $80 = $74 & $79;
    if ($80) {
     $$254 = $$2$be;$56 = $64;$57 = $65;
    } else {
     $$2$lcssa = $$2$be;$94 = $64;$95 = $65;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  $55 = HEAP32[$4>>2]|0;
  if ($54) {
   $83 = $55;
   while(1) {
    $81 = HEAP32[$2>>2]|0;
    $82 = ($81>>>0)<($83>>>0);
    if ($82) {
     $84 = ((($81)) + 1|0);
     HEAP32[$2>>2] = $84;
     $85 = HEAP8[$81>>0]|0;
     $86 = $85&255;
     $$3$be = $86;$102 = $83;
    } else {
     $87 = (___shgetc($0)|0);
     $$pre = HEAP32[$4>>2]|0;
     $$3$be = $87;$102 = $$pre;
    }
    $88 = (($$3$be) + -48)|0;
    $89 = ($88>>>0)<(10);
    if ($89) {
     $83 = $102;
    } else {
     $$lcssa = $102;
     break;
    }
   }
  } else {
   $$lcssa = $55;
  }
  $90 = ($$lcssa|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $$1$ = 0, $$21 = 0.0, $$22 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $$ = $8 ? $7 : 1023;
  $$$ = $5 ? $$ : $4;
  $$21 = $5 ? $6 : $3;
  $$0 = $$21;$$020 = $$$;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $$1 = $15 ? $14 : -1022;
   $$1$ = $12 ? $$1 : $11;
   $$22 = $12 ? $13 : $10;
   $$0 = $$22;$$020 = $$1$;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_731($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $$ = $38 ? $39 : $0;
     return (+$$);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172$ph = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172$ph = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172$ph|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L23: do {
     if ($86) {
      $$27586 = $$174;$100 = $92;$156 = $97;$157 = $87;$158 = $88;$98 = $91;
      while(1) {
       if ($156) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $157;$105 = $158;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27586) + -1)|0;
       $109 = ($108|0)>($$172$ph|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27586 = $108;$100 = $111;$156 = $116;$157 = $106;$158 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$159 = $106;$160 = $107;
        break L23;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$159 = $87;$160 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $129 = $0 * 0.0;
      $$070 = $129;
      break;
     } else {
      $122 = $119;$124 = $117;
     }
    } else {
     $122 = $160;$124 = $159;
    }
    $123 = ($122>>>0)<(1048576);
    $125 = ($124>>>0)<(0);
    $126 = ($122|0)==(1048576);
    $127 = $126 & $125;
    $128 = $123 | $127;
    if ($128) {
     $$37683 = $$275$lcssa;$130 = $124;$131 = $122;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37683) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37683 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $124;$142 = $122;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_731($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$$0305 = 0, $$$3 = 0, $$0266$lcssa = 0, $$0266417 = 0, $$0268 = 0, $$0272 = 0, $$0273429 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283428 = 0, $$0286420 = 0, $$0288$ = 0, $$0288425 = 0, $$0292 = 0, $$0293 = 0;
 var $$0305423 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0;
 var $$320 = 0, $$321 = 0, $$322 = 0, $$327 = 0, $$328$le439 = 0, $$328$le441 = 0, $$3281 = 0, $$3291 = 0, $$3416 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0;
 var $$8313 = 0, $$9 = 0, $$9314 = 0, $$9314$ph = 0, $$lcssa355 = 0, $$not = 0, $$old4 = 0, $$ph = 0, $$ph353 = 0, $$pre = 0, $$pre$phi516Z2D = 0, $$pre507 = 0, $$pre509 = 0, $$pre511 = 0, $$pre512 = 0, $$pre513 = 0, $$pre514 = 0, $$pre515 = 0, $$sink443 = 0, $$sroa$2$0$$sroa_idx13 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0.0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor331 = 0, $isdigit = 0;
 var $isdigit316 = 0, $isdigit316415 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315414 = 0, $narrow = 0, $narrow469 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $3 = sp + 8|0;
 $4 = sp + 17|0;
 $5 = sp;
 $6 = sp + 16|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $305 = $10;
 } else {
  $305 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3291 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $21 = ((($4)) + 1|0);
   $22 = ((($4)) + 1|0);
   $$0273429 = $1;$$0283428 = 0;$$0288425 = 0;$$0305423 = 0;$102 = 0;$24 = $11;
   L6: while(1) {
    $23 = $24&255;
    $25 = (_isspace($23)|0);
    $26 = ($25|0)==(0);
    L8: do {
     if ($26) {
      $53 = ($24<<24>>24)==(37);
      L10: do {
       if ($53) {
        $54 = ((($$0273429)) + 1|0);
        $55 = HEAP8[$54>>0]|0;
        L12: do {
         switch ($55<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $76 = ((($$0273429)) + 2|0);
          $$0293 = 0;$$2275 = $76;
          break;
         }
         default: {
          $77 = $55&255;
          $isdigittmp = (($77) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $78 = ((($$0273429)) + 2|0);
           $79 = HEAP8[$78>>0]|0;
           $80 = ($79<<24>>24)==(36);
           if ($80) {
            $81 = (_arg_n($2,$isdigittmp)|0);
            $82 = ((($$0273429)) + 3|0);
            $$0293 = $81;$$2275 = $82;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $83 = $arglist_current;
          $84 = ((0) + 4|0);
          $expanded1 = $84;
          $expanded = (($expanded1) - 1)|0;
          $85 = (($83) + ($expanded))|0;
          $86 = ((0) + 4|0);
          $expanded5 = $86;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $87 = $85 & $expanded3;
          $88 = $87;
          $89 = HEAP32[$88>>2]|0;
          $arglist_next = ((($88)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0293 = $89;$$2275 = $54;
         }
         }
        } while(0);
        $90 = HEAP8[$$2275>>0]|0;
        $91 = $90&255;
        $isdigittmp315414 = (($91) + -48)|0;
        $isdigit316415 = ($isdigittmp315414>>>0)<(10);
        if ($isdigit316415) {
         $$0266417 = 0;$$3416 = $$2275;$95 = $91;
         while(1) {
          $92 = ($$0266417*10)|0;
          $93 = (($92) + -48)|0;
          $94 = (($93) + ($95))|0;
          $96 = ((($$3416)) + 1|0);
          $97 = HEAP8[$96>>0]|0;
          $98 = $97&255;
          $isdigittmp315 = (($98) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266417 = $94;$$3416 = $96;$95 = $98;
          } else {
           $$0266$lcssa = $94;$$3$lcssa = $96;$$lcssa355 = $97;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa355 = $90;
        }
        $99 = ($$lcssa355<<24>>24)==(109);
        $100 = ($$0293|0)!=(0|0);
        $101 = ((($$3$lcssa)) + 1|0);
        $$$0305 = $99 ? 0 : $$0305423;
        $$327 = $99 ? 0 : $102;
        $$$3 = $99 ? $101 : $$3$lcssa;
        $narrow = $100 & $99;
        $103 = ((($$$3)) + 1|0);
        $104 = HEAP8[$$$3>>0]|0;
        switch ($104<<24>>24) {
        case 104:  {
         $105 = HEAP8[$103>>0]|0;
         $106 = ($105<<24>>24)==(104);
         $107 = ((($$$3)) + 2|0);
         $$319 = $106 ? $107 : $103;
         $$320 = $106 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $108 = HEAP8[$103>>0]|0;
         $109 = ($108<<24>>24)==(108);
         $110 = ((($$$3)) + 2|0);
         $$321 = $109 ? $110 : $103;
         $$322 = $109 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $103;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $103;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $103;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$$3;
         break;
        }
        default: {
         $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
         label = 137;
         break L6;
        }
        }
        $111 = HEAP8[$$5>>0]|0;
        $112 = $111&255;
        $113 = $112 & 47;
        $114 = ($113|0)==(3);
        $115 = $112 | 32;
        $$ = $114 ? $115 : $112;
        $$$0268 = $114 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $116 = ($$0266$lcssa|0)>(1);
         $$$0266 = $116 ? $$0266$lcssa : 1;
         $$1267 = $$$0266;$$1284 = $$0283428;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283428;
         break;
        }
        case 110:  {
         $117 = ($$0283428|0)<(0);
         $118 = $117 << 31 >> 31;
         _store_int($$0293,$$$0268,$$0283428,$118);
         $$11 = $$5;$$1289 = $$0288425;$$2285 = $$0283428;$$6311 = $$$0305;$307 = $$327;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $119 = HEAP32[$13>>2]|0;
          $120 = HEAP32[$14>>2]|0;
          $121 = ($119>>>0)<($120>>>0);
          if ($121) {
           $122 = ((($119)) + 1|0);
           HEAP32[$13>>2] = $122;
           $123 = HEAP8[$119>>0]|0;
           $124 = $123&255;
           $126 = $124;
          } else {
           $125 = (___shgetc($0)|0);
           $126 = $125;
          }
          $127 = (_isspace($126)|0);
          $128 = ($127|0)==(0);
          if ($128) {
           break;
          }
         }
         $129 = HEAP32[$14>>2]|0;
         $130 = ($129|0)==(0|0);
         if ($130) {
          $$pre507 = HEAP32[$13>>2]|0;
          $138 = $$pre507;
         } else {
          $131 = HEAP32[$13>>2]|0;
          $132 = ((($131)) + -1|0);
          HEAP32[$13>>2] = $132;
          $133 = $132;
          $138 = $133;
         }
         $134 = HEAP32[$15>>2]|0;
         $135 = HEAP32[$16>>2]|0;
         $136 = (($134) + ($$0283428))|0;
         $137 = (($136) + ($138))|0;
         $139 = (($137) - ($135))|0;
         $$1267 = $$0266$lcssa;$$1284 = $139;
        }
        }
        ___shlim($0,$$1267);
        $140 = HEAP32[$13>>2]|0;
        $141 = HEAP32[$14>>2]|0;
        $142 = ($140>>>0)<($141>>>0);
        if ($142) {
         $143 = ((($140)) + 1|0);
         HEAP32[$13>>2] = $143;
         $146 = $141;
        } else {
         $144 = (___shgetc($0)|0);
         $145 = ($144|0)<(0);
         if ($145) {
          $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
          label = 137;
          break L6;
         }
         $$pre509 = HEAP32[$14>>2]|0;
         $146 = $$pre509;
        }
        $147 = ($146|0)==(0|0);
        if (!($147)) {
         $148 = HEAP32[$13>>2]|0;
         $149 = ((($148)) + -1|0);
         HEAP32[$13>>2] = $149;
        }
        L55: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $150 = ($$|0)==(99);
          $151 = $$ | 16;
          $152 = ($151|0)==(115);
          L57: do {
           if ($152) {
            $153 = ($$|0)==(115);
            _memset(($21|0),-1,256)|0;
            HEAP8[$4>>0] = 0;
            if ($153) {
             HEAP8[$18>>0] = 0;
             ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;HEAP8[$17+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $154 = ((($$5)) + 1|0);
            $155 = HEAP8[$154>>0]|0;
            $156 = ($155<<24>>24)==(94);
            $157 = ((($$5)) + 2|0);
            $$0292 = $156&1;
            $$6 = $156 ? $157 : $154;
            $158 = $156&1;
            _memset(($22|0),($158|0),256)|0;
            HEAP8[$4>>0] = 0;
            $159 = HEAP8[$$6>>0]|0;
            switch ($159<<24>>24) {
            case 45:  {
             $$sink443 = $19;
             label = 64;
             break;
            }
            case 93:  {
             $$sink443 = $20;
             label = 64;
             break;
            }
            default: {
             $$pre514 = $$0292 ^ 1;
             $$pre515 = $$pre514&255;
             $$7$ph = $$6;$$pre$phi516Z2D = $$pre515;
            }
            }
            if ((label|0) == 64) {
             label = 0;
             $160 = ((($$6)) + 1|0);
             $161 = $$0292 ^ 1;
             $162 = $161&255;
             HEAP8[$$sink443>>0] = $162;
             $$7$ph = $160;$$pre$phi516Z2D = $162;
            }
            $$7 = $$7$ph;
            while(1) {
             $163 = HEAP8[$$7>>0]|0;
             L69: do {
              switch ($163<<24>>24) {
              case 0:  {
               $$7312 = $$$0305;$309 = $$327;$narrow469 = $narrow;
               label = 137;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L57;
               break;
              }
              case 45:  {
               $164 = ((($$7)) + 1|0);
               $165 = HEAP8[$164>>0]|0;
               switch ($165<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$176 = 45;
                break L69;
                break;
               }
               default: {
               }
               }
               $166 = ((($$7)) + -1|0);
               $167 = HEAP8[$166>>0]|0;
               $168 = ($167&255)<($165&255);
               if ($168) {
                $169 = $167&255;
                $$0286420 = $169;
                while(1) {
                 $170 = (($$0286420) + 1)|0;
                 $171 = (($4) + ($170)|0);
                 HEAP8[$171>>0] = $$pre$phi516Z2D;
                 $172 = HEAP8[$164>>0]|0;
                 $173 = $172&255;
                 $174 = ($170|0)<($173|0);
                 if ($174) {
                  $$0286420 = $170;
                 } else {
                  $$8 = $164;$176 = $172;
                  break;
                 }
                }
               } else {
                $$8 = $164;$176 = $165;
               }
               break;
              }
              default: {
               $$8 = $$7;$176 = $163;
              }
              }
             } while(0);
             $175 = $176&255;
             $177 = (($175) + 1)|0;
             $178 = (($4) + ($177)|0);
             HEAP8[$178>>0] = $$pre$phi516Z2D;
             $179 = ((($$8)) + 1|0);
             $$7 = $179;
            }
           }
          } while(0);
          $180 = (($$1267) + 1)|0;
          $181 = $150 ? $180 : 31;
          $182 = ($$$0268|0)==(1);
          L77: do {
           if ($182) {
            if ($narrow) {
             $183 = $181 << 2;
             $184 = (_malloc($183)|0);
             $185 = ($184|0)==(0|0);
             if ($185) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $311 = $184;
             }
            } else {
             $311 = $$0293;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $181;$$0278$ph = 0;$$ph = $311;
            L82: while(1) {
             $186 = ($$ph|0)==(0|0);
             $$0278$ph336 = $$0278$ph;
             while(1) {
              L86: while(1) {
               $187 = HEAP32[$13>>2]|0;
               $188 = HEAP32[$14>>2]|0;
               $189 = ($187>>>0)<($188>>>0);
               if ($189) {
                $190 = ((($187)) + 1|0);
                HEAP32[$13>>2] = $190;
                $191 = HEAP8[$187>>0]|0;
                $192 = $191&255;
                $195 = $192;
               } else {
                $193 = (___shgetc($0)|0);
                $195 = $193;
               }
               $194 = (($195) + 1)|0;
               $196 = (($4) + ($194)|0);
               $197 = HEAP8[$196>>0]|0;
               $198 = ($197<<24>>24)==(0);
               if ($198) {
                break L82;
               }
               $199 = $195&255;
               HEAP8[$6>>0] = $199;
               $200 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($200|0) {
               case -1:  {
                $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
                label = 137;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L86;
               }
               }
              }
              if ($186) {
               $$1279 = $$0278$ph336;
              } else {
               $201 = (($$ph) + ($$0278$ph336<<2)|0);
               $202 = (($$0278$ph336) + 1)|0;
               $203 = HEAP32[$5>>2]|0;
               HEAP32[$201>>2] = $203;
               $$1279 = $202;
              }
              $204 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $narrow & $204;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph336 = $$1279;
              }
             }
             $factor331 = $$0276$ph << 1;
             $205 = $factor331 | 1;
             $206 = $205 << 2;
             $207 = (_realloc($$ph,$206)|0);
             $208 = ($207|0)==(0|0);
             if ($208) {
              $$7312 = 0;$309 = $$ph;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $205;$$ph = $207;$$0278$ph = $$0278$ph$phi;
             }
            }
            $209 = (_mbsinit($3)|0);
            $210 = ($209|0)==(0);
            if ($210) {
             $$7312 = 0;$309 = $$ph;$narrow469 = $narrow;
             label = 137;
             break L6;
            } else {
             $$4282 = $$0278$ph336;$$4309 = 0;$$5299 = $$ph;$312 = $$ph;
            }
           } else {
            if ($narrow) {
             $211 = (_malloc($181)|0);
             $212 = ($211|0)==(0|0);
             if ($212) {
              $$7312 = 0;$309 = 0;$narrow469 = 1;
              label = 137;
              break L6;
             } else {
              $$1277$ph = $181;$$2280$ph = 0;$$2307$ph = $211;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $213 = HEAP32[$13>>2]|0;
               $214 = HEAP32[$14>>2]|0;
               $215 = ($213>>>0)<($214>>>0);
               if ($215) {
                $216 = ((($213)) + 1|0);
                HEAP32[$13>>2] = $216;
                $217 = HEAP8[$213>>0]|0;
                $218 = $217&255;
                $221 = $218;
               } else {
                $219 = (___shgetc($0)|0);
                $221 = $219;
               }
               $220 = (($221) + 1)|0;
               $222 = (($4) + ($220)|0);
               $223 = HEAP8[$222>>0]|0;
               $224 = ($223<<24>>24)==(0);
               if ($224) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;$312 = 0;
                break L77;
               }
               $225 = $221&255;
               $226 = (($$2280) + 1)|0;
               $227 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$227>>0] = $225;
               $228 = ($226|0)==($$1277$ph|0);
               if ($228) {
                break;
               } else {
                $$2280 = $226;
               }
              }
              $factor = $$1277$ph << 1;
              $229 = $factor | 1;
              $230 = (_realloc($$2307$ph,$229)|0);
              $231 = ($230|0)==(0|0);
              if ($231) {
               $$7312 = $$2307$ph;$309 = 0;$narrow469 = 1;
               label = 137;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $229;$$2307$ph = $230;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $232 = ($$0293|0)==(0|0);
            if ($232) {
             $250 = $146;
             while(1) {
              $248 = HEAP32[$13>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$13>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($0)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($4) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;$312 = 0;
               break L77;
              }
              $$pre512 = HEAP32[$14>>2]|0;
              $250 = $$pre512;
             }
            } else {
             $$3281 = 0;$235 = $146;
             while(1) {
              $233 = HEAP32[$13>>2]|0;
              $234 = ($233>>>0)<($235>>>0);
              if ($234) {
               $236 = ((($233)) + 1|0);
               HEAP32[$13>>2] = $236;
               $237 = HEAP8[$233>>0]|0;
               $238 = $237&255;
               $241 = $238;
              } else {
               $239 = (___shgetc($0)|0);
               $241 = $239;
              }
              $240 = (($241) + 1)|0;
              $242 = (($4) + ($240)|0);
              $243 = HEAP8[$242>>0]|0;
              $244 = ($243<<24>>24)==(0);
              if ($244) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;$312 = 0;
               break L77;
              }
              $245 = $241&255;
              $246 = (($$3281) + 1)|0;
              $247 = (($$0293) + ($$3281)|0);
              HEAP8[$247>>0] = $245;
              $$pre511 = HEAP32[$14>>2]|0;
              $$3281 = $246;$235 = $$pre511;
             }
            }
           }
          } while(0);
          $260 = HEAP32[$14>>2]|0;
          $261 = ($260|0)==(0|0);
          if ($261) {
           $$pre513 = HEAP32[$13>>2]|0;
           $268 = $$pre513;
          } else {
           $262 = HEAP32[$13>>2]|0;
           $263 = ((($262)) + -1|0);
           HEAP32[$13>>2] = $263;
           $264 = $263;
           $268 = $264;
          }
          $265 = HEAP32[$15>>2]|0;
          $266 = HEAP32[$16>>2]|0;
          $267 = (($268) - ($266))|0;
          $269 = (($267) + ($265))|0;
          $270 = ($269|0)==(0);
          if ($270) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          $$not = $150 ^ 1;
          $271 = ($269|0)==($$1267|0);
          $or$cond318 = $271 | $$not;
          if (!($or$cond318)) {
           $$9314$ph = $$4309;$$ph353 = $312;
           label = 139;
           break L6;
          }
          do {
           if ($narrow) {
            if ($182) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($150) {
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          } else {
           $272 = ($$5299|0)==(0|0);
           if (!($272)) {
            $273 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$273>>2] = 0;
           }
           $274 = ($$4309|0)==(0|0);
           if ($274) {
            $$10 = $$9;$$5310 = 0;$310 = $312;
            break L55;
           }
           $275 = (($$4309) + ($$4282)|0);
           HEAP8[$275>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$310 = $312;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 125;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 125;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 125;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 125;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $285 = (+___floatscan($0,$$$0268,0));
          $286 = HEAP32[$15>>2]|0;
          $287 = HEAP32[$13>>2]|0;
          $288 = HEAP32[$16>>2]|0;
          $289 = (($288) - ($287))|0;
          $290 = ($286|0)==($289|0);
          if ($290) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $291 = ($$0293|0)==(0|0);
          if ($291) {
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $292 = $285;
            HEAPF32[$$0293>>2] = $292;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $285;
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
            break L55;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
         }
         }
        } while(0);
        do {
         if ((label|0) == 125) {
          label = 0;
          $276 = (___intscan($0,$$0272,0,-1,-1)|0);
          $277 = tempRet0;
          $278 = HEAP32[$15>>2]|0;
          $279 = HEAP32[$13>>2]|0;
          $280 = HEAP32[$16>>2]|0;
          $281 = (($280) - ($279))|0;
          $282 = ($278|0)==($281|0);
          if ($282) {
           $$9314$ph = $$$0305;$$ph353 = $$327;
           label = 139;
           break L6;
          }
          $283 = ($$|0)==(112);
          $or$cond3 = $100 & $283;
          if ($or$cond3) {
           $284 = $276;
           HEAP32[$$0293>>2] = $284;
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          } else {
           _store_int($$0293,$$$0268,$276,$277);
           $$10 = $$5;$$5310 = $$$0305;$310 = $$327;
           break;
          }
         }
        } while(0);
        $293 = HEAP32[$15>>2]|0;
        $294 = HEAP32[$13>>2]|0;
        $295 = HEAP32[$16>>2]|0;
        $296 = (($293) + ($$1284))|0;
        $297 = (($296) + ($294))|0;
        $298 = (($297) - ($295))|0;
        $299 = $100&1;
        $$0288$ = (($299) + ($$0288425))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $298;$$6311 = $$5310;$307 = $310;
        break L8;
       }
      } while(0);
      $56 = $53&1;
      $57 = (($$0273429) + ($56)|0);
      ___shlim($0,0);
      $58 = HEAP32[$13>>2]|0;
      $59 = HEAP32[$14>>2]|0;
      $60 = ($58>>>0)<($59>>>0);
      if ($60) {
       $61 = ((($58)) + 1|0);
       HEAP32[$13>>2] = $61;
       $62 = HEAP8[$58>>0]|0;
       $63 = $62&255;
       $67 = $63;
      } else {
       $64 = (___shgetc($0)|0);
       $67 = $64;
      }
      $65 = HEAP8[$57>>0]|0;
      $66 = $65&255;
      $68 = ($67|0)==($66|0);
      if (!($68)) {
       label = 22;
       break L6;
      }
      $75 = (($$0283428) + 1)|0;
      $$11 = $57;$$1289 = $$0288425;$$2285 = $75;$$6311 = $$0305423;$307 = $102;
     } else {
      $$1274 = $$0273429;
      while(1) {
       $27 = ((($$1274)) + 1|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28&255;
       $30 = (_isspace($29)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        break;
       } else {
        $$1274 = $27;
       }
      }
      ___shlim($0,0);
      while(1) {
       $32 = HEAP32[$13>>2]|0;
       $33 = HEAP32[$14>>2]|0;
       $34 = ($32>>>0)<($33>>>0);
       if ($34) {
        $35 = ((($32)) + 1|0);
        HEAP32[$13>>2] = $35;
        $36 = HEAP8[$32>>0]|0;
        $37 = $36&255;
        $39 = $37;
       } else {
        $38 = (___shgetc($0)|0);
        $39 = $38;
       }
       $40 = (_isspace($39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        break;
       }
      }
      $42 = HEAP32[$14>>2]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$pre = HEAP32[$13>>2]|0;
       $51 = $$pre;
      } else {
       $44 = HEAP32[$13>>2]|0;
       $45 = ((($44)) + -1|0);
       HEAP32[$13>>2] = $45;
       $46 = $45;
       $51 = $46;
      }
      $47 = HEAP32[$15>>2]|0;
      $48 = HEAP32[$16>>2]|0;
      $49 = (($47) + ($$0283428))|0;
      $50 = (($49) + ($51))|0;
      $52 = (($50) - ($48))|0;
      $$11 = $$1274;$$1289 = $$0288425;$$2285 = $52;$$6311 = $$0305423;$307 = $102;
     }
    } while(0);
    $300 = ((($$11)) + 1|0);
    $301 = HEAP8[$300>>0]|0;
    $302 = ($301<<24>>24)==(0);
    if ($302) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273429 = $300;$$0283428 = $$2285;$$0288425 = $$1289;$$0305423 = $$6311;$102 = $307;$24 = $301;
    }
   }
   if ((label|0) == 22) {
    $69 = HEAP32[$14>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = HEAP32[$13>>2]|0;
     $72 = ((($71)) + -1|0);
     HEAP32[$13>>2] = $72;
    }
    $73 = ($67|0)>(-1);
    $74 = ($$0288425|0)!=(0);
    $or$cond5 = $74 | $73;
    if ($or$cond5) {
     $$3291 = $$0288425;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305423;$308 = $102;
     label = 138;
    }
   }
   else if ((label|0) == 137) {
    $$328$le441 = $narrow469&1;
    $$old4 = ($$0288425|0)==(0);
    if ($$old4) {
     $$1271 = $$328$le441;$$8313 = $$7312;$308 = $309;
     label = 138;
    } else {
     $$2 = $$328$le441;$$2290 = $$0288425;$$9314 = $$7312;$304 = $309;
    }
   }
   else if ((label|0) == 139) {
    $$328$le439 = $narrow&1;
    $$2 = $$328$le439;$$2290 = $$0288425;$$9314 = $$9314$ph;$304 = $$ph353;
   }
   if ((label|0) == 138) {
    $$2 = $$1271;$$2290 = -1;$$9314 = $$8313;$304 = $308;
   }
   $303 = ($$2|0)==(0);
   if ($303) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $306 = ($305|0)==(0);
 if (!($306)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 799152 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 17;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$$47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_218()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $not$ = ($20|0)==(0|0);
     $21 = HEAP8[$1>>0]|0;
     if ($not$) {
      $22 = $21 << 24 >> 24;
      $23 = $22 & 57343;
      HEAP32[$$47>>2] = $23;
      $$0 = 1;
      break;
     }
     $24 = $21&255;
     $25 = (($24) + -194)|0;
     $26 = ($25>>>0)>(50);
     if ($26) {
      label = 17;
      break;
     }
     $27 = ((($1)) + 1|0);
     $28 = (2184 + ($25<<2)|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($2) + -1)|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $$2 = $29;
     } else {
      $$03952 = $27;$$04051 = $29;$$04350 = $30;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $32 = HEAP8[$$03952>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $$04051 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if ($39) {
       label = 17;
       break L1;
      } else {
       $$1 = $$03952;$$141 = $$04051;$$144 = $$04350;$43 = $32;
      }
      while(1) {
       $40 = $$141 << 6;
       $41 = ((($$1)) + 1|0);
       $42 = $43&255;
       $44 = (($42) + -128)|0;
       $45 = $44 | $40;
       $46 = (($$144) + -1)|0;
       $47 = ($45|0)<(0);
       if (!($47)) {
        break;
       }
       $49 = ($46|0)==(0);
       if ($49) {
        $$2 = $45;
        break L14;
       }
       $50 = HEAP8[$41>>0]|0;
       $51 = $50 & -64;
       $52 = ($51<<24>>24)==(-128);
       if ($52) {
        $$1 = $41;$$141 = $45;$$144 = $46;$43 = $50;
       } else {
        label = 17;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$47>>2] = $45;
      $48 = (($2) - ($46))|0;
      $$0 = $48;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[$$>>2] = 0;
  $53 = (___errno_location()|0);
  HEAP32[$53>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___pthread_self_218() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _flockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ftrylockfile($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($0)) + 76|0);
  $4 = ((($0)) + 80|0);
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    ___wait(($3|0),($4|0),($5|0),1);
   }
   $7 = (_ftrylockfile($0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 return;
}
function _ftrylockfile($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_164()|0);
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 if ($6) {
  $7 = ((($0)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2147483647);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$7>>2] = $10;
   $$0 = 0;
  }
 } else {
  $11 = HEAP32[$4>>2]|0;
  $12 = ($11|0)<(0);
  if ($12) {
   HEAP32[$4>>2] = 0;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   _a_cas($4,$3);
   $15 = ((($0)) + 68|0);
   HEAP32[$15>>2] = 1;
   $16 = ((($0)) + 112|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($1)) + 232|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 116|0);
   HEAP32[$19>>2] = $18;
   $20 = ($18|0)==(0|0);
   if (!($20)) {
    $21 = ((($18)) + 112|0);
    HEAP32[$21>>2] = $0;
   }
   HEAP32[$17>>2] = $0;
   $$0 = 0;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___pthread_self_164() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _a_cas($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$0>>2] = $1;
 }
 return;
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(32397,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 4;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 3;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 2;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 1;
   $38 = HEAP32[(799076)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((799156|0));
 return (799164|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((799156|0));
 return;
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $35 = $9;
 } else {
  $35 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 7]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $36 = ($35|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($35|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 7]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$$>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_209()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $not$ = ($15|0)==(0|0);
     $16 = HEAP8[$1>>0]|0;
     if ($not$) {
      $17 = $16 << 24 >> 24;
      $18 = $17 & 57343;
      HEAP32[$$>>2] = $18;
      $$0 = 1;
      break L1;
     }
     $19 = $16&255;
     $20 = (($19) + -194)|0;
     $21 = ($20>>>0)>(50);
     if (!($21)) {
      $22 = ((($1)) + 1|0);
      $23 = (2184 + ($20<<2)|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($2>>>0)<(4);
      if ($25) {
       $26 = ($2*6)|0;
       $27 = (($26) + -6)|0;
       $28 = -2147483648 >>> $27;
       $29 = $24 & $28;
       $30 = ($29|0)==(0);
       if (!($30)) {
        break;
       }
      }
      $31 = HEAP8[$22>>0]|0;
      $32 = $31&255;
      $33 = $32 >>> 3;
      $34 = (($33) + -16)|0;
      $35 = $24 >> 26;
      $36 = (($33) + ($35))|0;
      $37 = $34 | $36;
      $38 = ($37>>>0)>(7);
      if (!($38)) {
       $39 = $24 << 6;
       $40 = (($32) + -128)|0;
       $41 = $40 | $39;
       $42 = ($41|0)<(0);
       if (!($42)) {
        HEAP32[$$>>2] = $41;
        $$0 = 2;
        break L1;
       }
       $43 = ((($1)) + 2|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = $44&255;
       $46 = (($45) + -128)|0;
       $47 = ($46>>>0)>(63);
       if (!($47)) {
        $48 = $41 << 6;
        $49 = $46 | $48;
        $50 = ($49|0)<(0);
        if (!($50)) {
         HEAP32[$$>>2] = $49;
         $$0 = 3;
         break L1;
        }
        $51 = ((($1)) + 3|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = $52&255;
        $54 = (($53) + -128)|0;
        $55 = ($54>>>0)>(63);
        if (!($55)) {
         $56 = $49 << 6;
         $57 = $54 | $56;
         HEAP32[$$>>2] = $57;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $58 = (___errno_location()|0);
   HEAP32[$58>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_209() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $not$ = ($3|0)!=($2|0);
 $4 = $not$ << 31 >> 31;
 return ($4|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $$;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 7]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 7]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _vscanf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[514]|0;
 $3 = (_vfscanf($2,$0,$1)|0);
 return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 6;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read_74($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $28 = $4;
 } else {
  $28 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 1]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $29 = ($28|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_164()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[481]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[481]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 7]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _clearerr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -49;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -49;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function _funlockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  ___unlist_locked_file($0);
  HEAP32[$1>>2] = 0;
  ___unlockfile($0);
 } else {
  $4 = (($2) + -1)|0;
  HEAP32[$1>>2] = $4;
 }
 return;
}
function _fileno($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 }
 $5 = ((($0)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 return ($6|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 7]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $16 = $6;
 } else {
  $16 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 $9 = ($7|0)!=(0);
 if ($8) {
  $10 = ((($2)) + 74|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = (($12) + 255)|0;
  $14 = $13 | $12;
  $15 = $14&255;
  HEAP8[$10>>0] = $15;
  $17 = ($16|0)==(0);
  if (!($17)) {
   ___unlockfile($2);
  }
  if ($9) {
   $$0 = 0;
  } else {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  }
 } else {
  L11: do {
   if ($9) {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   } else {
    $$1 = $0;
    label = 17;
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($16|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[388]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _putchar($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[388]|0;
 $2 = (_fputc($0,$1)|0);
 return ($2|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(32397,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function _ferror($0) {
 $0 = $0|0;
 var $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $6 = (___lockfile($0)|0);
  $phitmp = ($6|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 >>> 5;
  $$lobit = $8 & 1;
  if ($phitmp) {
   $$lobit9 = $$lobit;
  } else {
   ___unlockfile($0);
   $$lobit9 = $$lobit;
  }
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4 >>> 5;
  $$lobit8 = $5 & 1;
  $$lobit9 = $$lobit8;
 }
 return ($$lobit9|0);
}
function _scanf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = (_vscanf($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _puts($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[388]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = (___lockfile($1)|0);
  $20 = $5;
 } else {
  $20 = 0;
 }
 $6 = (_fputs($0,$1)|0);
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $19 = 1;
  } else {
   $8 = ((($1)) + 75|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(10);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $16;
     HEAP8[$12>>0] = 10;
     $19 = 0;
     break;
    }
   }
   $17 = (___overflow($1,10)|0);
   $phitmp = ($17|0)<(0);
   $19 = $phitmp;
  }
 } while(0);
 $18 = $19 << 31 >> 31;
 $21 = ($20|0)==(0);
 if (!($21)) {
  ___unlockfile($1);
 }
 return ($18|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = $0&255;
 $6 = $0 & 255;
 if ($4) {
  label = 3;
 } else {
  $7 = (___lockfile($1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($6|0)==($22|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $29;
     HEAP8[$25>>0] = $5;
     $31 = $6;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($1,$0)|0);
    $31 = $30;
   }
   ___unlockfile($1);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($6|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $5;
     $$0 = $6;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _isatty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 21523;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall54(54,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 $5 = ($4|0)==(0);
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _getopt_long($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___getopt_long($0,$1,$2,$3,$4,0)|0);
 return ($5|0);
}
function ___getopt_long($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0454957 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre53 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond56 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[597]|0;
 $7 = ($6|0)==(0);
 $8 = HEAP32[199784]|0;
 $9 = ($8|0)!=(0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  HEAP32[199784] = 0;
  HEAP32[199785] = 0;
  HEAP32[597] = 1;
  $10 = 1;
 } else {
  $10 = $6;
 }
 $11 = ($10|0)<($0|0);
 L4: do {
  if ($11) {
   $12 = (($1) + ($10<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$1 = -1;
   } else {
    $15 = HEAP8[$2>>0]|0;
    switch ($15<<24>>24) {
    case 45: case 43:  {
     $26 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
     $$1 = $26;
     break L4;
     break;
    }
    default: {
    }
    }
    $16 = ($13|0)==(0|0);
    if ($16) {
     $$1 = -1;
    } else {
     $$0454957 = $10;$18 = $13;
     while(1) {
      $17 = HEAP8[$18>>0]|0;
      $19 = ($17<<24>>24)==(45);
      if ($19) {
       $20 = ((($18)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = ($21<<24>>24)==(0);
       if (!($22)) {
        break;
       }
      }
      $23 = (($$0454957) + 1)|0;
      $24 = ($23|0)<($0|0);
      if (!($24)) {
       $$1 = -1;
       break L4;
      }
      $$phi$trans$insert = (($1) + ($23<<2)|0);
      $$pre = HEAP32[$$phi$trans$insert>>2]|0;
      $25 = ($$pre|0)==(0|0);
      if ($25) {
       $$1 = -1;
       break L4;
      } else {
       $$0454957 = $23;$18 = $$pre;
      }
     }
     HEAP32[597] = $$0454957;
     $27 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
     $28 = ($$0454957|0)>($10|0);
     if ($28) {
      $29 = HEAP32[597]|0;
      $30 = (($29) - ($$0454957))|0;
      $31 = ($30|0)>(0);
      if ($31) {
       $32 = (($29) + -1)|0;
       _permute($1,$10,$32);
       $exitcond56 = ($30|0)==(1);
       if (!($exitcond56)) {
        $35 = 1;
        while(1) {
         $$pre53 = HEAP32[597]|0;
         $33 = (($$pre53) + -1)|0;
         _permute($1,$10,$33);
         $34 = (($35) + 1)|0;
         $exitcond = ($34|0)==($30|0);
         if ($exitcond) {
          break;
         } else {
          $35 = $34;
         }
        }
       }
      }
      $36 = (($30) + ($10))|0;
      HEAP32[597] = $36;
      $$1 = $27;
     } else {
      $$1 = $27;
     }
    }
   }
  } else {
   $$1 = -1;
  }
 } while(0);
 return ($$1|0);
}
function ___getopt_long_core($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$083105 = 0, $$086111 = 0, $$089110 = 0, $$092108 = 0, $$185$lcssa = 0, $$185104 = 0, $$187100 = 0, $$19099 = 0, $$194 = 0, $$288 = 0, $$291 = 0, $$291127 = 0, $$95 = 0, $$lcssa = 0, $$lcssa102 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre124 = 0, $$pre125 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond96 = 0, $or$cond96103 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[199786] = 0;
 $6 = ($3|0)==(0|0);
 L1: do {
  if ($6) {
   label = 34;
  } else {
   $7 = HEAP32[597]|0;
   $8 = (($1) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(45);
   if ($11) {
    $12 = ($5|0)==(0);
    $$phi$trans$insert = ((($9)) + 1|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    if ($12) {
     $14 = ($$pre<<24>>24)==(45);
     if (!($14)) {
      label = 34;
      break;
     }
     $15 = ((($9)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(0);
     if ($17) {
      label = 34;
      break;
     } else {
      $28 = 45;
     }
    } else {
     $13 = ($$pre<<24>>24)==(0);
     if ($13) {
      label = 34;
      break;
     } else {
      $28 = $$pre;
     }
    }
    $18 = HEAP8[$2>>0]|0;
    $19 = ($18<<24>>24)==(43);
    $20 = ($18<<24>>24)==(45);
    $$ = $19 | $20;
    $21 = $$&1;
    $22 = (($2) + ($21)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(58);
    $25 = HEAP32[$3>>2]|0;
    $26 = ($25|0)==(0|0);
    if ($26) {
     $$291127 = 0;
    } else {
     $27 = ((($9)) + 1|0);
     $29 = ($28<<24>>24)==(45);
     $30 = ((($9)) + 2|0);
     $$95 = $29 ? $30 : $27;
     $31 = HEAP8[$$95>>0]|0;
     $$086111 = 0;$$089110 = 0;$$092108 = 0;$33 = $25;
     L11: while(1) {
      $32 = HEAP8[$33>>0]|0;
      $34 = ($32<<24>>24)!=(0);
      $35 = ($32<<24>>24)==($31<<24>>24);
      $or$cond96103 = $34 & $35;
      if ($or$cond96103) {
       $$083105 = $33;$$185104 = $$95;
       while(1) {
        $36 = ((($$083105)) + 1|0);
        $37 = ((($$185104)) + 1|0);
        $38 = HEAP8[$36>>0]|0;
        $39 = ($38<<24>>24)!=(0);
        $40 = HEAP8[$37>>0]|0;
        $41 = ($38<<24>>24)==($40<<24>>24);
        $or$cond96 = $39 & $41;
        if ($or$cond96) {
         $$083105 = $36;$$185104 = $37;
        } else {
         $$185$lcssa = $37;$$lcssa = $40;$$lcssa102 = $38;
         break;
        }
       }
      } else {
       $$185$lcssa = $$95;$$lcssa = $31;$$lcssa102 = $32;
      }
      switch ($$lcssa<<24>>24) {
      case 61: case 0:  {
       $42 = ($$lcssa102<<24>>24)==(0);
       $43 = (($$089110) + 1)|0;
       if ($42) {
        $$288 = $$092108;$$291 = 1;
        break L11;
       } else {
        $$187100 = $$092108;$$19099 = $43;
       }
       break;
      }
      default: {
       $$187100 = $$086111;$$19099 = $$089110;
      }
      }
      $44 = (($$092108) + 1)|0;
      $45 = (($3) + ($44<<4)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0|0);
      if ($47) {
       $$288 = $$187100;$$291 = $$19099;
       break;
      } else {
       $$086111 = $$187100;$$089110 = $$19099;$$092108 = $44;$33 = $46;
      }
     }
     $48 = ($$291|0)==(1);
     if ($48) {
      $49 = (($7) + 1)|0;
      HEAP32[597] = $49;
      $50 = (($3) + ($$288<<4)|0);
      $51 = (((($3) + ($$288<<4)|0)) + 12|0);
      $52 = HEAP32[$51>>2]|0;
      HEAP32[199787] = $52;
      $53 = HEAP8[$$185$lcssa>>0]|0;
      $54 = ($53<<24>>24)==(61);
      $55 = (((($3) + ($$288<<4)|0)) + 4|0);
      $56 = HEAP32[$55>>2]|0;
      do {
       if ($54) {
        $57 = ($56|0)==(0);
        if (!($57)) {
         $64 = ((($$185$lcssa)) + 1|0);
         HEAP32[199786] = $64;
         break;
        }
        $58 = $24 ^ 1;
        $59 = HEAP32[598]|0;
        $60 = ($59|0)!=(0);
        $or$cond = $60 & $58;
        if (!($or$cond)) {
         $$194 = 63;
         break L1;
        }
        $61 = HEAP32[$1>>2]|0;
        $62 = HEAP32[$50>>2]|0;
        $63 = (_strlen($62)|0);
        ___getopt_msg($61,32401,$62,$63);
        $$194 = 63;
        break L1;
       } else {
        $65 = ($56|0)==(1);
        if ($65) {
         $66 = (($1) + ($49<<2)|0);
         $67 = HEAP32[$66>>2]|0;
         HEAP32[199786] = $67;
         $68 = ($67|0)==(0|0);
         if (!($68)) {
          $74 = (($7) + 2)|0;
          HEAP32[597] = $74;
          break;
         }
         if ($24) {
          $$194 = 58;
          break L1;
         }
         $69 = HEAP32[598]|0;
         $70 = ($69|0)==(0);
         if ($70) {
          $$194 = 63;
          break L1;
         }
         $71 = HEAP32[$1>>2]|0;
         $72 = HEAP32[$50>>2]|0;
         $73 = (_strlen($72)|0);
         ___getopt_msg($71,32486,$72,$73);
         $$194 = 63;
         break L1;
        }
       }
      } while(0);
      $75 = ($4|0)==(0|0);
      if ($75) {
       $79 = $52;
      } else {
       HEAP32[$4>>2] = $$288;
       $$pre125 = HEAP32[$51>>2]|0;
       $79 = $$pre125;
      }
      $76 = (((($3) + ($$288<<4)|0)) + 8|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($77|0)==(0|0);
      if ($78) {
       $$194 = $79;
       break;
      }
      HEAP32[$77>>2] = $79;
      $$194 = 0;
      break;
     } else {
      $$291127 = $$291;
     }
    }
    $80 = ($28<<24>>24)==(45);
    if ($80) {
     $81 = $24 ^ 1;
     $82 = HEAP32[598]|0;
     $83 = ($82|0)!=(0);
     $or$cond3 = $83 & $81;
     $84 = ((($9)) + 2|0);
     if ($or$cond3) {
      $85 = ($$291127|0)!=(0);
      $86 = $85 ? 32438 : 32462;
      $87 = HEAP32[$1>>2]|0;
      $88 = (_strlen($84)|0);
      ___getopt_msg($87,$86,$84,$88);
      $$pre124 = HEAP32[597]|0;
      $90 = $$pre124;
     } else {
      $90 = $7;
     }
     $89 = (($90) + 1)|0;
     HEAP32[597] = $89;
     $$194 = 63;
    } else {
     label = 34;
    }
   } else {
    label = 34;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $91 = (_getopt($0,$1,$2)|0);
  $$194 = $91;
 }
 return ($$194|0);
}
function _permute($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$018 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($1|0);
 if ($5) {
  $$018 = $2;
  while(1) {
   $6 = (($$018) + -1)|0;
   $7 = (($0) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($0) + ($$018<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)>($1|0);
   if ($10) {
    $$018 = $6;
   } else {
    break;
   }
  }
 }
 $11 = (($0) + ($1<<2)|0);
 HEAP32[$11>>2] = $4;
 return;
}
function ___getopt_msg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[482]|0;
 $5 = (___lctrans_cur($1)|0);
 _flockfile($4);
 $6 = (_fputs($0,$4)|0);
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (_strlen($5)|0);
  $9 = (_fwrite($5,$8,1,$4)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (_fwrite($2,1,$3,$4)|0);
   $12 = ($11|0)==($3|0);
   if ($12) {
    (_putc(10,$4)|0);
   }
  }
 }
 _funlockfile($4);
 return;
}
function _getopt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$1 = 0, $$not = 0, $$pre = 0, $$pre52 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $brmerge = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[597]|0;
 $6 = ($5|0)==(0);
 $7 = HEAP32[199784]|0;
 $8 = ($7|0)!=(0);
 $or$cond = $6 | $8;
 if ($or$cond) {
  HEAP32[199784] = 0;
  HEAP32[199785] = 0;
  HEAP32[597] = 1;
  $9 = 1;
 } else {
  $9 = $5;
 }
 $10 = ($9|0)<($0|0);
 L4: do {
  if ($10) {
   $11 = (($1) + ($9<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = -1;
   } else {
    $14 = HEAP8[$12>>0]|0;
    $15 = ($14<<24>>24)==(45);
    if (!($15)) {
     $16 = HEAP8[$2>>0]|0;
     $17 = ($16<<24>>24)==(45);
     if (!($17)) {
      $$0 = -1;
      break;
     }
     $18 = (($9) + 1)|0;
     HEAP32[597] = $18;
     HEAP32[199786] = $12;
     $$0 = 1;
     break;
    }
    $19 = ((($12)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    switch ($20<<24>>24) {
    case 0:  {
     $$0 = -1;
     break L4;
     break;
    }
    case 45:  {
     $21 = ((($12)) + 2|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if ($23) {
      $24 = (($9) + 1)|0;
      HEAP32[597] = $24;
      $$0 = -1;
      break L4;
     }
     break;
    }
    default: {
    }
    }
    $25 = HEAP32[199785]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[199785] = 1;
     $28 = 1;
    } else {
     $28 = $25;
    }
    $27 = (($12) + ($28)|0);
    $29 = (_mbtowc($3,$27,4)|0);
    $30 = ($29|0)<(0);
    if ($30) {
     HEAP32[$3>>2] = 65533;
     $$050 = 1;$36 = 65533;
    } else {
     $$pre = HEAP32[$3>>2]|0;
     $$050 = $29;$36 = $$pre;
    }
    $31 = HEAP32[597]|0;
    $32 = (($1) + ($31<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[199785]|0;
    $35 = (($33) + ($34)|0);
    HEAP32[199787] = $36;
    $37 = (($34) + ($$050))|0;
    HEAP32[199785] = $37;
    $38 = (($33) + ($37)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $41 = (($31) + 1)|0;
     HEAP32[597] = $41;
     HEAP32[199785] = 0;
    }
    $42 = HEAP8[$2>>0]|0;
    switch ($42<<24>>24) {
    case 43: case 45:  {
     $43 = ((($2)) + 1|0);
     $$049 = $43;
     break;
    }
    default: {
     $$049 = $2;
    }
    }
    HEAP32[$4>>2] = 0;
    $$051 = 0;
    while(1) {
     $44 = (($$049) + ($$051)|0);
     $45 = (_mbtowc($4,$44,4)|0);
     $46 = ($45|0)>(1);
     $$ = $46 ? $45 : 1;
     $$1 = (($$) + ($$051))|0;
     $47 = ($45|0)==(0);
     $48 = HEAP32[$3>>2]|0;
     $49 = HEAP32[$4>>2]|0;
     $50 = ($49|0)!=($48|0);
     $$not = $50 ^ 1;
     $brmerge = $47 | $$not;
     if ($brmerge) {
      break;
     } else {
      $$051 = $$1;
     }
    }
    if ($50) {
     $51 = HEAP8[$$049>>0]|0;
     $52 = ($51<<24>>24)!=(58);
     $53 = HEAP32[598]|0;
     $54 = ($53|0)!=(0);
     $or$cond3 = $52 & $54;
     if (!($or$cond3)) {
      $$0 = 63;
      break;
     }
     $55 = HEAP32[$1>>2]|0;
     ___getopt_msg($55,32462,$35,$$050);
     $$0 = 63;
     break;
    }
    $56 = (($$049) + ($$1)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ($57<<24>>24)==(58);
    if ($58) {
     $59 = (($$1) + 1)|0;
     $60 = (($$049) + ($59)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = ($61<<24>>24)==(58);
     do {
      if ($62) {
       HEAP32[199786] = 0;
       $$pre52 = HEAP8[$60>>0]|0;
       $71 = ($$pre52<<24>>24)!=(58);
       $72 = HEAP32[199785]|0;
       $73 = ($72|0)!=(0);
       $or$cond5 = $71 | $73;
       if ($or$cond5) {
        $79 = $72;
       } else {
        $$0 = $48;
        break L4;
       }
      } else {
       $63 = HEAP32[597]|0;
       $64 = ($63|0)<($0|0);
       if ($64) {
        $65 = HEAP32[199785]|0;
        $79 = $65;
        break;
       }
       $66 = HEAP8[$$049>>0]|0;
       $67 = ($66<<24>>24)==(58);
       if ($67) {
        $$0 = 58;
        break L4;
       }
       $68 = HEAP32[598]|0;
       $69 = ($68|0)==(0);
       if ($69) {
        $$0 = 63;
        break L4;
       }
       $70 = HEAP32[$1>>2]|0;
       ___getopt_msg($70,32486,$35,$$050);
       $$0 = 63;
       break L4;
      }
     } while(0);
     $74 = HEAP32[597]|0;
     $75 = (($74) + 1)|0;
     HEAP32[597] = $75;
     $76 = (($1) + ($74<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($79)|0);
     HEAP32[199786] = $78;
     HEAP32[199785] = 0;
     $$0 = $48;
    } else {
     $$0 = $48;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lctrans_cur($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_464()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___lctrans_impl($0,$5)|0);
 return ($6|0);
}
function ___pthread_self_464() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[199792]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[199792] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[199792] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[199792] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[199792] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _log10($0) {
 $0 = +$0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond105 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1048576);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = $2 & 2147483647;
   $6 = ($1|0)==(0);
   $7 = ($5|0)==(0);
   $8 = $6 & $7;
   if ($8) {
    $9 = $0 * $0;
    $10 = -1.0 / $9;
    $$0101 = $10;
    break;
   }
   if ($4) {
    $11 = $0 - $0;
    $12 = $11 / 0.0;
    $$0101 = $12;
    break;
   } else {
    $13 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
    $15 = HEAP32[tempDoublePtr+4>>2]|0;
    $$0 = -1077;$$0100 = $15;$27 = $14;$71 = $15;
    label = 9;
    break;
   }
  } else {
   $16 = ($2>>>0)>(2146435071);
   if ($16) {
    $$0101 = $0;
   } else {
    $17 = ($2|0)==(1072693248);
    $18 = ($1|0)==(0);
    $19 = (0)==(0);
    $20 = $18 & $19;
    $or$cond105 = $20 & $17;
    if ($or$cond105) {
     $$0101 = 0.0;
    } else {
     $$0 = -1023;$$0100 = $2;$27 = $1;$71 = $2;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $21 = (($$0100) + 614242)|0;
  $22 = $21 >>> 20;
  $23 = (($$0) + ($22))|0;
  $24 = $21 & 1048575;
  $25 = (($24) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $27;HEAP32[tempDoublePtr+4>>2] = $25;$26 = +HEAPF64[tempDoublePtr>>3];
  $28 = $26 + -1.0;
  $29 = $28 * 0.5;
  $30 = $28 * $29;
  $31 = $28 + 2.0;
  $32 = $28 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $28 - $30;
  HEAPF64[tempDoublePtr>>3] = $48;$49 = HEAP32[tempDoublePtr>>2]|0;
  $50 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $50;$51 = +HEAPF64[tempDoublePtr>>3];
  $52 = $28 - $51;
  $53 = $52 - $30;
  $54 = $30 + $47;
  $55 = $32 * $54;
  $56 = $53 + $55;
  $57 = $51 * 0.43429448187816888;
  $58 = (+($23|0));
  $59 = $58 * 0.30102999566361177;
  $60 = $58 * 3.6942390771589308E-13;
  $61 = $51 + $56;
  $62 = $61 * 2.5082946711645275E-11;
  $63 = $60 + $62;
  $64 = $56 * 0.43429448187816888;
  $65 = $64 + $63;
  $66 = $59 + $57;
  $67 = $59 - $66;
  $68 = $57 + $67;
  $69 = $68 + $65;
  $70 = $66 + $69;
  $$0101 = $70;
 }
 return (+$$0101);
}
function runPostSets() {
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}

function b0(p0) {
 p0 = p0|0; abort(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,___stdout_write,___stdio_seek,___stdio_write,___stdio_read,_sn_write,_do_read_74,b1];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _libmips_main: _libmips_main, stackSave: stackSave, _i64Subtract: _i64Subtract, ___udivdi3: ___udivdi3, setThrew: setThrew, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _bitshift64Ashr: _bitshift64Ashr, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, ___divdi3: ___divdi3, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_ii: dynCall_ii, ___errno_location: ___errno_location, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, stackRestore: stackRestore, _malloc: _malloc, _emscripten_replace_memory: _emscripten_replace_memory };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _libmips_main = Module["_libmips_main"] = asm["_libmips_main"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;







/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



  var log = document.getElementById('log');

  log.innerHTML = '';

  Module.print = function(text) {
    log.innerHTML += text + '\n';
  };

  Module.printErr = function(text) {
    Module.print(text);
  };

  var ensamblador_s = document.getElementById('ensamblador').value;
  var ensamblador_s_ptr = Module._malloc(lengthBytesUTF8(ensamblador_s)+1);

  stringToUTF8(ensamblador_s, ensamblador_s_ptr, lengthBytesUTF8(ensamblador_s)+1);

  function arg(arg_name)
  {
    var element = document.getElementById(arg_name);

    if (element.type == "checkbox")
    {
      return element.checked;
    }
    return element.value;
  }

  var htm_ptr = Module.ccall('libmips_main',
    // libmips_main returns a pointer to a char* string
    'number',
    // Argument types
    [
      //char* ensamblador_s,
      'number',
      //int config_en_s,
      'number',
      //int solucion_riesgos_control_p, int latencia_salto_p,
      'number', 'number',
      //int solucion_riesgos_datos_p,
      'number',
      //int FP_ADD_LAT_p, FP_CMP_LAT_p, FP_LS_LAT_p, FP_MUL_LAT_p,	
      'number', 'number', 'number', 'number'
    ],
    // Arguments
    [
      ensamblador_s_ptr,
      arg('config_en_s'),
      arg('solucion_riesgos_control_p'), arg('latencia_salto_p'),
      arg('solucion_riesgos_datos_p'),
      arg('FP_ADD_LAT_p'), arg('FP_CMP_LAT_p'), arg('FP_LS_LAT_p'), arg('FP_MUL_LAT_p')
    ]
  );
  Module._free(ensamblador_s_ptr);

  var resultado = window.open();

  resultado.document.open();
  resultado.document.write(Pointer_stringify(htm_ptr));
  Module._free(htm_ptr);
  resultado.document.close();
}

function leer_fichero_ensamblador(fichero_ensamblador)
{
  var reader = new FileReader();

  reader.addEventListener("load", function () {
    document.getElementById('ensamblador').value = reader.result;
  }, false);

  reader.readAsText(fichero_ensamblador.files[0]);
}

var ventana_instrucciones;
var texto_ventana_instrucciones = `
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Instrucciones Práctica 2a</title>
</head>
<body>

<h1>Arquitectura e Ingeniería de Computadores</h1>

<h2>Unidad de Instrucción Segmentada (I)</h2>

<h3>Objetivos</h3>

<ul>
<li>Conocer el manejo de un simulador de computador segmentado.</li>
<li>Analizar la influencia de los riesgos de control y datos en la prestaciones de la unidad de instrucción segmentada. </li>
<li>Realizar programas en lenguaje ensamblador MIPS. </li>
</ul>

<h3>El simulador del computador MIPS de 5 etapas</h3>
	
<p>El simulador es capaz de simular ciclo
a ciclo la ejecución de instrucciones del MIPS, así como el avance
de las mismas por la ruta de datos de la máquina.</p>

<p>Soporta un subconjunto de las
instrucciones del MIPS que operan sobre el banco de registros
entero. Tiene cache de instrucciones y de datos separadas
(arquitectura <i>Harvard</i>). Los registros se escriben y leen
en el primer y segundo semiciclo de reloj, respectivamente. </p>

<p>
Los riesgos
de datos pueden resolverse insertando <i>Stalls</i> (ciclos de parada) o con <i>Cortocircuitos</i>.
</p>

<p>
Los riesgos de
control pueden resolverse aplicando diversas estrategias:
<i>Stalls</i>, <i>Predict Not Taken</i> y <i>Delay Slot</i>, con tres posibilidades
de latencia de salto (1, 2, o 3).</p>

<p>Nótese que la
ruta de datos simulada cambia en función de las estrategias
empleadas para resolver los riesgos.</p>

<p>Al pulsar el botón <i>Ejecutar</i> se ejecuta el programa en ensamblador, lo que abre una nueva página del navegador que 
 muestra la configuración del procesador y el contenido inicial de la memoria, así como unos enlaces a otras páginas que permiten navegar por los resultados:

</p><ul>
<li>Página <i>INICIO</i>: Muestra la configuración del procesador y el contenido inicial de la memoria.</li>
<li>Página <i>FINAL</i>: Muestra los resultados de prestaciones tras la ejecución, la configuración del procesador y el contenido final de la memoria.</li>
<li>Página <i>Estado</i>: Muestra el diagrama instrucciones-tiempo correspondiente a la ejecución del programa en un ciclo dado,
así como el estado de la unidad de ejecución, que indica qué instrucción ocupa cada una de las etapas del procesador (cada instrucción se muestra en un color diferente).<br> 
También muestra el contenido de los registros y de la memoria al final del ciclo. 
En caso de operaciones de lectura o escritura, se utiliza como color de fondo en el registro o posición de memoria accedido el correspondiente la instrucción implicada. <br>
Por último, desde esta página tenemos enlaces a las páginas de estado correspondientes a 1, 5 o 10 ciclos anteriores o posteriores al actual.
</li>
</ul> 

<p>Navegando por las páginas de estado podemos observar el avance de las instrucciones a lo largo de la
unidad de instrucción segmentada así como la inserción de ciclos de
parada cuando se detectan riesgos. En la página <i>FINAL</i> se pueden obtener los resultados finales de prestaciones así como analizar el contenido de los registros 
y la memoria para comprobar la correcta ejecución del programa. </p>

<h3>Ejemplo de programa para MIPS</h3>

<ol>

<li>Lanzar a ejecución el programa en ensamblador precargado en el simulador, resolviendo riesgos de datos y de control mediante <i>Stalls</i>.
Tras la ejecución, se debe haber almacenado en la dirección definida por la etiqueta <i>z</i> el vector con el resultado del
programa. Anotar el número de instrucciones ejecutadas, los ciclos totales transcurridos y el CPI obtenido.</li>
	
<li>Ejecutar de nuevo el programa cambiando a <i>Predict Not Taken</i> la resolución de riesgos de control.
Si analizamos la ejecución ciclo a ciclo para la primera iteración del bucle, podemos observar cómo se abortan las
instrucciones buscadas incorrectamente tras la instrucción salto (puesto que éste es efectivo).
Accediendo a los resultados finales, anotar el número de instrucciones ejecutadas, los ciclos totales transcurrido y el CPI obtenido.
Comparar estos resultados con los de la primera ejecución calculando la aceleración.
</li>
	
<li>Manteniendo la resolución de los riesgos de control mediante <i>Predict Not Taken</i>,
modificar la configuración del simulador para que los riesgos de datos se resuelvan mediante <i>Cortocircuitos</i> y ejecutar el programa.
El análisis de la ejecución ciclo a ciclo de la primera iteración del bucle nos permite observar cómo
se aplican los cortocircuitos adecuados. 
Accediendo a los resultados finales, anotar el número de instrucciones ejecutadas, los ciclos totales transcurridos y el CPI obtenido.
Comparar estos resultados con los de la primera ejecución calculando la aceleración.</li>


</ol>

<h3>Realización de modificaciones en el código</h3>

<ol>

<li>Seleccionar las estrategias de resolución de riesgos <i>Predict Not Taken</i> y
<i>Cortocircuitos</i> y modifícar el código para reducir la penalización por
riesgos de datos. Téngase en cuenta que si se aplican cortocircuitos, las únicas instrucciones que insertan ciclos de parada para
resolver los riesgos de datos son las de carga.
Accediendo a los resultados finales, anotar el número de instrucciones ejecutadas, los ciclos totales transcurridos y el CPI obtenido.
Comparar estos resultados con los de la primera ejecución calculando la aceleración.</li>

<li>Manteniendo los <i>Cortocircuitos</i> para resolver los riesgos de datos, 
seleccionar ahora <i>Delay Slot</i> con latencia de salto 1 como estrategia de
resolución de los riesgos de control. Partiendo del código obtenido en el
apartado anterior, modificarlo nuevamente 
para que se ejecute adecuadamente, intentando rellenar el
<i>delay slot</i> con instrucciones útiles. 
Accediendo a los resultados finales, anotar el número de instrucciones ejecutadas, los ciclos totales transcurridos y el CPI obtenido.
Comparar estos resultados con los de la primera ejecución calculando la aceleración.</li>

<li>Manteniendo los <i>Cortocircuitos</i> para resolver los riesgos de datos, 
seleccionar ahora <i>Delay Slot</i> con latencia de salto 3 como estrategia de
resolución de los riesgos de control. Partiendo del código obtenido en el
apartado anterior, modificarlo nuevamente 
para que se ejecute adecuadamente, intentando rellenar el
<i>delay slot</i> con instrucciones útiles. 
Accediendo a los resultados finales, anotar el número de instrucciones ejecutadas, los ciclos totales transcurridos y el CPI obtenido.
Comparar estos resultados con los de la primera ejecución calculando la aceleración.</li>

</ol>

<h3>Optimización de un programa</h3>

<ol>
	
<li>El código en alto nivel que se muestra seguidamente realiza la
ordenación de un vector aplicando el método de selección:

<pre>  
FOR i := 0 TO n-2 DO
  FOR j := i+1 TO n-1 DO
    IF a(i)&gt;a(j) THEN
       temp := a(i);
       a(i) := a(j);
       a(j) := temp;
    END;
  END;
END;
</pre>

El programa equivalente en lenguaje ensamblador del MIPS es el siguiente:

<pre>	.data
a:	.dword  9,8,7,6,5,4,3,2,1,0
afin:	.dword  0

	.text
start:	dadd r1,r0,a
	dadd r5,r0,afin
	dsub r4,r5,#8

loopi:	
	ld r6,0(r1)
	dadd r2,r1,#8
loopj:
	ld r7,0(r2)
	sgt r3,r6,r7
	beqz r3, endif
then:	
	sd r7,0(r1)
	sd r6,0(r2)
	dadd r6,r7,r0
endif:	
	dadd r2,r2,#8
	seq r3,r2,r5
	beqz r3,loopj
	dadd r1,r1,#8
	seq r3,r1,r4
	beqz r3,loopi

	trap #0
</pre>

Este programa en ensamblador está preparado para ejecutarse en un MIPS que resuelve los riesgos de datos 
con <i>Cortocircuitos</i>, y los riesgos de control mediante <i>Predict Not Taken</i>. 
Analizar el programa y comprobar su correcto funcionamiento ejecutándolo en el simulador con latencia de salto 3.
Analizar su tiempo de ejecución y CPI.</li>

<li>Modificar el programa para que utilice <i>Delay Slot</i> con latencia de salto igual a 1, insertando instrucciones <i>nop</i> en el <i>delay slot</i>. Comprobar su correcto funcionamiento ejecutándolo
en el simulador.</li>

<li>Optimizar el programa modificado con el objeto de reducir el numero de ciclos de
parada y rellenar el <i>delay slots</i> con instrucciones útiles. Analizar su
tiempo de ejecución y CPI.</li>

</ol>

</body>
</html>
`;

function monstrar_instrucciones()
{
  if (typeof(ventana_instrucciones) == 'undefined' || ventana_instrucciones.closed)
  {
    ventana_instrucciones = window.open("", "instrucciones", "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=800,top=100,left=1000");
    ventana_instrucciones.document.body.innerHTML = texto_ventana_instrucciones;
  }
  else
  {
    ventana_instrucciones.focus();
  }
}

</script>
</head>
<body>

<input type="button" value="Instrucciones Práctica 2a" onclick='monstrar_instrucciones()' />
<hr/>

<table>
  <tr>
    <th style="text-align:left;">
      Configuración
    </th>
    <th style="text-align:left;">
      <button id="ejecutar" onClick="ejecutar_ensamblador()">Ejecutar</button>
      <input type="file" id="fichero_ensamblador" onChange="leer_fichero_ensamblador(this)" />
    </th>
    <th style="text-align:left;">
      Salida
    </th>
  </tr>
  <tr>
    <td style="vertical-align:top; white-space:nowrap;">
      <div style="display: none;">
      <hr/>
      En el c&oacute;digo ensamblador <input type="checkbox" id="config_en_s" />
      </div>
      <hr/>
      Riesgos de datos:<br/>
      <select id="solucion_riesgos_datos_p">
        <option value="1">Stalls</option>
        <option value="2">Cortocircuitos</option>
        <option value="0">No solucionados</option>
      </select>
      <hr/>
      Riesgos de control:<br/>
      <select id="solucion_riesgos_control_p">
        <option value="0">Stalls</option>
        <option value="1">Predict-Not-Taken</option>
        <option value="2">Delay Slot</option>
      </select>
      <br/>
      Latencia de salto:<br/> 
      <select id="latencia_salto_p">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3" selected="selected">3</option>
      </select>
      <div style="display: none;">
      <hr/>
      Latencia operadores de coma flotante:<br/>
      ADD <input type="text" id="FP_ADD_LAT_p" value="4" size="1" />
      CMP <input type="text" id="FP_CMP_LAT_p" value="4" size="1" />
      LS <input type="text" id="FP_LS_LAT_p" value="7" size="1" />
      MUL <input type="text" id="FP_MUL_LAT_p" value="2" size="1" />
      <hr/>
      </div>
    </td>
    <td>
      <textarea id="ensamblador" rows="40" cols="80">
    ; Código ensamblador correspondiente a la operación vectorial Z = a + X + Y  
    ;
      
    .data
    
    ; Vector X
x:  .dword 0,1,2,3,4,5,6,7,8,9
    .dword 10,11,12,13,14,15
	
    ; Vector Y
y:  .dword 100,100,100,100,100,100,100,100,100,100
    .dword 100,100,100,100,100,100

    ; Vector Z
    ; 16 elementos son 16*8=128 bytes
z:  .space 128

    ; Escalar a
a:  .dword -10

    ; Codigo
    .text

start:
    dadd r1,r0,x
    dadd r4,r1,#128 ; 16*8
    dadd r2,r0,y
    dadd r3,r0,z
    ld r10,a(r0)

loop:
    ld r12,0(r1)
    dadd r12,r10,r12
    ld r14,0(r2)
    dadd r14,r12,r14
    sd r14,0(r3)
    dadd r1,r1,#8
    dadd r2,r2,#8
    dadd r3,r3,#8
    seq r5,r4,r1
    beqz r5,loop

    trap #0         ; Fin de programa      
      </textarea>    
    </td>
    <td>
      <textarea id="log" rows="40" cols="80">
      </textarea>
    </td>
  </tr>
</table>

</body>
</html>
